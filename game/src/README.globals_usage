MOVEDIR_DOWN usage ===
g_utils.c:312:vec3_t MOVEDIR_DOWN	= {0, 0, -1};
g_utils.c:322:		VectorCopy (MOVEDIR_DOWN, movedir);
MOVEDIR_UP usage ===
g_utils.c:310:vec3_t MOVEDIR_UP	= {0, 0, 1};
g_utils.c:318:		VectorCopy (MOVEDIR_UP, movedir);
VEC_DOWN usage ===
g_utils.c:311:vec3_t VEC_DOWN		= {0, -2, 0};
g_utils.c:320:	else if (VectorCompare (angles, VEC_DOWN))
VEC_UP usage ===
g_utils.c:309:vec3_t VEC_UP		= {0, -1, 0};
g_utils.c:316:	if (VectorCompare (angles, VEC_UP))
_BigFloat usage ===
q_shared.c:938:float	(*_BigFloat) (float l);
q_shared.c:945:float	BigFloat (float l) {return _BigFloat(l);}
q_shared.c:1019:		_BigFloat = FloatSwap;
q_shared.c:1029:		_BigFloat = FloatNoSwap;
_BigLong usage ===
q_shared.c:936:int		(*_BigLong) (int l);
q_shared.c:943:int		BigLong (int l) {return _BigLong(l);}
q_shared.c:1017:		_BigLong = LongSwap;
q_shared.c:1027:		_BigLong = LongNoSwap;
_BigShort usage ===
q_shared.c:934:short	(*_BigShort) (short l);
q_shared.c:941:short	BigShort(short l){return _BigShort(l);}
q_shared.c:1015:		_BigShort = ShortSwap;
q_shared.c:1025:		_BigShort = ShortNoSwap;
_LittleFloat usage ===
q_shared.c:939:float	(*_LittleFloat) (float l);
q_shared.c:946:float	LittleFloat (float l) {return _LittleFloat(l);}
q_shared.c:1020:		_LittleFloat = FloatNoSwap;
q_shared.c:1030:		_LittleFloat = FloatSwap;
_LittleLong usage ===
q_shared.c:937:int		(*_LittleLong) (int l);
q_shared.c:944:int		LittleLong (int l) {return _LittleLong(l);}
q_shared.c:1018:		_LittleLong = LongNoSwap;
q_shared.c:1028:		_LittleLong = LongSwap;
_LittleShort usage ===
q_shared.c:935:short	(*_LittleShort) (short l);
q_shared.c:942:short	LittleShort(short l) {return _LittleShort(l);}
q_shared.c:1016:		_LittleShort = ShortNoSwap;
q_shared.c:1026:		_LittleShort = ShortSwap;
actor_frames_attack usage ===
m_actor.c:382:mframe_t actor_frames_attack [] =
m_actor.c:389:mmove_t actor_move_attack = {FRAME_attak01, FRAME_attak04, actor_frames_attack, actor_run};
actor_frames_death1 usage ===
m_actor.c:309:mframe_t actor_frames_death1 [] =
m_actor.c:319:mmove_t actor_move_death1 = {FRAME_death101, FRAME_death107, actor_frames_death1, actor_dead};
actor_frames_death2 usage ===
m_actor.c:321:mframe_t actor_frames_death2 [] =
m_actor.c:337:mmove_t actor_move_death2 = {FRAME_death201, FRAME_death213, actor_frames_death2, actor_dead};
actor_frames_flipoff usage ===
m_actor.c:181:mframe_t actor_frames_flipoff [] =
m_actor.c:198:mmove_t actor_move_flipoff = {FRAME_flip01, FRAME_flip14, actor_frames_flipoff, actor_run};
actor_frames_pain1 usage ===
m_actor.c:157:mframe_t actor_frames_pain1 [] =
m_actor.c:163:mmove_t actor_move_pain1 = {FRAME_pain101, FRAME_pain103, actor_frames_pain1, actor_run};
actor_frames_pain2 usage ===
m_actor.c:165:mframe_t actor_frames_pain2 [] =
m_actor.c:171:mmove_t actor_move_pain2 = {FRAME_pain201, FRAME_pain203, actor_frames_pain2, actor_run};
actor_frames_pain3 usage ===
m_actor.c:173:mframe_t actor_frames_pain3 [] =
m_actor.c:179:mmove_t actor_move_pain3 = {FRAME_pain301, FRAME_pain303, actor_frames_pain3, actor_run};
actor_frames_run usage ===
m_actor.c:119:mframe_t actor_frames_run [] =
m_actor.c:134:mmove_t actor_move_run = {FRAME_run02, FRAME_run07, actor_frames_run, NULL};
actor_frames_stand usage ===
m_actor.c:39:mframe_t actor_frames_stand [] =
m_actor.c:85:mmove_t actor_move_stand = {FRAME_stand101, FRAME_stand140, actor_frames_stand, NULL};
actor_frames_taunt usage ===
m_actor.c:200:mframe_t actor_frames_taunt [] =
m_actor.c:220:mmove_t actor_move_taunt = {FRAME_taunt01, FRAME_taunt17, actor_frames_taunt, actor_run};
actor_frames_walk usage ===
m_actor.c:97:mframe_t actor_frames_walk [] =
m_actor.c:111:mmove_t actor_move_walk = {FRAME_walk01, FRAME_walk08, actor_frames_walk, NULL};
actor_move_attack usage ===
m_actor.c:389:mmove_t actor_move_attack = {FRAME_attak01, FRAME_attak04, actor_frames_attack, actor_run};
m_actor.c:395:	self->monsterinfo.currentmove = &actor_move_attack;
actor_move_death1 usage ===
m_actor.c:319:mmove_t actor_move_death1 = {FRAME_death101, FRAME_death107, actor_frames_death1, actor_dead};
m_actor.c:366:		self->monsterinfo.currentmove = &actor_move_death1;
actor_move_death2 usage ===
m_actor.c:337:mmove_t actor_move_death2 = {FRAME_death201, FRAME_death213, actor_frames_death2, actor_dead};
m_actor.c:368:		self->monsterinfo.currentmove = &actor_move_death2;
actor_move_flipoff usage ===
m_actor.c:198:mmove_t actor_move_flipoff = {FRAME_flip01, FRAME_flip14, actor_frames_flipoff, actor_run};
m_actor.c:251:			self->monsterinfo.currentmove = &actor_move_flipoff;
actor_move_pain1 usage ===
m_actor.c:163:mmove_t actor_move_pain1 = {FRAME_pain101, FRAME_pain103, actor_frames_pain1, actor_run};
m_actor.c:261:		self->monsterinfo.currentmove = &actor_move_pain1;
actor_move_pain2 usage ===
m_actor.c:171:mmove_t actor_move_pain2 = {FRAME_pain201, FRAME_pain203, actor_frames_pain2, actor_run};
m_actor.c:263:		self->monsterinfo.currentmove = &actor_move_pain2;
actor_move_pain3 usage ===
m_actor.c:179:mmove_t actor_move_pain3 = {FRAME_pain301, FRAME_pain303, actor_frames_pain3, actor_run};
m_actor.c:265:		self->monsterinfo.currentmove = &actor_move_pain3;
actor_move_run usage ===
m_actor.c:134:mmove_t actor_move_run = {FRAME_run02, FRAME_run07, actor_frames_run, NULL};
m_actor.c:153:	self->monsterinfo.currentmove = &actor_move_run;
actor_move_stand usage ===
m_actor.c:85:mmove_t actor_move_stand = {FRAME_stand101, FRAME_stand140, actor_frames_stand, NULL};
m_actor.c:89:	self->monsterinfo.currentmove = &actor_move_stand;
m_actor.c:471:	self->monsterinfo.currentmove = &actor_move_stand;
actor_move_taunt usage ===
m_actor.c:220:mmove_t actor_move_taunt = {FRAME_taunt01, FRAME_taunt17, actor_frames_taunt, actor_run};
m_actor.c:253:			self->monsterinfo.currentmove = &actor_move_taunt;
actor_move_walk usage ===
m_actor.c:111:mmove_t actor_move_walk = {FRAME_walk01, FRAME_walk08, actor_frames_walk, NULL};
m_actor.c:115:	self->monsterinfo.currentmove = &actor_move_walk;
actor_names usage ===
m_actor.c:26:char *actor_names[MAX_ACTOR_NAMES] =
m_actor.c:254:		name = actor_names[(self - g_edicts)%MAX_ACTOR_NAMES];
m_actor.c:518:			gi.cprintf (ent, PRINT_CHAT, "%s: %s\n", actor_names[(other - g_edicts)%MAX_ACTOR_NAMES], self->message);
aimangles usage ===
m_infantry.c:244:vec3_t	aimangles[] =
m_infantry.c:292:		VectorSubtract (self->s.angles, aimangles[flash_number-MZ2_INFANTRY_MACHINEGUN_2], vec);
berserk_frames_attack_club usage ===
m_berserk.c:204:mframe_t berserk_frames_attack_club [] =
m_berserk.c:219:mmove_t berserk_move_attack_club = {FRAME_att_c9, FRAME_att_c20, berserk_frames_attack_club, berserk_run};
berserk_frames_attack_spike usage ===
m_berserk.c:182:mframe_t berserk_frames_attack_spike [] =
m_berserk.c:193:mmove_t berserk_move_attack_spike = {FRAME_att_c1, FRAME_att_c8, berserk_frames_attack_spike, berserk_run};
berserk_frames_attack_strike usage ===
m_berserk.c:228:mframe_t berserk_frames_attack_strike [] =
m_berserk.c:246:mmove_t berserk_move_attack_strike = {FRAME_att_c21, FRAME_att_c34, berserk_frames_attack_strike, berserk_run};
berserk_frames_death1 usage ===
m_berserk.c:347:mframe_t berserk_frames_death1 [] =
m_berserk.c:364:mmove_t berserk_move_death1 = {FRAME_death1, FRAME_death13, berserk_frames_death1, berserk_dead};
berserk_frames_death2 usage ===
m_berserk.c:367:mframe_t berserk_frames_death2 [] =
m_berserk.c:378:mmove_t berserk_move_death2 = {FRAME_deathc1, FRAME_deathc8, berserk_frames_death2, berserk_dead};
berserk_frames_pain1 usage ===
m_berserk.c:280:mframe_t berserk_frames_pain1 [] =
m_berserk.c:287:mmove_t berserk_move_pain1 = {FRAME_painc1, FRAME_painc4, berserk_frames_pain1, berserk_run};
berserk_frames_pain2 usage ===
m_berserk.c:290:mframe_t berserk_frames_pain2 [] =
m_berserk.c:313:mmove_t berserk_move_pain2 = {FRAME_painb1, FRAME_painb20, berserk_frames_pain2, berserk_run};
berserk_frames_run1 usage ===
m_berserk.c:150:mframe_t berserk_frames_run1 [] =
m_berserk.c:159:mmove_t berserk_move_run1 = {FRAME_run1, FRAME_run6, berserk_frames_run1, NULL};
berserk_frames_stand usage ===
m_berserk.c:51:mframe_t berserk_frames_stand [] =
m_berserk.c:59:mmove_t berserk_move_stand = {FRAME_stand1, FRAME_stand5, berserk_frames_stand, NULL};
berserk_frames_stand_fidget usage ===
m_berserk.c:66:mframe_t berserk_frames_stand_fidget [] =
m_berserk.c:89:mmove_t berserk_move_stand_fidget = {FRAME_standb1, FRAME_standb20, berserk_frames_stand_fidget, berserk_stand};
berserk_frames_walk usage ===
m_berserk.c:103:mframe_t berserk_frames_walk [] =
m_berserk.c:118:mmove_t berserk_move_walk = {FRAME_walkc1, FRAME_walkc11, berserk_frames_walk, NULL};
berserk_move_attack_club usage ===
m_berserk.c:219:mmove_t berserk_move_attack_club = {FRAME_att_c9, FRAME_att_c20, berserk_frames_attack_club, berserk_run};
m_berserk.c:254:		self->monsterinfo.currentmove = &berserk_move_attack_club;
berserk_move_attack_spike usage ===
m_berserk.c:193:mmove_t berserk_move_attack_spike = {FRAME_att_c1, FRAME_att_c8, berserk_frames_attack_spike, berserk_run};
m_berserk.c:252:		self->monsterinfo.currentmove = &berserk_move_attack_spike;
berserk_move_attack_strike usage ===
m_berserk.c:246:mmove_t berserk_move_attack_strike = {FRAME_att_c21, FRAME_att_c34, berserk_frames_attack_strike, berserk_run};
berserk_move_death1 usage ===
m_berserk.c:364:mmove_t berserk_move_death1 = {FRAME_death1, FRAME_death13, berserk_frames_death1, berserk_dead};
m_berserk.c:405:		self->monsterinfo.currentmove = &berserk_move_death1;
berserk_move_death2 usage ===
m_berserk.c:378:mmove_t berserk_move_death2 = {FRAME_deathc1, FRAME_deathc8, berserk_frames_death2, berserk_dead};
m_berserk.c:407:		self->monsterinfo.currentmove = &berserk_move_death2;
berserk_move_pain1 usage ===
m_berserk.c:287:mmove_t berserk_move_pain1 = {FRAME_painc1, FRAME_painc4, berserk_frames_pain1, berserk_run};
m_berserk.c:330:		self->monsterinfo.currentmove = &berserk_move_pain1;
berserk_move_pain2 usage ===
m_berserk.c:313:mmove_t berserk_move_pain2 = {FRAME_painb1, FRAME_painb20, berserk_frames_pain2, berserk_run};
m_berserk.c:332:		self->monsterinfo.currentmove = &berserk_move_pain2;
berserk_move_run1 usage ===
m_berserk.c:159:mmove_t berserk_move_run1 = {FRAME_run1, FRAME_run6, berserk_frames_run1, NULL};
m_berserk.c:166:		self->monsterinfo.currentmove = &berserk_move_run1;
berserk_move_stand usage ===
m_berserk.c:59:mmove_t berserk_move_stand = {FRAME_stand1, FRAME_stand5, berserk_frames_stand, NULL};
m_berserk.c:63:	self->monsterinfo.currentmove = &berserk_move_stand;
m_berserk.c:164:		self->monsterinfo.currentmove = &berserk_move_stand;
m_berserk.c:451:	self->monsterinfo.currentmove = &berserk_move_stand;
berserk_move_stand_fidget usage ===
m_berserk.c:89:mmove_t berserk_move_stand_fidget = {FRAME_standb1, FRAME_standb20, berserk_frames_stand_fidget, berserk_stand};
m_berserk.c:98:	self->monsterinfo.currentmove = &berserk_move_stand_fidget;
berserk_move_walk usage ===
m_berserk.c:118:mmove_t berserk_move_walk = {FRAME_walkc1, FRAME_walkc11, berserk_frames_walk, NULL};
m_berserk.c:122:	self->monsterinfo.currentmove = &berserk_move_walk;
bigendien usage ===
q_shared.c:930:qboolean	bigendien;
q_shared.c:1014:		bigendien = false;
q_shared.c:1024:		bigendien = true;
bob_pitch usage ===
g_main.c:65:cvar_t	*bob_pitch;
g_save.c:195:	bob_pitch = gi.cvar ("bob_pitch", "0.002", 0);
p_view.c:280:		delta = bobfracsin * bob_pitch->value * xyspeed;
bob_roll usage ===
g_main.c:66:cvar_t	*bob_roll;
g_save.c:196:	bob_roll = gi.cvar ("bob_roll", "0.002", 0);
p_view.c:284:		delta = bobfracsin * bob_roll->value * xyspeed;
bob_up usage ===
g_main.c:64:cvar_t	*bob_up;
g_save.c:194:	bob_up  = gi.cvar ("bob_up", "0.005", 0);
p_view.c:311:	bob = bobfracsin * xyspeed * bob_up->value;
bobcycle usage ===
p_view.c:33:int		bobcycle;		// odd cycles are right foot going forward
p_view.c:287:		if (bobcycle & 1)
p_view.c:353:	if (bobcycle & 1)
p_view.c:805:		if ( (int)(current_client->bobtime+bobmove) != bobcycle )
p_view.c:1036:	bobcycle = (int)bobtime;
bobfracsin usage ===
p_view.c:34:float	bobfracsin;		// sin(bobfrac*M_PI)
p_view.c:280:		delta = bobfracsin * bob_pitch->value * xyspeed;
p_view.c:284:		delta = bobfracsin * bob_roll->value * xyspeed;
p_view.c:311:	bob = bobfracsin * xyspeed * bob_up->value;
p_view.c:351:	ent->client->ps.gunangles[ROLL] = xyspeed * bobfracsin * 0.005;
p_view.c:352:	ent->client->ps.gunangles[YAW] = xyspeed * bobfracsin * 0.01;
p_view.c:359:	ent->client->ps.gunangles[PITCH] = xyspeed * bobfracsin * 0.005;
p_view.c:1037:	bobfracsin = fabs(sin(bobtime*M_PI));
bobmove usage ===
p_view.c:32:float	bobmove;
p_view.c:805:		if ( (int)(current_client->bobtime+bobmove) != bobcycle )
p_view.c:1018:		bobmove = 0;
p_view.c:1024:			bobmove = 0.25;
p_view.c:1026:			bobmove = 0.125;
p_view.c:1028:			bobmove = 0.0625;
p_view.c:1031:	bobtime = (current_client->bobtime += bobmove);
bodyarmor_info usage ===
g_items.c:41:gitem_armor_t bodyarmor_info	= {100, 200, .80, .60, ARMOR_BODY};
g_items.c:645:			oldinfo = &bodyarmor_info;
g_items.c:1162:		&bodyarmor_info,
boss2_frames_attack_mg usage ===
m_boss2.c:282:mframe_t boss2_frames_attack_mg [] =
m_boss2.c:291:mmove_t boss2_move_attack_mg = {FRAME_attack10, FRAME_attack15, boss2_frames_attack_mg, NULL};
boss2_frames_attack_post_mg usage ===
m_boss2.c:293:mframe_t boss2_frames_attack_post_mg [] =
m_boss2.c:300:mmove_t boss2_move_attack_post_mg = {FRAME_attack16, FRAME_attack19, boss2_frames_attack_post_mg, boss2_run};
boss2_frames_attack_pre_mg usage ===
m_boss2.c:266:mframe_t boss2_frames_attack_pre_mg [] =
m_boss2.c:278:mmove_t boss2_move_attack_pre_mg = {FRAME_attack1, FRAME_attack9, boss2_frames_attack_pre_mg, NULL};
boss2_frames_attack_rocket usage ===
m_boss2.c:302:mframe_t boss2_frames_attack_rocket [] =
m_boss2.c:326:mmove_t boss2_move_attack_rocket = {FRAME_attack20, FRAME_attack40, boss2_frames_attack_rocket, boss2_run};
boss2_frames_death usage ===
m_boss2.c:360:mframe_t boss2_frames_death [] =
m_boss2.c:412:mmove_t boss2_move_death = {FRAME_death2, FRAME_death50, boss2_frames_death, boss2_dead};
boss2_frames_fidget usage ===
m_boss2.c:180:mframe_t boss2_frames_fidget [] =
m_boss2.c:213:mmove_t boss2_move_fidget = {FRAME_stand1, FRAME_stand30, boss2_frames_fidget, NULL};
boss2_frames_pain_heavy usage ===
m_boss2.c:328:mframe_t boss2_frames_pain_heavy [] =
m_boss2.c:349:mmove_t boss2_move_pain_heavy = {FRAME_pain2, FRAME_pain19, boss2_frames_pain_heavy, boss2_run};
boss2_frames_pain_light usage ===
m_boss2.c:351:mframe_t boss2_frames_pain_light [] =
m_boss2.c:358:mmove_t boss2_move_pain_light = {FRAME_pain20, FRAME_pain23, boss2_frames_pain_light, boss2_run};
boss2_frames_run usage ===
m_boss2.c:241:mframe_t boss2_frames_run [] =
m_boss2.c:264:mmove_t boss2_move_run = {FRAME_walk1, FRAME_walk20, boss2_frames_run, NULL};
boss2_frames_stand usage ===
m_boss2.c:154:mframe_t boss2_frames_stand [] =
m_boss2.c:178:mmove_t	boss2_move_stand = {FRAME_stand30, FRAME_stand50, boss2_frames_stand, NULL};
boss2_frames_walk usage ===
m_boss2.c:215:mframe_t boss2_frames_walk [] =
m_boss2.c:238:mmove_t boss2_move_walk = {FRAME_walk1, FRAME_walk20, boss2_frames_walk, NULL};
boss2_move_attack_mg usage ===
m_boss2.c:291:mmove_t boss2_move_attack_mg = {FRAME_attack10, FRAME_attack15, boss2_frames_attack_mg, NULL};
m_boss2.c:455:	self->monsterinfo.currentmove = &boss2_move_attack_mg;
m_boss2.c:462:			self->monsterinfo.currentmove = &boss2_move_attack_mg;
boss2_move_attack_post_mg usage ===
m_boss2.c:300:mmove_t boss2_move_attack_post_mg = {FRAME_attack16, FRAME_attack19, boss2_frames_attack_post_mg, boss2_run};
m_boss2.c:464:			self->monsterinfo.currentmove = &boss2_move_attack_post_mg;
m_boss2.c:466:		self->monsterinfo.currentmove = &boss2_move_attack_post_mg;
boss2_move_attack_pre_mg usage ===
m_boss2.c:278:mmove_t boss2_move_attack_pre_mg = {FRAME_attack1, FRAME_attack9, boss2_frames_attack_pre_mg, NULL};
m_boss2.c:442:		self->monsterinfo.currentmove = &boss2_move_attack_pre_mg;
m_boss2.c:447:			self->monsterinfo.currentmove = &boss2_move_attack_pre_mg;
boss2_move_attack_rocket usage ===
m_boss2.c:326:mmove_t boss2_move_attack_rocket = {FRAME_attack20, FRAME_attack40, boss2_frames_attack_rocket, boss2_run};
m_boss2.c:449:			self->monsterinfo.currentmove = &boss2_move_attack_rocket;
boss2_move_death usage ===
m_boss2.c:412:mmove_t boss2_move_death = {FRAME_death2, FRAME_death50, boss2_frames_death, boss2_dead};
m_boss2.c:513:	self->monsterinfo.currentmove = &boss2_move_death;
m_boss2.c:536:	self->monsterinfo.currentmove = &boss2_move_death;
boss2_move_fidget usage ===
m_boss2.c:213:mmove_t boss2_move_fidget = {FRAME_stand1, FRAME_stand30, boss2_frames_fidget, NULL};
boss2_move_pain_heavy usage ===
m_boss2.c:349:mmove_t boss2_move_pain_heavy = {FRAME_pain2, FRAME_pain19, boss2_frames_pain_heavy, boss2_run};
m_boss2.c:493:		self->monsterinfo.currentmove = &boss2_move_pain_heavy;
boss2_move_pain_light usage ===
m_boss2.c:358:mmove_t boss2_move_pain_light = {FRAME_pain20, FRAME_pain23, boss2_frames_pain_light, boss2_run};
m_boss2.c:483:		self->monsterinfo.currentmove = &boss2_move_pain_light;
m_boss2.c:488:		self->monsterinfo.currentmove = &boss2_move_pain_light;
boss2_move_run usage ===
m_boss2.c:264:mmove_t boss2_move_run = {FRAME_walk1, FRAME_walk20, boss2_frames_run, NULL};
m_boss2.c:424:		self->monsterinfo.currentmove = &boss2_move_run;
boss2_move_stand usage ===
m_boss2.c:178:mmove_t	boss2_move_stand = {FRAME_stand30, FRAME_stand50, boss2_frames_stand, NULL};
m_boss2.c:416:		self->monsterinfo.currentmove = &boss2_move_stand;
m_boss2.c:422:		self->monsterinfo.currentmove = &boss2_move_stand;
m_boss2.c:675:	self->monsterinfo.currentmove = &boss2_move_stand;	
boss2_move_walk usage ===
m_boss2.c:238:mmove_t boss2_move_walk = {FRAME_walk1, FRAME_walk20, boss2_frames_walk, NULL};
m_boss2.c:429:	self->monsterinfo.currentmove = &boss2_move_walk;
brain_frames_attack1 usage ===
m_brain.c:431:mframe_t brain_frames_attack1 [] =
m_brain.c:452:mmove_t brain_move_attack1 = {FRAME_attak101, FRAME_attak118, brain_frames_attack1, brain_run};
brain_frames_attack2 usage ===
m_brain.c:481:mframe_t brain_frames_attack2 [] =
m_brain.c:501:mmove_t brain_move_attack2 = {FRAME_attak201, FRAME_attak217, brain_frames_attack2, brain_run};
brain_frames_death1 usage ===
m_brain.c:375:mframe_t brain_frames_death1 [] =
m_brain.c:396:mmove_t brain_move_death1 = {FRAME_death101, FRAME_death118, brain_frames_death1, brain_dead};
brain_frames_death2 usage ===
m_brain.c:365:mframe_t brain_frames_death2 [] =
m_brain.c:373:mmove_t brain_move_death2 = {FRAME_death201, FRAME_death205, brain_frames_death2, brain_dead};
brain_frames_defense usage ===
m_brain.c:244:mframe_t brain_frames_defense [] =
m_brain.c:256:mmove_t brain_move_defense = {FRAME_defens01, FRAME_defens08, brain_frames_defense, NULL};
brain_frames_duck usage ===
m_brain.c:339:mframe_t brain_frames_duck [] =
m_brain.c:350:mmove_t brain_move_duck = {FRAME_duck01, FRAME_duck08, brain_frames_duck, brain_run};
brain_frames_idle usage ===
m_brain.c:114:mframe_t brain_frames_idle [] =
m_brain.c:149:mmove_t brain_move_idle = {FRAME_stand31, FRAME_stand60, brain_frames_idle, brain_stand};
brain_frames_pain1 usage ===
m_brain.c:282:mframe_t brain_frames_pain1 [] =
m_brain.c:306:mmove_t brain_move_pain1 = {FRAME_pain101, FRAME_pain121, brain_frames_pain1, brain_run};
brain_frames_pain2 usage ===
m_brain.c:269:mframe_t brain_frames_pain2 [] =
m_brain.c:280:mmove_t brain_move_pain2 = {FRAME_pain201, FRAME_pain208, brain_frames_pain2, brain_run};
brain_frames_pain3 usage ===
m_brain.c:258:mframe_t brain_frames_pain3 [] =
m_brain.c:267:mmove_t brain_move_pain3 = {FRAME_pain301, FRAME_pain306, brain_frames_pain3, brain_run};
brain_frames_run usage ===
m_brain.c:516:mframe_t brain_frames_run [] =
m_brain.c:530:mmove_t brain_move_run = {FRAME_walk101, FRAME_walk111, brain_frames_run, NULL};
brain_frames_stand usage ===
m_brain.c:67:mframe_t brain_frames_stand [] =
m_brain.c:102:mmove_t brain_move_stand = {FRAME_stand01, FRAME_stand30, brain_frames_stand, NULL};
brain_frames_walk1 usage ===
m_brain.c:161:mframe_t brain_frames_walk1 [] =
m_brain.c:175:mmove_t brain_move_walk1 = {FRAME_walk101, FRAME_walk111, brain_frames_walk1, NULL};
brain_move_attack1 usage ===
m_brain.c:452:mmove_t brain_move_attack1 = {FRAME_attak101, FRAME_attak118, brain_frames_attack1, brain_run};
m_brain.c:477:		self->monsterinfo.currentmove = &brain_move_attack1;
m_brain.c:506:		self->monsterinfo.currentmove = &brain_move_attack1;
brain_move_attack2 usage ===
m_brain.c:501:mmove_t brain_move_attack2 = {FRAME_attak201, FRAME_attak217, brain_frames_attack2, brain_run};
m_brain.c:508:		self->monsterinfo.currentmove = &brain_move_attack2;
brain_move_death1 usage ===
m_brain.c:396:mmove_t brain_move_death1 = {FRAME_death101, FRAME_death118, brain_frames_death1, brain_dead};
m_brain.c:614:		self->monsterinfo.currentmove = &brain_move_death1;
brain_move_death2 usage ===
m_brain.c:373:mmove_t brain_move_death2 = {FRAME_death201, FRAME_death205, brain_frames_death2, brain_dead};
m_brain.c:616:		self->monsterinfo.currentmove = &brain_move_death2;
brain_move_defense usage ===
m_brain.c:256:mmove_t brain_move_defense = {FRAME_defens01, FRAME_defens08, brain_frames_defense, NULL};
brain_move_duck usage ===
m_brain.c:350:mmove_t brain_move_duck = {FRAME_duck01, FRAME_duck08, brain_frames_duck, brain_run};
m_brain.c:361:	self->monsterinfo.currentmove = &brain_move_duck;
brain_move_idle usage ===
m_brain.c:149:mmove_t brain_move_idle = {FRAME_stand31, FRAME_stand60, brain_frames_idle, brain_stand};
m_brain.c:154:	self->monsterinfo.currentmove = &brain_move_idle;
brain_move_pain1 usage ===
m_brain.c:306:mmove_t brain_move_pain1 = {FRAME_pain101, FRAME_pain121, brain_frames_pain1, brain_run};
m_brain.c:560:		self->monsterinfo.currentmove = &brain_move_pain1;
brain_move_pain2 usage ===
m_brain.c:280:mmove_t brain_move_pain2 = {FRAME_pain201, FRAME_pain208, brain_frames_pain2, brain_run};
m_brain.c:565:		self->monsterinfo.currentmove = &brain_move_pain2;
brain_move_pain3 usage ===
m_brain.c:267:mmove_t brain_move_pain3 = {FRAME_pain301, FRAME_pain306, brain_frames_pain3, brain_run};
m_brain.c:570:		self->monsterinfo.currentmove = &brain_move_pain3;
brain_move_run usage ===
m_brain.c:530:mmove_t brain_move_run = {FRAME_walk101, FRAME_walk111, brain_frames_run, NULL};
m_brain.c:538:		self->monsterinfo.currentmove = &brain_move_run;
brain_move_stand usage ===
m_brain.c:102:mmove_t brain_move_stand = {FRAME_stand01, FRAME_stand30, brain_frames_stand, NULL};
m_brain.c:106:	self->monsterinfo.currentmove = &brain_move_stand;
m_brain.c:536:		self->monsterinfo.currentmove = &brain_move_stand;
m_brain.c:672:	self->monsterinfo.currentmove = &brain_move_stand;	
brain_move_walk1 usage ===
m_brain.c:175:mmove_t brain_move_walk1 = {FRAME_walk101, FRAME_walk111, brain_frames_walk1, NULL};
m_brain.c:237:		self->monsterinfo.currentmove = &brain_move_walk1;
c_no usage ===
m_move.c:35:int c_yes, c_no;
m_move.c:64:	c_no++;
c_yes usage ===
m_move.c:35:int c_yes, c_no;
m_move.c:60:	c_yes++;
m_move.c:95:	c_yes++;
chick_frames_attack1 usage ===
m_chick.c:499:mframe_t chick_frames_attack1 [] =
m_chick.c:517:mmove_t chick_move_attack1 = {FRAME_attak114, FRAME_attak127, chick_frames_attack1, NULL};
chick_frames_death1 usage ===
m_chick.c:335:mframe_t chick_frames_death1 [] =
m_chick.c:351:mmove_t chick_move_death1 = {FRAME_death101, FRAME_death112, chick_frames_death1, chick_dead};
chick_frames_death2 usage ===
m_chick.c:307:mframe_t chick_frames_death2 [] =
m_chick.c:333:mmove_t chick_move_death2 = {FRAME_death201, FRAME_death223, chick_frames_death2, chick_dead};
chick_frames_duck usage ===
m_chick.c:418:mframe_t chick_frames_duck [] =
m_chick.c:428:mmove_t chick_move_duck = {FRAME_duck01, FRAME_duck07, chick_frames_duck, chick_run};
chick_frames_end_attack1 usage ===
m_chick.c:519:mframe_t chick_frames_end_attack1 [] =
m_chick.c:527:mmove_t chick_move_end_attack1 = {FRAME_attak128, FRAME_attak132, chick_frames_end_attack1, chick_run};
chick_frames_end_slash usage ===
m_chick.c:563:mframe_t chick_frames_end_slash [] =
m_chick.c:570:mmove_t chick_move_end_slash = {FRAME_attak213, FRAME_attak216, chick_frames_end_slash, chick_run};
chick_frames_fidget usage ===
m_chick.c:64:mframe_t chick_frames_fidget [] =
m_chick.c:97:mmove_t chick_move_fidget = {FRAME_stand201, FRAME_stand230, chick_frames_fidget, chick_stand};
chick_frames_pain1 usage ===
m_chick.c:220:mframe_t chick_frames_pain1 [] =
m_chick.c:228:mmove_t chick_move_pain1 = {FRAME_pain101, FRAME_pain105, chick_frames_pain1, chick_run};
chick_frames_pain2 usage ===
m_chick.c:230:mframe_t chick_frames_pain2 [] =
m_chick.c:238:mmove_t chick_move_pain2 = {FRAME_pain201, FRAME_pain205, chick_frames_pain2, chick_run};
chick_frames_pain3 usage ===
m_chick.c:240:mframe_t chick_frames_pain3 [] =
m_chick.c:264:mmove_t chick_move_pain3 = {FRAME_pain301, FRAME_pain321, chick_frames_pain3, chick_run};
chick_frames_run usage ===
m_chick.c:163:mframe_t chick_frames_run [] =
m_chick.c:178:mmove_t chick_move_run = {FRAME_walk11, FRAME_walk20, chick_frames_run, NULL};
chick_frames_slash usage ===
m_chick.c:549:mframe_t chick_frames_slash [] =
m_chick.c:561:mmove_t chick_move_slash = {FRAME_attak204, FRAME_attak212, chick_frames_slash, NULL};
chick_frames_stand usage ===
m_chick.c:107:mframe_t chick_frames_stand [] =
m_chick.c:141:mmove_t chick_move_stand = {FRAME_stand101, FRAME_stand130, chick_frames_stand, NULL};
chick_frames_start_attack1 usage ===
m_chick.c:480:mframe_t chick_frames_start_attack1 [] =
m_chick.c:496:mmove_t chick_move_start_attack1 = {FRAME_attak101, FRAME_attak113, chick_frames_start_attack1, NULL};
chick_frames_start_run usage ===
m_chick.c:148:mframe_t chick_frames_start_run [] =
m_chick.c:161:mmove_t chick_move_start_run = {FRAME_walk01, FRAME_walk10, chick_frames_start_run, chick_run};
chick_frames_start_slash usage ===
m_chick.c:600:mframe_t chick_frames_start_slash [] =
m_chick.c:606:mmove_t chick_move_start_slash = {FRAME_attak201, FRAME_attak203, chick_frames_start_slash, chick_slash};
chick_frames_walk usage ===
m_chick.c:180:mframe_t chick_frames_walk [] =
m_chick.c:194:mmove_t chick_move_walk = {FRAME_walk11, FRAME_walk20, chick_frames_walk, NULL};
chick_move_attack1 usage ===
m_chick.c:517:mmove_t chick_move_attack1 = {FRAME_attak114, FRAME_attak127, chick_frames_attack1, NULL};
m_chick.c:537:					self->monsterinfo.currentmove = &chick_move_attack1;
m_chick.c:546:	self->monsterinfo.currentmove = &chick_move_attack1;
chick_move_death1 usage ===
m_chick.c:351:mmove_t chick_move_death1 = {FRAME_death101, FRAME_death112, chick_frames_death1, chick_dead};
m_chick.c:380:		self->monsterinfo.currentmove = &chick_move_death1;
chick_move_death2 usage ===
m_chick.c:333:mmove_t chick_move_death2 = {FRAME_death201, FRAME_death223, chick_frames_death2, chick_dead};
m_chick.c:385:		self->monsterinfo.currentmove = &chick_move_death2;
chick_move_duck usage ===
m_chick.c:428:mmove_t chick_move_duck = {FRAME_duck01, FRAME_duck07, chick_frames_duck, chick_run};
m_chick.c:438:	self->monsterinfo.currentmove = &chick_move_duck;
chick_move_end_attack1 usage ===
m_chick.c:527:mmove_t chick_move_end_attack1 = {FRAME_attak128, FRAME_attak132, chick_frames_end_attack1, chick_run};
m_chick.c:541:	self->monsterinfo.currentmove = &chick_move_end_attack1;
chick_move_end_slash usage ===
m_chick.c:570:mmove_t chick_move_end_slash = {FRAME_attak213, FRAME_attak216, chick_frames_end_slash, chick_run};
m_chick.c:586:				self->monsterinfo.currentmove = &chick_move_end_slash;
m_chick.c:591:	self->monsterinfo.currentmove = &chick_move_end_slash;
chick_move_fidget usage ===
m_chick.c:97:mmove_t chick_move_fidget = {FRAME_stand201, FRAME_stand230, chick_frames_fidget, chick_stand};
m_chick.c:104:		self->monsterinfo.currentmove = &chick_move_fidget;
chick_move_pain1 usage ===
m_chick.c:228:mmove_t chick_move_pain1 = {FRAME_pain101, FRAME_pain105, chick_frames_pain1, chick_run};
m_chick.c:290:		self->monsterinfo.currentmove = &chick_move_pain1;
chick_move_pain2 usage ===
m_chick.c:238:mmove_t chick_move_pain2 = {FRAME_pain201, FRAME_pain205, chick_frames_pain2, chick_run};
m_chick.c:292:		self->monsterinfo.currentmove = &chick_move_pain2;
chick_move_pain3 usage ===
m_chick.c:264:mmove_t chick_move_pain3 = {FRAME_pain301, FRAME_pain321, chick_frames_pain3, chick_run};
m_chick.c:294:		self->monsterinfo.currentmove = &chick_move_pain3;
chick_move_run usage ===
m_chick.c:178:mmove_t chick_move_run = {FRAME_walk11, FRAME_walk20, chick_frames_run, NULL};
m_chick.c:212:		self->monsterinfo.currentmove = &chick_move_run;
chick_move_slash usage ===
m_chick.c:561:mmove_t chick_move_slash = {FRAME_attak204, FRAME_attak212, chick_frames_slash, NULL};
m_chick.c:581:				self->monsterinfo.currentmove = &chick_move_slash;
m_chick.c:596:	self->monsterinfo.currentmove = &chick_move_slash;
chick_move_stand usage ===
m_chick.c:141:mmove_t chick_move_stand = {FRAME_stand101, FRAME_stand130, chick_frames_stand, NULL};
m_chick.c:145:	self->monsterinfo.currentmove = &chick_move_stand;
m_chick.c:205:		self->monsterinfo.currentmove = &chick_move_stand;
m_chick.c:675:	self->monsterinfo.currentmove = &chick_move_stand;
chick_move_start_attack1 usage ===
m_chick.c:496:mmove_t chick_move_start_attack1 = {FRAME_attak101, FRAME_attak113, chick_frames_start_attack1, NULL};
m_chick.c:618:	self->monsterinfo.currentmove = &chick_move_start_attack1;
chick_move_start_run usage ===
m_chick.c:161:mmove_t chick_move_start_run = {FRAME_walk01, FRAME_walk10, chick_frames_start_run, chick_run};
m_chick.c:210:		self->monsterinfo.currentmove == &chick_move_start_run)
m_chick.c:216:		self->monsterinfo.currentmove = &chick_move_start_run;
chick_move_start_slash usage ===
m_chick.c:606:mmove_t chick_move_start_slash = {FRAME_attak201, FRAME_attak203, chick_frames_start_slash, chick_slash};
m_chick.c:612:	self->monsterinfo.currentmove = &chick_move_start_slash;
chick_move_walk usage ===
m_chick.c:194:mmove_t chick_move_walk = {FRAME_walk11, FRAME_walk20, chick_frames_walk, NULL};
m_chick.c:198:	self->monsterinfo.currentmove = &chick_move_walk;
m_chick.c:209:	if (self->monsterinfo.currentmove == &chick_move_walk ||
clientfields usage ===
g_save.c:134:field_t		clientfields[] =
g_save.c:419:	for (field=clientfields ; field->name ; field++)
g_save.c:428:	for (field=clientfields ; field->name ; field++)
g_save.c:447:	for (field=clientfields ; field->name ; field++)
com_token usage ===
g_spawn.c:420:	char		*com_token;
g_spawn.c:429:		com_token = COM_Parse (&data);
g_spawn.c:430:		if (com_token[0] == '}')
g_spawn.c:435:		strncpy (keyname, com_token, sizeof(keyname)-1);
g_spawn.c:438:		com_token = COM_Parse (&data);
g_spawn.c:442:		if (com_token[0] == '}')
g_spawn.c:452:		ED_ParseField (keyname, com_token, ent);
g_spawn.c:526:	char		*com_token;
g_spawn.c:559:		com_token = COM_Parse (&entities);
g_spawn.c:562:		if (com_token[0] != '{')
g_spawn.c:563:			gi.error ("ED_LoadFromFile: found %s when expecting {",com_token);
q_shared.c:1059:char	com_token[MAX_TOKEN_CHARS];
q_shared.c:1076:	com_token[0] = 0;
q_shared.c:1113:				com_token[len] = 0;
q_shared.c:1115:				return com_token;
q_shared.c:1119:				com_token[len] = c;
q_shared.c:1130:			com_token[len] = c;
q_shared.c:1142:	com_token[len] = 0;
q_shared.c:1145:	return com_token;
combatarmor_info usage ===
g_items.c:40:gitem_armor_t combatarmor_info	= { 50, 100, .60, .30, ARMOR_COMBAT};
g_items.c:643:			oldinfo = &combatarmor_info;
g_items.c:1185:		&combatarmor_info,
coop usage ===
g_ai.c:47:In coop games, sight_client will cycle between the clients.
g_ai.c:874:// look for other coop players here
g_ai.c:875://	if (coop && self->monsterinfo.search_time < level.time)
g_ai.c:971:	// coop will change to another enemy if visible
g_ai.c:972:	if (coop->value)
g_cmds.c:161:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:312:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:341:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:368:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_combat.c:105:			if (coop->value && attacker->client)
g_combat.c:319:		// this can only happen in coop (both new and old enemies are clients)
g_combat.c:393:	if ((targ != attacker) && ((deathmatch->value && ((int)(dmflags->value) & (DF_MODELTEAMS | DF_SKINTEAMS))) || coop->value))
g_items.c:167:	if ((coop->value) && (ent->item->flags & IT_STAY_COOP) && (quantity > 0))
g_items.c:424:	if (coop->value)
g_items.c:814:	if (!((coop->value) &&  (ent->item->flags & IT_STAY_COOP)) || (ent->spawnflags & (DROPPED_ITEM | DROPPED_PLAYER_ITEM)))
g_items.c:1111:	if (coop->value && (strcmp(ent->classname, "key_power_cube") == 0))
g_items.c:1117:	// don't let them drop items that stay in a coop game
g_items.c:1118:	if ((coop->value) && (item->flags & IT_STAY_COOP))
g_main.c:36:cvar_t	*coop;
g_save.c:177:	coop = gi.cvar ("coop", "0", CVAR_LATCH);
g_spawn.c:589:				if ( /* ((coop->value) && (ent->spawnflags & SPAWNFLAG_NOT_COOP)) || */
g_spawn.c:807:	// reserve some spots for dead player bodies for coop / deathmatch
g_target.c:275:	if (!deathmatch->value && !coop->value)
g_trigger.c:233:	if (coop->value)
g_weapon.c:596:		if (!deathmatch->value && !coop->value)
p_client.c:33:// the coop spawn spots on some maps are SNAFU.  There are coop spots
p_client.c:36:// we use carnal knowledge of the maps to fix the coop spot targetnames to match
p_client.c:67:// some maps don't have any coop spots at all, so we need to create them
p_client.c:110:	if (!coop->value)
p_client.c:134:potential spawning position for coop games
p_client.c:139:	if (!coop->value)
p_client.c:218:	if (coop->value && attacker->client)
p_client.c:221:	if (deathmatch->value || coop->value)
p_client.c:534:		// this is kind of ugly, but it's how we want to handle keys in coop
p_client.c:537:			if (coop->value && itemlist[n].flags & IT_KEY)
p_client.c:663:		if (coop->value)
p_client.c:673:	if (coop->value)
p_client.c:845:	// assume there are four coop spots at each spawnpoint
p_client.c:856:		{	// this is a coop spawn point for one of the clients here
p_client.c:872:Chooses a player start, deathmatch start, coop start, etc
p_client.c:881:	else if (coop->value)
p_client.c:982:	if (deathmatch->value || coop->value)
p_client.c:1126:	else if (coop->value)
p_client.c:1133:		// this is kind of ugly, but it's how we want to handle keys in coop
p_hud.c:34:	if (deathmatch->value || coop->value)
p_hud.c:65:	if (deathmatch->value || coop->value)
p_hud.c:98:		if (coop->value)
p_hud.c:281:	if (!deathmatch->value && !coop->value)
p_trail.c:53:	if (deathmatch->value /* FIXME || coop */)
p_weapon.c:125:	if ( ( ((int)(dmflags->value) & DF_WEAPONS_STAY) || coop->value) 
p_weapon.c:152:			if (coop->value)
deathmatch usage ===
g_cmds.c:161:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:312:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:341:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:368:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_combat.c:393:	if ((targ != attacker) && ((deathmatch->value && ((int)(dmflags->value) & (DF_MODELTEAMS | DF_SKINTEAMS))) || coop->value))
g_combat.c:406:	if (skill->value == 0 && deathmatch->value == 0 && targ->client)
g_func.c:1159:	if (deathmatch->value)
g_items.c:172:	if (deathmatch->value)
g_items.c:199:	if (!deathmatch->value)
g_items.c:205:	if (!(ent->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:215:	if (!(ent->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:253:	if (!(ent->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:331:	if (!(ent->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:504:		if (other->client->pers.weapon != ent->item && ( !deathmatch->value || other->client->pers.weapon == FindItem("blaster") ) )
g_items.c:508:	if (!(ent->spawnflags & (DROPPED_ITEM | DROPPED_PLAYER_ITEM)) && (deathmatch->value))
g_items.c:550:	if (!(self->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:581:		if (!(ent->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:680:	if (!(ent->spawnflags & DROPPED_ITEM) && (deathmatch->value))
g_items.c:735:	if (deathmatch->value)
g_items.c:836:	if (deathmatch->value)
g_items.c:1074:	// some items will be prevented in deathmatch
g_items.c:1075:	if (deathmatch->value)
g_items.c:2123:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_items.c:2139:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_items.c:2156:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_items.c:2172:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_main.c:35:cvar_t	*deathmatch;
g_main.c:315:	if (!deathmatch->value)
g_main.c:436:	// see if it is time to end a deathmatch
g_misc.c:476:	if (deathmatch->value)
g_misc.c:561:	// no targeted lights in deathmatch, because they cause global messages
g_misc.c:562:	if (!self->targetname || deathmatch->value)
g_misc.c:825:	if (deathmatch->value)
g_misc.c:826:	{	// auto-remove for deathmatch
g_misc.c:976:	if (deathmatch->value)
g_misc.c:977:	{	// auto-remove for deathmatch
g_misc.c:1232:	if (deathmatch->value)
g_misc.c:1233:	{	// auto-remove for deathmatch
g_monster.c:536:	if (deathmatch->value)
g_save.c:176:	deathmatch = gi.cvar ("deathmatch", "0", CVAR_LATCH);
g_spawn.c:575:		// remove things (except the world) from different skill levels or deathmatch
g_spawn.c:578:			if (deathmatch->value)
g_spawn.c:807:	// reserve some spots for dead player bodies for coop / deathmatch
g_spawn.c:841:	if (deathmatch->value)
g_target.c:133:	if (deathmatch->value)
g_target.c:134:	{	// auto-remove for deathmatch
g_target.c:166:	if (deathmatch->value)
g_target.c:167:	{	// auto-remove for deathmatch
g_target.c:204:	if (deathmatch->value)
g_target.c:205:	{	// auto-remove for deathmatch
g_target.c:275:	if (!deathmatch->value && !coop->value)
g_target.c:282:	if (deathmatch->value && !( (int)dmflags->value & DF_ALLOW_EXIT) && other != world)
g_target.c:289:	if (deathmatch->value)
g_target.c:724:	if (deathmatch->value)
g_turret.c:389:	if (deathmatch->value)
g_weapon.c:596:		if (!deathmatch->value && !coop->value)
g_weapon.c:816:	if (deathmatch->value)
m_actor.c:427:	if (deathmatch->value)
m_berserk.c:415:	if (deathmatch->value)
m_boss2.c:638:	if (deathmatch->value)
m_boss31.c:698:	if (deathmatch->value)
m_boss32.c:834:	if (deathmatch->value)
m_boss3.c:55:	if (deathmatch->value)
m_brain.c:623:	if (deathmatch->value)
m_chick.c:630:	if (deathmatch->value)
m_flipper.c:363:	if (deathmatch->value)
m_float.c:613:	if (deathmatch->value)
m_flyer.c:575:	if (deathmatch->value)
m_gladiator.c:341:	if (deathmatch->value)
m_gunner.c:583:	if (deathmatch->value)
m_hover.c:575:	if (deathmatch->value)
m_infantry.c:558:	if (deathmatch->value)
m_insane.c:627:	if (deathmatch->value)
m_medic.c:720:	if (deathmatch->value)
m_mutant.c:613:	if (deathmatch->value)
m_parasite.c:508:	if (deathmatch->value)
m_soldier.c:1240:	if (deathmatch->value)
m_soldier.c:1263:	if (deathmatch->value)
m_soldier.c:1284:	if (deathmatch->value)
m_supertank.c:674:	if (deathmatch->value)
m_tank.c:794:	if (deathmatch->value)
p_client.c:121:potential spawning position for deathmatch games
p_client.c:125:	if (!deathmatch->value)
p_client.c:168:The deathmatch intermission point will be at one of these
p_client.c:221:	if (deathmatch->value || coop->value)
p_client.c:307:			if (deathmatch->value)
p_client.c:390:				if (deathmatch->value)
p_client.c:403:	if (deathmatch->value)
p_client.c:417:	if (!deathmatch->value)
p_client.c:530:		if (deathmatch->value)
p_client.c:604:but is called after each death and level change in deathmatch
p_client.c:872:Chooses a player start, deathmatch start, coop start, etc
p_client.c:879:	if (deathmatch->value)
p_client.c:982:	if (deathmatch->value || coop->value)
p_client.c:1094:a deathmatch.
p_client.c:1116:	// deathmatch wipes most client data every spawn
p_client.c:1117:	if (deathmatch->value)
p_client.c:1194:	if (deathmatch->value && ((int)dmflags->value & DF_FIXED_FOV))
p_client.c:1265:deathmatch mode, so clear everything out before starting them.
p_client.c:1311:	if (deathmatch->value)
p_client.c:1388:	// spectators are only supported in deathmatch
p_client.c:1389:	if (deathmatch->value && *s && strcmp(s, "0"))
p_client.c:1403:	if (deathmatch->value && ((int)dmflags->value & DF_FIXED_FOV))
p_client.c:1453:	if (deathmatch->value && *value && strcmp(value, "0")) {
p_client.c:1777:	if (deathmatch->value &&
p_client.c:1795:			// in deathmatch, only wait for attack button
p_client.c:1796:			if (deathmatch->value)
p_client.c:1802:				(deathmatch->value && ((int)dmflags->value & DF_FORCE_RESPAWN) ) )
p_client.c:1812:	if (!deathmatch->value)
p_hud.c:34:	if (deathmatch->value || coop->value)
p_hud.c:65:	if (deathmatch->value || coop->value)
p_hud.c:116:		if (!deathmatch->value)
p_hud.c:281:	if (!deathmatch->value && !coop->value)
p_hud.c:349:	if (deathmatch->value)
p_hud.c:492:	if (deathmatch->value)
p_trail.c:53:	if (deathmatch->value /* FIXME || coop */)
p_view.c:562:		if (!deathmatch->value || !((int)dmflags->value & DF_NO_FALLING) )
p_weapon.c:71:	if (deathmatch->value)
p_weapon.c:145:			if (deathmatch->value)
p_weapon.c:159:		( !deathmatch->value || other->client->pers.weapon == FindItem("blaster") ) )
p_weapon.c:851:	if (deathmatch->value)
p_weapon.c:903:			if (deathmatch->value)
p_weapon.c:1002:	if (!deathmatch->value)
p_weapon.c:1058:	if (deathmatch->value)
p_weapon.c:1212:	if (deathmatch->value)
p_weapon.c:1310:	if (deathmatch->value)
p_weapon.c:1374:	if (deathmatch->value)
dedicated usage ===
g_cmds.c:854:	if (dedicated->value)
g_main.c:48:cvar_t	*dedicated;
g_save.c:167:	dedicated = gi.cvar ("dedicated", "0", CVAR_NOSET);
dm_statusbar usage ===
g_spawn.c:708:char *dm_statusbar =
g_spawn.c:842:		gi.configstring (CS_STATUSBAR, dm_statusbar);
dmflags usage ===
g_cmds.c:39:	if ((int)(dmflags->value) & DF_MODELTEAMS)
g_cmds.c:45:	// if ((int)(dmflags->value) & DF_SKINTEAMS)
g_cmds.c:54:	if (!((int)(dmflags->value) & (DF_MODELTEAMS | DF_SKINTEAMS)))
g_cmds.c:799:	if (!((int)(dmflags->value) & (DF_MODELTEAMS | DF_SKINTEAMS)))
g_combat.c:393:	if ((targ != attacker) && ((deathmatch->value && ((int)(dmflags->value) & (DF_MODELTEAMS | DF_SKINTEAMS))) || coop->value))
g_combat.c:397:			if ((int)(dmflags->value) & DF_NO_FRIENDLY_FIRE)
g_items.c:176:		if (((int)dmflags->value & DF_INSTANT_ITEMS) || ((ent->item->use == Use_Quad) && (ent->spawnflags & DROPPED_PLAYER_ITEM)))
g_items.c:490:	if ( (weapon) && ( (int)dmflags->value & DF_INFINITE_AMMO ) )
g_items.c:1077:		if ( (int)dmflags->value & DF_NO_ARMOR )
g_items.c:1085:		if ( (int)dmflags->value & DF_NO_ITEMS )
g_items.c:1093:		if ( (int)dmflags->value & DF_NO_HEALTH )
g_items.c:1101:		if ( (int)dmflags->value & DF_INFINITE_AMMO )
g_items.c:2123:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_items.c:2139:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_items.c:2156:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_items.c:2172:	if ( deathmatch->value && ((int)dmflags->value & DF_NO_HEALTH) )
g_main.c:37:cvar_t	*dmflags;
g_main.c:229:	if ((int)dmflags->value & DF_SAME_LEVEL)
g_save.c:182:	dmflags = gi.cvar ("dmflags", "0", CVAR_SERVERINFO);
g_target.c:282:	if (deathmatch->value && !( (int)dmflags->value & DF_ALLOW_EXIT) && other != world)
p_client.c:426:	if (!((int)(dmflags->value) & DF_QUAD_DROP))
p_client.c:824:	if ( (int)(dmflags->value) & DF_SPAWN_FARTHEST)
p_client.c:1194:	if (deathmatch->value && ((int)dmflags->value & DF_FIXED_FOV))
p_client.c:1403:	if (deathmatch->value && ((int)dmflags->value & DF_FIXED_FOV))
p_client.c:1802:				(deathmatch->value && ((int)dmflags->value & DF_FORCE_RESPAWN) ) )
p_view.c:562:		if (!deathmatch->value || !((int)dmflags->value & DF_NO_FALLING) )
p_weapon.c:125:	if ( ( ((int)(dmflags->value) & DF_WEAPONS_STAY) || coop->value) 
p_weapon.c:138:		if ( (int)dmflags->value & DF_INFINITE_AMMO )
p_weapon.c:147:				if ((int)(dmflags->value) & DF_WEAPONS_STAY)
p_weapon.c:353:	if ((int)(dmflags->value) & DF_WEAPONS_STAY)
p_weapon.c:568:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:739:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:795:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:908:			if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:1023:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:1162:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:1226:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:1280:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:1345:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
p_weapon.c:1421:	if (! ( (int)dmflags->value & DF_INFINITE_AMMO ) )
enemy_infront usage ===
g_ai.c:30:qboolean	enemy_infront;
g_ai.c:881:	enemy_infront = infront(self, self->enemy);
m_boss2.c:546:	qboolean	enemy_infront;
m_boss2.c:565:	enemy_infront = infront(self, self->enemy);
m_boss31.c:605:	qboolean	enemy_infront;
m_boss31.c:624:	enemy_infront = infront(self, self->enemy);
m_boss32.c:719:	qboolean	enemy_infront;
m_boss32.c:738:	enemy_infront = infront(self, self->enemy);
enemy_range usage ===
g_ai.c:31:int			enemy_range;
g_ai.c:629:	if (enemy_range == RANGE_MELEE)
g_ai.c:648:	if (enemy_range == RANGE_FAR)
g_ai.c:655:	else if (enemy_range == RANGE_MELEE)
g_ai.c:659:	else if (enemy_range == RANGE_NEAR)
g_ai.c:663:	else if (enemy_range == RANGE_MID)
g_ai.c:882:	enemy_range = range(self, self->enemy);
m_boss2.c:547:	int			enemy_range;
m_boss2.c:566:	enemy_range = range(self, self->enemy);
m_boss2.c:574:	if (enemy_range == RANGE_MELEE)
m_boss2.c:590:	if (enemy_range == RANGE_FAR)
m_boss2.c:597:	else if (enemy_range == RANGE_MELEE)
m_boss2.c:601:	else if (enemy_range == RANGE_NEAR)
m_boss2.c:605:	else if (enemy_range == RANGE_MID)
m_boss31.c:606:	int			enemy_range;
m_boss31.c:625:	enemy_range = range(self, self->enemy);
m_boss31.c:633:	if (enemy_range == RANGE_MELEE)
m_boss31.c:649:	if (enemy_range == RANGE_FAR)
m_boss31.c:656:	else if (enemy_range == RANGE_MELEE)
m_boss31.c:660:	else if (enemy_range == RANGE_NEAR)
m_boss31.c:664:	else if (enemy_range == RANGE_MID)
m_boss32.c:720:	int			enemy_range;
m_boss32.c:739:	enemy_range = range(self, self->enemy);
m_boss32.c:747:	if (enemy_range == RANGE_MELEE)
m_boss32.c:763:	if (enemy_range == RANGE_FAR)
m_boss32.c:770:	else if (enemy_range == RANGE_MELEE)
m_boss32.c:774:	else if (enemy_range == RANGE_NEAR)
m_boss32.c:778:	else if (enemy_range == RANGE_MID)
enemy_vis usage ===
g_ai.c:29:qboolean	enemy_vis;
g_ai.c:804:	enemy_vis = false;
g_ai.c:867:	enemy_vis = visible(self, self->enemy);
g_ai.c:868:	if (enemy_vis)
g_ai.c:901:	if (!enemy_vis)
g_ai.c:960:	if (enemy_vis)
enemy_yaw usage ===
g_ai.c:32:float		enemy_yaw;
g_ai.c:705:	self->ideal_yaw = enemy_yaw;
g_ai.c:725:	self->ideal_yaw = enemy_yaw;
g_ai.c:747:	self->ideal_yaw = enemy_yaw;
g_ai.c:884:	enemy_yaw = vectoyaw(temp);
g_ai.c:887:	// JDC self->ideal_yaw = enemy_yaw;
m_boss2.c:548:	float		enemy_yaw;
m_boss2.c:568:	enemy_yaw = vectoyaw(temp);
m_boss2.c:570:	self->ideal_yaw = enemy_yaw;
m_boss31.c:607:	float		enemy_yaw;
m_boss31.c:627:	enemy_yaw = vectoyaw(temp);
m_boss31.c:629:	self->ideal_yaw = enemy_yaw;
m_boss32.c:721:	float		enemy_yaw;
m_boss32.c:741:	enemy_yaw = vectoyaw(temp);
m_boss32.c:743:	self->ideal_yaw = enemy_yaw;
fields usage ===
g_phys.c:27:pushmove objects do not obey gravity, and do not interact with each other or trigger fields, but block normal movement and push normal objects when they move.
g_save.c:27:field_t fields[] = {
g_save.c:543:	for (field=fields ; field->name ; field++)
g_save.c:552:	for (field=fields ; field->name ; field++)
g_save.c:604:	for (field=fields ; field->name ; field++)
g_spawn.c:365:	for (f=fields ; f->name ; f++)
g_spawn.c:548:	// set client fields on player ents
filterban usage ===
g_main.c:50:cvar_t	*filterban;
g_save.c:188:	filterban = gi.cvar ("filterban", "1", 0);
g_svcmds.c:50:filterban <0 or 1>
g_svcmds.c:147:			return (int)filterban->value;
g_svcmds.c:149:	return (int)!filterban->value;
g_svcmds.c:262:	fprintf(f, "set filterban %d\n", (int)filterban->value);
flipper_frames_attack usage ===
m_flipper.c:193:mframe_t flipper_frames_attack [] =
m_flipper.c:216:mmove_t flipper_move_attack = {FRAME_flpbit01, FRAME_flpbit20, flipper_frames_attack, flipper_run};
flipper_frames_death usage ===
m_flipper.c:261:mframe_t flipper_frames_death [] =
m_flipper.c:325:mmove_t flipper_move_death = {FRAME_flpdth01, FRAME_flpdth56, flipper_frames_death, flipper_dead};
flipper_frames_pain1 usage ===
m_flipper.c:170:mframe_t flipper_frames_pain1 [] =
m_flipper.c:178:mmove_t flipper_move_pain1 = {FRAME_flppn201, FRAME_flppn205, flipper_frames_pain1, flipper_run};
flipper_frames_pain2 usage ===
m_flipper.c:160:mframe_t flipper_frames_pain2 [] =
m_flipper.c:168:mmove_t flipper_move_pain2 = {FRAME_flppn101, FRAME_flppn105, flipper_frames_pain2, flipper_run};
flipper_frames_run usage ===
m_flipper.c:58:mframe_t flipper_frames_run [] =
m_flipper.c:87:mmove_t flipper_move_run_loop = {FRAME_flpver06, FRAME_flpver29, flipper_frames_run, NULL};
flipper_frames_run_start usage ===
m_flipper.c:94:mframe_t flipper_frames_run_start [] =
m_flipper.c:103:mmove_t flipper_move_run_start = {FRAME_flpver01, FRAME_flpver06, flipper_frames_run_start, flipper_run_loop};
flipper_frames_stand usage ===
m_flipper.c:44:mframe_t flipper_frames_stand [] =
m_flipper.c:49:mmove_t	flipper_move_stand = {FRAME_flphor01, FRAME_flphor01, flipper_frames_stand, NULL};
flipper_frames_start_run usage ===
m_flipper.c:145:mframe_t flipper_frames_start_run [] =
m_flipper.c:153:mmove_t flipper_move_start_run = {FRAME_flphor01, FRAME_flphor05, flipper_frames_start_run, NULL};
flipper_frames_walk usage ===
m_flipper.c:111:mframe_t flipper_frames_walk [] =
m_flipper.c:138:mmove_t flipper_move_walk = {FRAME_flphor01, FRAME_flphor24, flipper_frames_walk, NULL};
flipper_move_attack usage ===
m_flipper.c:216:mmove_t flipper_move_attack = {FRAME_flpbit01, FRAME_flpbit20, flipper_frames_attack, flipper_run};
m_flipper.c:220:	self->monsterinfo.currentmove = &flipper_move_attack;
flipper_move_death usage ===
m_flipper.c:325:mmove_t flipper_move_death = {FRAME_flpdth01, FRAME_flpdth56, flipper_frames_death, flipper_dead};
m_flipper.c:356:	self->monsterinfo.currentmove = &flipper_move_death;
flipper_move_pain1 usage ===
m_flipper.c:178:mmove_t flipper_move_pain1 = {FRAME_flppn201, FRAME_flppn205, flipper_frames_pain1, flipper_run};
m_flipper.c:242:		self->monsterinfo.currentmove = &flipper_move_pain1;
flipper_move_pain2 usage ===
m_flipper.c:168:mmove_t flipper_move_pain2 = {FRAME_flppn101, FRAME_flppn105, flipper_frames_pain2, flipper_run};
m_flipper.c:247:		self->monsterinfo.currentmove = &flipper_move_pain2;
flipper_move_run_loop usage ===
m_flipper.c:87:mmove_t flipper_move_run_loop = {FRAME_flpver06, FRAME_flpver29, flipper_frames_run, NULL};
m_flipper.c:91:	self->monsterinfo.currentmove = &flipper_move_run_loop;
flipper_move_run_start usage ===
m_flipper.c:103:mmove_t flipper_move_run_start = {FRAME_flpver01, FRAME_flpver06, flipper_frames_run_start, flipper_run_loop};
m_flipper.c:107:	self->monsterinfo.currentmove = &flipper_move_run_start;
flipper_move_stand usage ===
m_flipper.c:49:mmove_t	flipper_move_stand = {FRAME_flphor01, FRAME_flphor01, flipper_frames_stand, NULL};
m_flipper.c:53:		self->monsterinfo.currentmove = &flipper_move_stand;
m_flipper.c:399:	self->monsterinfo.currentmove = &flipper_move_stand;	
flipper_move_start_run usage ===
m_flipper.c:153:mmove_t flipper_move_start_run = {FRAME_flphor01, FRAME_flphor05, flipper_frames_start_run, NULL};
m_flipper.c:157:	self->monsterinfo.currentmove = &flipper_move_start_run;
flipper_move_walk usage ===
m_flipper.c:138:mmove_t flipper_move_walk = {FRAME_flphor01, FRAME_flphor24, flipper_frames_walk, NULL};
m_flipper.c:142:	self->monsterinfo.currentmove = &flipper_move_walk;
floater_frames_activate usage ===
m_float.c:205:mframe_t floater_frames_activate [] =
m_float.c:238:mmove_t floater_move_activate = {FRAME_actvat01, FRAME_actvat31, floater_frames_activate, NULL};
floater_frames_attack1 usage ===
m_float.c:240:mframe_t floater_frames_attack1 [] =
m_float.c:257:mmove_t floater_move_attack1 = {FRAME_attak101, FRAME_attak114, floater_frames_attack1, floater_run};
floater_frames_attack2 usage ===
m_float.c:259:mframe_t floater_frames_attack2 [] =
m_float.c:287:mmove_t floater_move_attack2 = {FRAME_attak201, FRAME_attak225, floater_frames_attack2, floater_run};
floater_frames_attack3 usage ===
m_float.c:289:mframe_t floater_frames_attack3 [] =
m_float.c:326:mmove_t floater_move_attack3 = {FRAME_attak301, FRAME_attak334, floater_frames_attack3, floater_run};
floater_frames_death usage ===
m_float.c:328:mframe_t floater_frames_death [] =
m_float.c:344:mmove_t floater_move_death = {FRAME_death01, FRAME_death13, floater_frames_death, floater_dead};
floater_frames_pain1 usage ===
m_float.c:346:mframe_t floater_frames_pain1 [] =
m_float.c:356:mmove_t floater_move_pain1 = {FRAME_pain101, FRAME_pain107, floater_frames_pain1, floater_run};
floater_frames_pain2 usage ===
m_float.c:358:mframe_t floater_frames_pain2 [] =
m_float.c:369:mmove_t floater_move_pain2 = {FRAME_pain201, FRAME_pain208, floater_frames_pain2, floater_run};
floater_frames_pain3 usage ===
m_float.c:371:mframe_t floater_frames_pain3 [] =
m_float.c:386:mmove_t floater_move_pain3 = {FRAME_pain301, FRAME_pain312, floater_frames_pain3, floater_run};
floater_frames_run usage ===
m_float.c:445:mframe_t floater_frames_run [] =
m_float.c:500:mmove_t	floater_move_run = {FRAME_stand101, FRAME_stand152, floater_frames_run, NULL};
floater_frames_stand1 usage ===
m_float.c:83:mframe_t floater_frames_stand1 [] =
m_float.c:138:mmove_t	floater_move_stand1 = {FRAME_stand101, FRAME_stand152, floater_frames_stand1, NULL};
floater_frames_stand2 usage ===
m_float.c:140:mframe_t floater_frames_stand2 [] =
m_float.c:195:mmove_t	floater_move_stand2 = {FRAME_stand201, FRAME_stand252, floater_frames_stand2, NULL};
floater_frames_walk usage ===
m_float.c:388:mframe_t floater_frames_walk [] =
m_float.c:443:mmove_t	floater_move_walk = {FRAME_stand101, FRAME_stand152, floater_frames_walk, NULL};
floater_move_activate usage ===
m_float.c:238:mmove_t floater_move_activate = {FRAME_actvat01, FRAME_actvat31, floater_frames_activate, NULL};
floater_move_attack1 usage ===
m_float.c:257:mmove_t floater_move_attack1 = {FRAME_attak101, FRAME_attak114, floater_frames_attack1, floater_run};
m_float.c:553:	self->monsterinfo.currentmove = &floater_move_attack1;
floater_move_attack2 usage ===
m_float.c:287:mmove_t floater_move_attack2 = {FRAME_attak201, FRAME_attak225, floater_frames_attack2, floater_run};
m_float.c:562:		self->monsterinfo.currentmove = &floater_move_attack2;
floater_move_attack3 usage ===
m_float.c:326:mmove_t floater_move_attack3 = {FRAME_attak301, FRAME_attak334, floater_frames_attack3, floater_run};
m_float.c:560:		self->monsterinfo.currentmove = &floater_move_attack3;
floater_move_death usage ===
m_float.c:344:mmove_t floater_move_death = {FRAME_death01, FRAME_death13, floater_frames_death, floater_dead};
floater_move_pain1 usage ===
m_float.c:356:mmove_t floater_move_pain1 = {FRAME_pain101, FRAME_pain107, floater_frames_pain1, floater_run};
m_float.c:584:		self->monsterinfo.currentmove = &floater_move_pain1;
floater_move_pain2 usage ===
m_float.c:369:mmove_t floater_move_pain2 = {FRAME_pain201, FRAME_pain208, floater_frames_pain2, floater_run};
m_float.c:589:		self->monsterinfo.currentmove = &floater_move_pain2;
floater_move_pain3 usage ===
m_float.c:386:mmove_t floater_move_pain3 = {FRAME_pain301, FRAME_pain312, floater_frames_pain3, floater_run};
floater_move_run usage ===
m_float.c:500:mmove_t	floater_move_run = {FRAME_stand101, FRAME_stand152, floater_frames_run, NULL};
m_float.c:507:		self->monsterinfo.currentmove = &floater_move_run;
floater_move_stand1 usage ===
m_float.c:138:mmove_t	floater_move_stand1 = {FRAME_stand101, FRAME_stand152, floater_frames_stand1, NULL};
m_float.c:200:		self->monsterinfo.currentmove = &floater_move_stand1;
m_float.c:505:		self->monsterinfo.currentmove = &floater_move_stand1;
m_float.c:656:		self->monsterinfo.currentmove = &floater_move_stand1;	
floater_move_stand2 usage ===
m_float.c:195:mmove_t	floater_move_stand2 = {FRAME_stand201, FRAME_stand252, floater_frames_stand2, NULL};
m_float.c:202:		self->monsterinfo.currentmove = &floater_move_stand2;
m_float.c:658:		self->monsterinfo.currentmove = &floater_move_stand2;	
floater_move_walk usage ===
m_float.c:443:mmove_t	floater_move_walk = {FRAME_stand101, FRAME_stand152, floater_frames_walk, NULL};
m_float.c:512:	self->monsterinfo.currentmove = &floater_move_walk;
flood_msgs usage ===
g_cmds.c:831:	if (flood_msgs->value) {
g_cmds.c:839:        i = cl->flood_whenhead - flood_msgs->value + 1;
g_main.c:70:cvar_t	*flood_msgs;
g_save.c:199:	flood_msgs = gi.cvar ("flood_msgs", "4", 0);
flood_persecond usage ===
g_cmds.c:843:			level.time - cl->flood_when[i] < flood_persecond->value) {
g_main.c:71:cvar_t	*flood_persecond;
g_save.c:200:	flood_persecond = gi.cvar ("flood_persecond", "4", 0);
flood_waitdelay usage ===
g_cmds.c:844:			cl->flood_locktill = level.time + flood_waitdelay->value;
g_cmds.c:846:				(int)flood_waitdelay->value);
g_main.c:72:cvar_t	*flood_waitdelay;
g_save.c:201:	flood_waitdelay = gi.cvar ("flood_waitdelay", "10", 0);
flyer_frames_attack2 usage ===
m_flyer.c:400:mframe_t flyer_frames_attack2 [] =
m_flyer.c:420:mmove_t flyer_move_attack2 = {FRAME_attak201, FRAME_attak217, flyer_frames_attack2, flyer_run};
flyer_frames_bankleft usage ===
m_flyer.c:354:mframe_t flyer_frames_bankleft [] =
m_flyer.c:364:mmove_t flyer_move_bankleft = {FRAME_bankl01, FRAME_bankl07, flyer_frames_bankleft, NULL};		
flyer_frames_bankright usage ===
m_flyer.c:342:mframe_t flyer_frames_bankright [] =
m_flyer.c:352:mmove_t flyer_move_bankright = {FRAME_bankr01, FRAME_bankr07, flyer_frames_bankright, NULL};
flyer_frames_defense usage ===
m_flyer.c:331:mframe_t flyer_frames_defense [] = 
m_flyer.c:340:mmove_t flyer_move_defense = {FRAME_defens01, FRAME_defens06, flyer_frames_defense, NULL};
flyer_frames_end_melee usage ===
m_flyer.c:452:mframe_t flyer_frames_end_melee [] =
m_flyer.c:458:mmove_t flyer_move_end_melee = {FRAME_attak119, FRAME_attak121, flyer_frames_end_melee, flyer_run};
flyer_frames_loop_melee usage ===
m_flyer.c:461:mframe_t flyer_frames_loop_melee [] =
m_flyer.c:477:mmove_t flyer_move_loop_melee = {FRAME_attak107, FRAME_attak118, flyer_frames_loop_melee, flyer_check_melee};
flyer_frames_pain1 usage ===
m_flyer.c:317:mframe_t flyer_frames_pain1 [] =
m_flyer.c:329:mmove_t flyer_move_pain1 = {FRAME_pain101, FRAME_pain109, flyer_frames_pain1, flyer_run};
flyer_frames_pain2 usage ===
m_flyer.c:308:mframe_t flyer_frames_pain2 [] =
m_flyer.c:315:mmove_t flyer_move_pain2 = {FRAME_pain201, FRAME_pain204, flyer_frames_pain2, flyer_run};
flyer_frames_pain3 usage ===
m_flyer.c:299:mframe_t flyer_frames_pain3 [] =
m_flyer.c:306:mmove_t flyer_move_pain3 = {FRAME_pain301, FRAME_pain304, flyer_frames_pain3, flyer_run};
flyer_frames_rollleft usage ===
m_flyer.c:285:mframe_t flyer_frames_rollleft [] =
m_flyer.c:297:mmove_t flyer_move_rollleft = {FRAME_rollf01, FRAME_rollf09, flyer_frames_rollleft, NULL};
flyer_frames_rollright usage ===
m_flyer.c:271:mframe_t flyer_frames_rollright [] =
m_flyer.c:283:mmove_t flyer_move_rollright = {FRAME_rollr01, FRAME_rollr09, flyer_frames_rollright, NULL};
flyer_frames_run usage ===
m_flyer.c:169:mframe_t flyer_frames_run [] =
m_flyer.c:217:mmove_t	flyer_move_run = {FRAME_stand01, FRAME_stand45, flyer_frames_run, NULL};
flyer_frames_stand usage ===
m_flyer.c:68:mframe_t flyer_frames_stand [] =
m_flyer.c:116:mmove_t	flyer_move_stand = {FRAME_stand01, FRAME_stand45, flyer_frames_stand, NULL};
flyer_frames_start usage ===
m_flyer.c:237:mframe_t flyer_frames_start [] =
m_flyer.c:246:mmove_t flyer_move_start = {FRAME_start01, FRAME_start06, flyer_frames_start, NULL};
flyer_frames_start_melee usage ===
m_flyer.c:441:mframe_t flyer_frames_start_melee [] =
m_flyer.c:450:mmove_t flyer_move_start_melee = {FRAME_attak101, FRAME_attak106, flyer_frames_start_melee, flyer_loop_melee};
flyer_frames_stop usage ===
m_flyer.c:248:mframe_t flyer_frames_stop [] =
m_flyer.c:258:mmove_t flyer_move_stop = {FRAME_stop01, FRAME_stop07, flyer_frames_stop, NULL};
flyer_frames_walk usage ===
m_flyer.c:119:mframe_t flyer_frames_walk [] =
m_flyer.c:167:mmove_t	flyer_move_walk = {FRAME_stand01, FRAME_stand45, flyer_frames_walk, NULL};
flyer_move_attack2 usage ===
m_flyer.c:420:mmove_t flyer_move_attack2 = {FRAME_attak201, FRAME_attak217, flyer_frames_attack2, flyer_run};
m_flyer.c:494:	self->monsterinfo.currentmove = &flyer_move_attack2;
m_flyer.c:508:		self->monsterinfo.currentmove = &flyer_move_attack2;
flyer_move_bankleft usage ===
m_flyer.c:364:mmove_t flyer_move_bankleft = {FRAME_bankl01, FRAME_bankl07, flyer_frames_bankleft, NULL};		
flyer_move_bankright usage ===
m_flyer.c:352:mmove_t flyer_move_bankright = {FRAME_bankr01, FRAME_bankr07, flyer_frames_bankright, NULL};
flyer_move_defense usage ===
m_flyer.c:340:mmove_t flyer_move_defense = {FRAME_defens01, FRAME_defens06, flyer_frames_defense, NULL};
flyer_move_end_melee usage ===
m_flyer.c:458:mmove_t flyer_move_end_melee = {FRAME_attak119, FRAME_attak121, flyer_frames_end_melee, flyer_run};
m_flyer.c:526:			self->monsterinfo.currentmove = &flyer_move_end_melee;
m_flyer.c:528:		self->monsterinfo.currentmove = &flyer_move_end_melee;
flyer_move_loop_melee usage ===
m_flyer.c:477:mmove_t flyer_move_loop_melee = {FRAME_attak107, FRAME_attak118, flyer_frames_loop_melee, flyer_check_melee};
m_flyer.c:484:	self->monsterinfo.currentmove = &flyer_move_loop_melee;
m_flyer.c:524:			self->monsterinfo.currentmove = &flyer_move_loop_melee;
flyer_move_pain1 usage ===
m_flyer.c:329:mmove_t flyer_move_pain1 = {FRAME_pain101, FRAME_pain109, flyer_frames_pain1, flyer_run};
m_flyer.c:549:		self->monsterinfo.currentmove = &flyer_move_pain1;
flyer_move_pain2 usage ===
m_flyer.c:315:mmove_t flyer_move_pain2 = {FRAME_pain201, FRAME_pain204, flyer_frames_pain2, flyer_run};
m_flyer.c:554:		self->monsterinfo.currentmove = &flyer_move_pain2;
flyer_move_pain3 usage ===
m_flyer.c:306:mmove_t flyer_move_pain3 = {FRAME_pain301, FRAME_pain304, flyer_frames_pain3, flyer_run};
m_flyer.c:559:		self->monsterinfo.currentmove = &flyer_move_pain3;
flyer_move_rollleft usage ===
m_flyer.c:297:mmove_t flyer_move_rollleft = {FRAME_rollf01, FRAME_rollf09, flyer_frames_rollleft, NULL};
flyer_move_rollright usage ===
m_flyer.c:283:mmove_t flyer_move_rollright = {FRAME_rollr01, FRAME_rollr09, flyer_frames_rollright, NULL};
flyer_move_run usage ===
m_flyer.c:217:mmove_t	flyer_move_run = {FRAME_stand01, FRAME_stand45, flyer_frames_run, NULL};
m_flyer.c:224:		self->monsterinfo.currentmove = &flyer_move_run;
m_flyer.c:510:		self->monsterinfo.currentmove = &flyer_move_run;
flyer_move_stand usage ===
m_flyer.c:116:mmove_t	flyer_move_stand = {FRAME_stand01, FRAME_stand45, flyer_frames_stand, NULL};
m_flyer.c:222:		self->monsterinfo.currentmove = &flyer_move_stand;
m_flyer.c:234:		self->monsterinfo.currentmove = &flyer_move_stand;
m_flyer.c:622:	self->monsterinfo.currentmove = &flyer_move_stand;	
flyer_move_start usage ===
m_flyer.c:246:mmove_t flyer_move_start = {FRAME_start01, FRAME_start06, flyer_frames_start, NULL};
m_flyer.c:267:		self->monsterinfo.currentmove = &flyer_move_start;
m_flyer.c:500:	self->monsterinfo.currentmove = &flyer_move_start;
flyer_move_start_melee usage ===
m_flyer.c:450:mmove_t flyer_move_start_melee = {FRAME_attak101, FRAME_attak106, flyer_frames_start_melee, flyer_loop_melee};
m_flyer.c:506:		self->monsterinfo.currentmove = &flyer_move_start_melee;
m_flyer.c:517:	self->monsterinfo.currentmove = &flyer_move_start_melee;
flyer_move_stop usage ===
m_flyer.c:258:mmove_t flyer_move_stop = {FRAME_stop01, FRAME_stop07, flyer_frames_stop, NULL};
m_flyer.c:262:		self->monsterinfo.currentmove = &flyer_move_stop;
m_flyer.c:516://	self->monsterinfo.currentmove = &flyer_move_stop;
flyer_move_walk usage ===
m_flyer.c:167:mmove_t	flyer_move_walk = {FRAME_stand01, FRAME_stand45, flyer_frames_walk, NULL};
m_flyer.c:229:	self->monsterinfo.currentmove = &flyer_move_walk;
fraglimit usage ===
g_main.c:39:cvar_t	*fraglimit;
g_main.c:219:The timelimit or fraglimit has been exceeded
g_main.c:328:	if (fraglimit->value)
g_main.c:336:			if (cl->resp.score >= fraglimit->value)
g_save.c:183:	fraglimit = gi.cvar ("fraglimit", "0", CVAR_SERVERINFO);
g_edicts usage ===
g_ai.c:58:		start = level.sight_client - g_edicts;
g_ai.c:66:		ent = &g_edicts[check];
g_chase.c:119:	i = ent->client->chase_target - g_edicts;
g_chase.c:124:		e = g_edicts + i;
g_chase.c:143:	i = ent->client->chase_target - g_edicts;
g_chase.c:148:		e = g_edicts + i;
g_chase.c:165:		other = g_edicts + i;
g_cmds.c:859:		other = &g_edicts[j];
g_cmds.c:882:	for (i = 0, e2 = g_edicts + 1; i < maxclients->value; i++, e2++) {
g_main.c:33:edict_t		*g_edicts;
g_main.c:189:		ent = g_edicts + 1 + i;
g_main.c:333:			if (!g_edicts[i+1].inuse)
g_main.c:368:		ent = g_edicts + 1 + i;
g_main.c:407:	ent = &g_edicts[0];
g_monster.c:36:	gi.WriteShort (self - g_edicts);
g_monster.c:46:	gi.WriteShort (self - g_edicts);
g_monster.c:56:	gi.WriteShort (self - g_edicts);
g_monster.c:66:	gi.WriteShort (self - g_edicts);
g_monster.c:76:	gi.WriteShort (self - g_edicts);
g_monster.c:86:	gi.WriteShort (self - g_edicts);
g_monster.c:96:	gi.WriteShort (self - g_edicts);
g_phys.c:61:		return g_edicts;
g_phys.c:449:	check = g_edicts+1;
g_phys.c:753:		gi.positioned_sound (old_origin, g_edicts, CHAN_AUTO, gi.soundindex("misc/h2ohit1.wav"), 1, 1, 0);
g_phys.c:755:		gi.positioned_sound (ent->s.origin, g_edicts, CHAN_AUTO, gi.soundindex("misc/h2ohit1.wav"), 1, 1, 0);
g_save.c:215:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:216:	globals.edicts = g_edicts;
g_save.c:258:			index = *(edict_t **)p - g_edicts;
g_save.c:361:			*(edict_t **)p = &g_edicts[index];
g_save.c:513:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:514:	globals.edicts = g_edicts;
g_save.c:660:		ent = &g_edicts[i];
g_save.c:706:	memset (g_edicts, 0, game.maxentities*sizeof(g_edicts[0]));
g_save.c:745:		ent = &g_edicts[entnum];
g_save.c:758:		ent = &g_edicts[i+1];
g_save.c:766:		ent = &g_edicts[i];
g_spawn.c:480:	for (i=1, e=g_edicts+i ; i < globals.num_edicts ; i++,e++)
g_spawn.c:543:	memset (g_edicts, 0, game.maxentities * sizeof (g_edicts[0]));
g_spawn.c:550:		g_edicts[i+1].client = game.clients + i;
g_spawn.c:566:			ent = g_edicts;
g_spawn.c:576:		if (ent != g_edicts)
g_target.c:277:		if (g_edicts[1].health <= 0)
g_target.c:766:	for (i=1, e=g_edicts+i; i < globals.num_edicts; i++,e++)
g_trigger.c:247:				ent = &g_edicts[player];
g_trigger.c:263:				ent = &g_edicts[player];
g_utils.c:50:		from = g_edicts;
g_utils.c:54:	for ( ; from < &g_edicts[globals.num_edicts] ; from++)
g_utils.c:84:		from = g_edicts;
g_utils.c:87:	for ( ; from < &g_edicts[globals.num_edicts]; from++)
g_utils.c:406:	e->s.number = e - g_edicts;
g_utils.c:425:	e = &g_edicts[(int)maxclients->value+1];
g_utils.c:456:	if ((ed - g_edicts) <= (maxclients->value + BODY_QUEUE_SIZE))
m_actor.c:254:		name = actor_names[(self - g_edicts)%MAX_ACTOR_NAMES];
m_actor.c:515:			ent = &g_edicts[n];
m_actor.c:518:			gi.cprintf (ent, PRINT_CHAT, "%s: %s\n", actor_names[(other - g_edicts)%MAX_ACTOR_NAMES], self->message);
m_medic.c:650:	gi.WriteShort (self - g_edicts);
m_parasite.c:357:	gi.WriteShort (self - g_edicts);
p_client.c:657:		ent = &g_edicts[1+i];
p_client.c:707:		player = &g_edicts[n];
p_client.c:951:	body = &g_edicts[(int)maxclients->value + level.body_que + 1];
p_client.c:960:	body->s.number = body - g_edicts;
p_client.c:1032:			if (g_edicts[i].inuse && g_edicts[i].client->pers.spectator)
p_client.c:1069:		gi.WriteShort (ent-g_edicts);
p_client.c:1113:	index = ent-g_edicts-1;
p_client.c:1215:	ent->s.skinnum = ent - g_edicts - 1;
p_client.c:1285:		gi.WriteShort (ent-g_edicts);
p_client.c:1309:	ent->client = game.clients + (ent - g_edicts - 1);
p_client.c:1349:			gi.WriteShort (ent-g_edicts);
p_client.c:1397:	playernum = ent-g_edicts-1;
p_client.c:1465:			if (g_edicts[i+1].inuse && g_edicts[i+1].client->pers.spectator)
p_client.c:1484:	ent->client = game.clients + (ent - g_edicts - 1);
p_client.c:1525:	gi.WriteShort (ent-g_edicts);
p_client.c:1536:	playernum = ent-g_edicts-1;
p_client.c:1752:		other = g_edicts + i;
p_hud.c:86:		client = g_edicts + 1 + i;
p_hud.c:102:				client = g_edicts + 1 + i;
p_hud.c:150:		client = g_edicts + 1 + i;
p_hud.c:183:		cl_ent = g_edicts + 1 + i;
p_hud.c:214:		cl_ent = g_edicts + 1 + sorted[i];
p_hud.c:538:		cl = g_edicts[i].client;
p_hud.c:539:		if (!g_edicts[i].inuse || cl->chase_target != ent)
p_hud.c:542:		G_SetSpectatorStats(g_edicts + i);
p_hud.c:569:			(cl->chase_target - g_edicts) - 1;
p_weapon.c:197:		ent->s.skinnum = (ent - g_edicts - 1) | i;
p_weapon.c:731:	gi.WriteShort (ent-g_edicts);
p_weapon.c:787:	gi.WriteShort (ent-g_edicts);
p_weapon.c:836:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1017:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1156:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1219:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1273:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1338:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1383:		gi.WriteShort (ent-g_edicts);
g_select_empty usage ===
g_main.c:47:cvar_t	*g_select_empty;
g_save.c:190:	g_select_empty = gi.cvar ("g_select_empty", "0", CVAR_ARCHIVE);
p_weapon.c:320:	if (item->ammo && !g_select_empty->value && !(item->flags & IT_AMMO))
game usage ===
g_ai.c:64:		if (check > game.maxclients)
g_cmds.c:186:		for (i=0 ; i<game.num_items ; i++)
g_cmds.c:201:		for (i=0 ; i<game.num_items ; i++)
g_cmds.c:248:		for (i=0 ; i<game.num_items ; i++)
g_cmds.c:679:	anum = game.clients[anum].ps.stats[STAT_FRAGS];
g_cmds.c:680:	bnum = game.clients[bnum].ps.stats[STAT_FRAGS];
g_cmds.c:704:		if (game.clients[i].pers.connected)
g_cmds.c:719:			game.clients[index[i]].ps.stats[STAT_FRAGS],
g_cmds.c:720:			game.clients[index[i]].pers.netname);
g_cmds.c:857:	for (j = 1; j <= game.maxclients; j++)
g_cmds.c:914:		return;		// not fully in game yet
g_items.c:64:	if (index == 0 || index >= game.num_items)
g_items.c:83:	for (i=0 ; i<game.num_items ; i++, it++)
g_items.c:106:	for (i=0 ; i<game.num_items ; i++, it++)
g_items.c:1117:	// don't let them drop items that stay in a coop game
g_items.c:2188:	game.num_items = sizeof(itemlist)/sizeof(itemlist[0]) - 1;
g_items.c:2205:	for (i=0 ; i<game.num_items ; i++)
g_main.c:23:game_locals_t	game;
g_main.c:332:			cl = game.clients + i;
g_misc.c:1631:// could cause an overwrite after a game load
g_save.c:148:only happens when a new game is started or a save game
g_save.c:209:	Com_sprintf (game.helpmessage1, sizeof(game.helpmessage1), "");
g_save.c:211:	Com_sprintf (game.helpmessage2, sizeof(game.helpmessage2), "");
g_save.c:213:	// initialize all entities for this game
g_save.c:214:	game.maxentities = maxentities->value;
g_save.c:215:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:217:	globals.max_edicts = game.maxentities;
g_save.c:219:	// initialize all clients for this game
g_save.c:220:	game.maxclients = maxclients->value;
g_save.c:221:	game.clients = gi.TagMalloc (game.maxclients * sizeof(game.clients[0]), TAG_GAME);
g_save.c:222:	globals.num_edicts = game.maxclients+1;
g_save.c:265:			index = *(gclient_t **)p - game.clients;
g_save.c:368:			*(gclient_t **)p = &game.clients[index];
g_save.c:457:This will be called whenever the game goes to a new level,
g_save.c:458:and when the user explicitly saves the game.
g_save.c:484:	game.autosaved = autosave;
g_save.c:485:	fwrite (&game, sizeof(game), 1, f);
g_save.c:486:	game.autosaved = false;
g_save.c:488:	for (i=0 ; i<game.maxclients ; i++)
g_save.c:489:		WriteClient (f, &game.clients[i]);
g_save.c:513:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:516:	fread (&game, sizeof(game), 1, f);
g_save.c:517:	game.clients = gi.TagMalloc (game.maxclients * sizeof(game.clients[0]), TAG_GAME);
g_save.c:518:	for (i=0 ; i<game.maxclients ; i++)
g_save.c:519:		ReadClient (f, &game.clients[i]);
g_save.c:706:	memset (g_edicts, 0, game.maxentities*sizeof(g_edicts[0]));
g_save.c:759:		ent->client = game.clients + i;
g_spawn.c:291:	for (i=0,item=itemlist ; i<game.num_items ; i++,item++)
g_spawn.c:543:	memset (g_edicts, 0, game.maxentities * sizeof (g_edicts[0]));
g_spawn.c:546:	strncpy (game.spawnpoint, spawnpoint, sizeof(game.spawnpoint)-1);
g_spawn.c:549:	for (i=0 ; i<game.maxclients ; i++)
g_spawn.c:550:		g_edicts[i+1].client = game.clients + i;
g_svcmds.c:52:If 1 (the default), then ip addresses matching the current list will be prohibited from entering the game.  This is the default setting.
g_svcmds.c:54:If 0, then only addresses matching the list will be allowed.  This lets you easily set up a private game, or a game that only allows players from your local network.
g_svcmds.c:244:	cvar_t	*game;
g_svcmds.c:246:	game = gi.cvar("game", "", 0);
g_svcmds.c:248:	if (!*game->string)
g_svcmds.c:251:		sprintf (name, "%s/listip.cfg", game->string);
g_svcmds.c:278:The game can issue gi.argc() / gi.argv() commands to get the rest
g_target.c:121:		strncpy (game.helpmessage1, ent->message, sizeof(game.helpmessage2)-1);
g_target.c:123:		strncpy (game.helpmessage2, ent->message, sizeof(game.helpmessage1)-1);
g_target.c:125:	game.helpchanged++;
g_target.c:297:		game.serverflags &= ~(SFL_CROSS_TRIGGER_MASK);
g_target.c:453:	game.serverflags |= self->spawnflags;
g_target.c:471:	if (self->spawnflags == (game.serverflags & SFL_CROSS_TRIGGER_MASK & self->spawnflags))
g_trigger.c:245:			for (player = 1; player <= game.maxclients; player++)
g_trigger.c:261:			for (player = 1; player <= game.maxclients; player++)
g_utils.c:20:// g_utils.c -- misc utility functions for game module
g_utils.c:437:	if (i == game.maxentities)
m_actor.c:513:		for (n = 1; n <= game.maxclients; n++)
m_flash.c:24:// this file is included in both the game dll and quake2,
m_flash.c:25:// the game needs it to source shot locations, the client
p_client.c:535:		for (n = 0; n < game.num_items; n++)
p_client.c:603:This is only called when the game first initializes in single player,
p_client.c:655:	for (i=0 ; i<game.maxclients ; i++)
p_client.c:660:		game.clients[i].pers.health = ent->health;
p_client.c:661:		game.clients[i].pers.max_health = ent->max_health;
p_client.c:662:		game.clients[i].pers.savedFlags = (ent->flags & (FL_GODMODE|FL_NOTARGET|FL_POWER_ARMOR));
p_client.c:664:			game.clients[i].pers.score = ent->client->resp.score;
p_client.c:837:	index = ent->client - game.clients;
p_client.c:855:		if ( Q_stricmp(game.spawnpoint, target) == 0 )
p_client.c:889:			if (!game.spawnpoint[0] && !spot->targetname)
p_client.c:892:			if (!game.spawnpoint[0] || !spot->targetname)
p_client.c:895:			if (Q_stricmp(game.spawnpoint, spot->targetname) == 0)
p_client.c:901:			if (!game.spawnpoint[0])
p_client.c:906:				gi.error ("Couldn't find spawn point %s\n", game.spawnpoint);
p_client.c:1045:		// he was a spectator and wants to join the game
p_client.c:1083:		gi.bprintf (PRINT_HIGH, "%s joined the game\n", ent->client->pers.netname);
p_client.c:1134://		for (n = 0; n < game.num_items; n++)
p_client.c:1164:	ent->client = &game.clients[index];
p_client.c:1290:	gi.bprintf (PRINT_HIGH, "%s entered the game\n", ent->client->pers.netname);
p_client.c:1302:to be placed into the game.  This will happen every level load.
p_client.c:1309:	ent->client = game.clients + (ent - g_edicts - 1);
p_client.c:1323:		// state when the game is saved, so we need to compensate
p_client.c:1345:		// send effect if in a multiplayer game
p_client.c:1346:		if (game.maxclients > 1)
p_client.c:1353:			gi.bprintf (PRINT_HIGH, "%s entered the game\n", ent->client->pers.netname);
p_client.c:1367:The game can override any of the settings in place
p_client.c:1433:The game can refuse entrance to a client by returning false.
p_client.c:1484:	ent->client = game.clients + (ent - g_edicts - 1);
p_client.c:1492:		if (!game.autosaved || !ent->client->pers.weapon)
p_client.c:1498:	if (game.maxclients > 1)
p_hud.c:81:	game.autosaved = false;
p_hud.c:181:	for (i=0 ; i<game.maxclients ; i++)
p_hud.c:184:		if (!cl_ent->inuse || game.clients[i].resp.spectator)
p_hud.c:186:		score = game.clients[i].resp.score;
p_hud.c:213:		cl = &game.clients[sorted[i]];
p_hud.c:327:		game.helpmessage1,
p_hud.c:328:		game.helpmessage2,
p_hud.c:358:	if (ent->client->showhelp && (ent->client->pers.game_helpchanged == game.helpchanged))
p_view.c:819:	if (ent->client->pers.game_helpchanged != game.helpchanged)
p_view.c:821:		ent->client->pers.game_helpchanged = game.helpchanged;
gi usage ===
g_ai.c:297:	trace = gi.trace (spot1, vec3_origin, vec3_origin, spot2, self, MASK_OPAQUE);
g_ai.c:373:		gi.dprintf("%s at %s, combattarget %s not found\n", self->classname, vtos(self->s.origin), self->combattarget);
g_ai.c:550:			if (!gi.inPHS(self->s.origin, client->s.origin))
g_ai.c:563:			if (!gi.AreasConnected(self->areanum, client->areanum))
g_ai.c:621:		tr = gi.trace (spot1, NULL, NULL, spot2, self, CONTENTS_SOLID|CONTENTS_MONSTER|CONTENTS_SLIME|CONTENTS_LAVA|CONTENTS_WINDOW);
g_ai.c:1051://		gi.dprintf("checking for course correction\n");
g_ai.c:1053:		tr = gi.trace(self->s.origin, self->mins, self->maxs, self->monsterinfo.last_sighting, self, MASK_PLAYERSOLID);
g_ai.c:1065:			tr = gi.trace(self->s.origin, self->mins, self->maxs, left_target, self, MASK_PLAYERSOLID);
g_ai.c:1070:			tr = gi.trace(self->s.origin, self->mins, self->maxs, right_target, self, MASK_PLAYERSOLID);
g_ai.c:1080://					gi.dprintf("incomplete path, go part way and adjust again\n");
g_ai.c:1088://				gi.dprintf("adjusted left\n");
g_ai.c:1097://					gi.dprintf("incomplete path, go part way and adjust again\n");
g_ai.c:1105://				gi.dprintf("adjusted right\n");
g_ai.c:1109://		else gi.dprintf("course was fine\n");
g_chase.c:65:	trace = gi.trace(ownerv, vec3_origin, vec3_origin, o, targ, MASK_SOLID);
g_chase.c:74:	trace = gi.trace(goal, vec3_origin, vec3_origin, o, targ, MASK_SOLID);
g_chase.c:82:	trace = gi.trace(goal, vec3_origin, vec3_origin, o, targ, MASK_SOLID);
g_chase.c:108:	gi.linkentity(ent);
g_chase.c:173:	gi.centerprintf(ent, "No other players to chase.");
g_cmds.c:163:		gi.cprintf (ent, PRINT_HIGH, "You must run the server with '+set cheats 1' to enable this command.\n");
g_cmds.c:167:	name = gi.args();
g_cmds.c:174:	if (give_all || Q_stricmp(gi.argv(1), "health") == 0)
g_cmds.c:176:		if (gi.argc() == 3)
g_cmds.c:177:			ent->health = atoi(gi.argv(2));
g_cmds.c:263:		name = gi.argv(1);
g_cmds.c:267:			gi.cprintf (ent, PRINT_HIGH, "unknown item\n");
g_cmds.c:274:		gi.cprintf (ent, PRINT_HIGH, "non-pickup item\n");
g_cmds.c:282:		if (gi.argc() == 3)
g_cmds.c:283:			ent->client->pers.inventory[index] = atoi(gi.argv(2));
g_cmds.c:314:		gi.cprintf (ent, PRINT_HIGH, "You must run the server with '+set cheats 1' to enable this command.\n");
g_cmds.c:324:	gi.cprintf (ent, PRINT_HIGH, msg);
g_cmds.c:343:		gi.cprintf (ent, PRINT_HIGH, "You must run the server with '+set cheats 1' to enable this command.\n");
g_cmds.c:353:	gi.cprintf (ent, PRINT_HIGH, msg);
g_cmds.c:370:		gi.cprintf (ent, PRINT_HIGH, "You must run the server with '+set cheats 1' to enable this command.\n");
g_cmds.c:385:	gi.cprintf (ent, PRINT_HIGH, msg);
g_cmds.c:402:	s = gi.args();
g_cmds.c:406:		gi.cprintf (ent, PRINT_HIGH, "unknown item: %s\n", s);
g_cmds.c:411:		gi.cprintf (ent, PRINT_HIGH, "Item is not usable.\n");
g_cmds.c:417:		gi.cprintf (ent, PRINT_HIGH, "Out of item: %s\n", s);
g_cmds.c:438:	s = gi.args();
g_cmds.c:442:		gi.cprintf (ent, PRINT_HIGH, "unknown item: %s\n", s);
g_cmds.c:447:		gi.cprintf (ent, PRINT_HIGH, "Item is not dropable.\n");
g_cmds.c:453:		gi.cprintf (ent, PRINT_HIGH, "Out of item: %s\n", s);
g_cmds.c:484:	gi.WriteByte (svc_inventory);
g_cmds.c:487:		gi.WriteShort (cl->pers.inventory[i]);
g_cmds.c:489:	gi.unicast (ent, true);
g_cmds.c:505:		gi.cprintf (ent, PRINT_HIGH, "No item to use.\n");
g_cmds.c:512:		gi.cprintf (ent, PRINT_HIGH, "Item is not usable.\n");
g_cmds.c:630:		gi.cprintf (ent, PRINT_HIGH, "No item to drop.\n");
g_cmds.c:637:		gi.cprintf (ent, PRINT_HIGH, "Item is not dropable.\n");
g_cmds.c:729:	gi.cprintf (ent, PRINT_HIGH, "%s\n%i players\n", large, count);
g_cmds.c:741:	i = atoi (gi.argv(1));
g_cmds.c:755:		gi.cprintf (ent, PRINT_HIGH, "flipoff\n");
g_cmds.c:760:		gi.cprintf (ent, PRINT_HIGH, "salute\n");
g_cmds.c:765:		gi.cprintf (ent, PRINT_HIGH, "taunt\n");
g_cmds.c:770:		gi.cprintf (ent, PRINT_HIGH, "wave\n");
g_cmds.c:776:		gi.cprintf (ent, PRINT_HIGH, "point\n");
g_cmds.c:796:	if (gi.argc () < 2 && !arg0)
g_cmds.c:809:		strcat (text, gi.argv(0));
g_cmds.c:811:		strcat (text, gi.args());
g_cmds.c:815:		p = gi.args();
g_cmds.c:835:			gi.cprintf(ent, PRINT_HIGH, "You can't talk for %d more seconds\n",
g_cmds.c:845:			gi.cprintf(ent, PRINT_CHAT, "Flood protection:  You can't talk for %d seconds.\n",
g_cmds.c:855:		gi.cprintf(NULL, PRINT_CHAT, "%s", text);
g_cmds.c:869:		gi.cprintf(other, PRINT_CHAT, "%s", text);
g_cmds.c:895:			gi.cprintf(ent, PRINT_HIGH, "%s", text);
g_cmds.c:900:	gi.cprintf(ent, PRINT_HIGH, "%s", text);
g_cmds.c:916:	cmd = gi.argv(0);
g_combat.c:42:		trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:50:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, targ->s.origin, inflictor, MASK_SOLID);
g_combat.c:57:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:64:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:71:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:78:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:138:	gi.WriteByte (svc_temp_entity);
g_combat.c:139:	gi.WriteByte (type);
g_combat.c:140://	gi.WriteByte (damage);
g_combat.c:141:	gi.WritePosition (origin);
g_combat.c:142:	gi.WriteDir (normal);
g_combat.c:143:	gi.multicast (origin, MULTICAST_PVS);
g_combat.c:467:			gi.sound(targ, CHAN_ITEM, gi.soundindex("items/protect4.wav"), 1, ATTN_NORM, 0);
g_func.c:363:			gi.sound (ent, CHAN_NO_PHS_ADD+CHAN_VOICE, ent->moveinfo.sound_end, 1, ATTN_STATIC, 0);
g_func.c:377:			gi.sound (ent, CHAN_NO_PHS_ADD+CHAN_VOICE, ent->moveinfo.sound_end, 1, ATTN_STATIC, 0);
g_func.c:388:			gi.sound (ent, CHAN_NO_PHS_ADD+CHAN_VOICE, ent->moveinfo.sound_start, 1, ATTN_STATIC, 0);
g_func.c:400:			gi.sound (ent, CHAN_NO_PHS_ADD+CHAN_VOICE, ent->moveinfo.sound_start, 1, ATTN_STATIC, 0);
g_func.c:492:	gi.linkentity (trigger);
g_func.c:519:	gi.setmodel (ent, ent->model);
g_func.c:563:		gi.linkentity (ent);
g_func.c:576:	ent->moveinfo.sound_start = gi.soundindex ("plats/pt1_strt.wav");
g_func.c:577:	ent->moveinfo.sound_middle = gi.soundindex ("plats/pt1_mid.wav");
g_func.c:578:	ent->moveinfo.sound_end = gi.soundindex ("plats/pt1_end.wav");
g_func.c:663:	gi.setmodel (ent, ent->model);
g_func.c:664:	gi.linkentity (ent);
g_func.c:733:		gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_start, 1, ATTN_STATIC, 0);
g_func.c:771:	gi.setmodel (ent, ent->model);
g_func.c:774:		ent->moveinfo.sound_start = gi.soundindex ("switches/butn2.wav");
g_func.c:818:	gi.linkentity (ent);
g_func.c:863:			gi.SetAreaPortalState (t->style, open);
g_func.c:875:			gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_end, 1, ATTN_STATIC, 0);
g_func.c:893:			gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_end, 1, ATTN_STATIC, 0);
g_func.c:905:			gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_start, 1, ATTN_STATIC, 0);
g_func.c:936:			gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_start, 1, ATTN_STATIC, 0);
g_func.c:1068:	gi.linkentity (other);
g_func.c:1134:	gi.centerprintf (other, "%s", self->message);
g_func.c:1135:	gi.sound (other, CHAN_AUTO, gi.soundindex ("misc/talk1.wav"), 1, ATTN_NORM, 0);
g_func.c:1144:		ent->moveinfo.sound_start = gi.soundindex  ("doors/dr1_strt.wav");
g_func.c:1145:		ent->moveinfo.sound_middle = gi.soundindex  ("doors/dr1_mid.wav");
g_func.c:1146:		ent->moveinfo.sound_end = gi.soundindex  ("doors/dr1_end.wav");
g_func.c:1152:	gi.setmodel (ent, ent->model);
g_func.c:1200:		gi.soundindex ("misc/talk.wav");
g_func.c:1222:	gi.linkentity (ent);
g_func.c:1280:		gi.dprintf("%s at %s with no distance set\n", ent->classname, vtos(ent->s.origin));
g_func.c:1290:	gi.setmodel (ent, ent->model);
g_func.c:1309:		ent->moveinfo.sound_start = gi.soundindex  ("doors/dr1_strt.wav");
g_func.c:1310:		ent->moveinfo.sound_middle = gi.soundindex  ("doors/dr1_mid.wav");
g_func.c:1311:		ent->moveinfo.sound_end = gi.soundindex  ("doors/dr1_end.wav");
g_func.c:1332:		gi.soundindex ("misc/talk.wav");
g_func.c:1353:	gi.linkentity (ent);
g_func.c:1385:	gi.setmodel (self, self->model);
g_func.c:1393:			self->moveinfo.sound_start = gi.soundindex  ("world/mov_watr.wav");
g_func.c:1394:			self->moveinfo.sound_end = gi.soundindex  ("world/stp_watr.wav");
g_func.c:1398:			self->moveinfo.sound_start = gi.soundindex  ("world/mov_watr.wav");
g_func.c:1399:			self->moveinfo.sound_end = gi.soundindex  ("world/stp_watr.wav");
g_func.c:1441:	gi.linkentity (self);
g_func.c:1518:				gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_end, 1, ATTN_STATIC, 0);
g_func.c:1539://		gi.dprintf ("train_next: no next target\n");
g_func.c:1546:		gi.dprintf ("train_next: bad target %s\n", self->target);
g_func.c:1557:			gi.dprintf ("connected teleport path_corners, see %s at %s\n", ent->classname, vtos(ent->s.origin));
g_func.c:1564:		gi.linkentity (self);
g_func.c:1574:			gi.sound (self, CHAN_NO_PHS_ADD+CHAN_VOICE, self->moveinfo.sound_start, 1, ATTN_STATIC, 0);
g_func.c:1607:		gi.dprintf ("train_find: no target\n");
g_func.c:1613:		gi.dprintf ("train_find: target %s not found\n", self->target);
g_func.c:1619:	gi.linkentity (self);
g_func.c:1668:	gi.setmodel (self, self->model);
g_func.c:1671:		self->moveinfo.sound_middle = gi.soundindex  (st.noise);
g_func.c:1681:	gi.linkentity (self);
g_func.c:1692:		gi.dprintf ("func_train without a target at %s\n", vtos(self->absmin));
g_func.c:1705://		gi.dprintf("elevator busy\n");
g_func.c:1711:		gi.dprintf("elevator used with no pathtarget\n");
g_func.c:1718:		gi.dprintf("elevator used with bad pathtarget: %s\n", other->pathtarget);
g_func.c:1730:		gi.dprintf("trigger_elevator has no target\n");
g_func.c:1736:		gi.dprintf("trigger_elevator unable to find target %s\n", self->target);
g_func.c:1741:		gi.dprintf("trigger_elevator target %s is not a train\n", self->target);
g_func.c:1806:		gi.dprintf("func_timer at %s has random >= wait\n", vtos(self->s.origin));
g_func.c:1855:	gi.setmodel (self, self->model);
g_func.c:1857:	gi.linkentity (self);
g_func.c:1973:	ent->moveinfo.sound_start = gi.soundindex  ("doors/dr1_strt.wav");
g_func.c:1974:	ent->moveinfo.sound_middle = gi.soundindex  ("doors/dr1_mid.wav");
g_func.c:1975:	ent->moveinfo.sound_end = gi.soundindex  ("doors/dr1_end.wav");
g_func.c:1979:	gi.setmodel (ent, ent->model);
g_func.c:2024:		gi.soundindex ("misc/talk.wav");
g_func.c:2030:	gi.linkentity (ent);
g_func.c:2044:	gi.setmodel (ent, ent->model);
g_items.c:140:	gi.linkentity (ent);
g_items.c:153:	gi.linkentity (ent);
g_items.c:361:	gi.sound(ent, CHAN_ITEM, gi.soundindex("items/damage.wav"), 1, ATTN_NORM, 0);
g_items.c:376://	gi.sound(ent, CHAN_ITEM, gi.soundindex("items/damage.wav"), 1, ATTN_NORM, 0);
g_items.c:391://	gi.sound(ent, CHAN_ITEM, gi.soundindex("items/damage.wav"), 1, ATTN_NORM, 0);
g_items.c:406:	gi.sound(ent, CHAN_ITEM, gi.soundindex("items/protect.wav"), 1, ATTN_NORM, 0);
g_items.c:417://	gi.sound(ent, CHAN_ITEM, gi.soundindex("items/damage.wav"), 1, ATTN_NORM, 0);
g_items.c:529:		gi.cprintf (ent, PRINT_HIGH, "Can't drop current weapon\n");
g_items.c:712:		gi.sound(ent, CHAN_AUTO, gi.soundindex("misc/power2.wav"), 1, ATTN_NORM, 0);
g_items.c:719:			gi.cprintf (ent, PRINT_HIGH, "No cells for power armor.\n");
g_items.c:723:		gi.sound(ent, CHAN_AUTO, gi.soundindex("misc/power1.wav"), 1, ATTN_NORM, 0);
g_items.c:780:		other->client->ps.stats[STAT_PICKUP_ICON] = gi.imageindex(ent->item->icon);
g_items.c:791:				gi.sound(other, CHAN_ITEM, gi.soundindex("items/s_health.wav"), 1, ATTN_NORM, 0);
g_items.c:793:				gi.sound(other, CHAN_ITEM, gi.soundindex("items/n_health.wav"), 1, ATTN_NORM, 0);
g_items.c:795:				gi.sound(other, CHAN_ITEM, gi.soundindex("items/l_health.wav"), 1, ATTN_NORM, 0);
g_items.c:797:				gi.sound(other, CHAN_ITEM, gi.soundindex("items/m_health.wav"), 1, ATTN_NORM, 0);
g_items.c:801:			gi.sound(other, CHAN_ITEM, gi.soundindex(ent->item->pickup_sound), 1, ATTN_NORM, 0);
g_items.c:858:	gi.setmodel (dropped, dropped->item->world_model);
g_items.c:871:		trace = gi.trace (ent->s.origin, dropped->mins, dropped->maxs,
g_items.c:887:	gi.linkentity (dropped);
g_items.c:908:	gi.linkentity (ent);
g_items.c:930:		gi.setmodel (ent, ent->model);
g_items.c:932:		gi.setmodel (ent, ent->item->world_model);
g_items.c:940:	tr = gi.trace (ent->s.origin, ent->mins, ent->maxs, dest, ent, MASK_SOLID);
g_items.c:943:		gi.dprintf ("droptofloor: %s startsolid at %s\n", ent->classname, vtos(ent->s.origin));
g_items.c:980:	gi.linkentity (ent);
g_items.c:1004:		gi.soundindex (it->pickup_sound);
g_items.c:1006:		gi.modelindex (it->world_model);
g_items.c:1008:		gi.modelindex (it->view_model);
g_items.c:1010:		gi.imageindex (it->icon);
g_items.c:1033:			gi.error ("PrecacheItem: %s has bad precache string", it->classname);
g_items.c:1041:			gi.modelindex (data);
g_items.c:1043:			gi.modelindex (data);
g_items.c:1045:			gi.soundindex (data);
g_items.c:1047:			gi.imageindex (data);
g_items.c:1070:			gi.dprintf("%s at %s has invalid spawnflags set\n", ent->classname, vtos(ent->s.origin));
g_items.c:1129:		gi.modelindex (ent->model);
g_items.c:2132:	gi.soundindex ("items/n_health.wav");
g_items.c:2149:	gi.soundindex ("items/s_health.wav");
g_items.c:2165:	gi.soundindex ("items/l_health.wav");
g_items.c:2181:	gi.soundindex ("items/m_health.wav");
g_items.c:2208:		gi.configstring (CS_ITEMS+i, it->pickup_name);
g_main.c:25:game_import_t	gi;
g_main.c:99:	gi.dprintf ("==== ShutdownGame ====\n");
g_main.c:101:	gi.FreeTags (TAG_LEVEL);
g_main.c:102:	gi.FreeTags (TAG_GAME);
g_main.c:116:	gi = *import;
g_main.c:155:	gi.error (ERR_FATAL, "%s", text);
g_main.c:167:	gi.dprintf ("%s", text);
g_main.c:298:		gi.cvar_set("needpass", va("%d", need));
g_main.c:322:			gi.bprintf (PRINT_HIGH, "Timelimit hit.\n");
g_main.c:338:				gi.bprintf (PRINT_HIGH, "Fraglimit hit.\n");
g_main.c:359:	gi.AddCommandString (command);
g_misc.c:34://	gi.dprintf ("portalstate: %i = %i\n", ent->style, ent->count);
g_misc.c:35:	gi.SetAreaPortalState (ent->style, ent->count);
g_misc.c:115:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/fhit3.wav"), 1, ATTN_NORM, 0);
g_misc.c:151:	gi.setmodel (gib, gibname);
g_misc.c:180:	gi.linkentity (gib);
g_misc.c:194:	gi.setmodel (self, gibname);
g_misc.c:225:	gi.linkentity (self);
g_misc.c:247:	gi.setmodel (self, gibname);
g_misc.c:272:	gi.linkentity (self);
g_misc.c:293:	gi.setmodel (chunk, modelname);
g_misc.c:310:	gi.linkentity (chunk);
g_misc.c:316:	gi.WriteByte (svc_temp_entity);
g_misc.c:317:	gi.WriteByte (TE_EXPLOSION1);
g_misc.c:318:	gi.WritePosition (self->s.origin);
g_misc.c:319:	gi.multicast (self->s.origin, MULTICAST_PVS);
g_misc.c:327:	gi.WriteByte (svc_temp_entity);
g_misc.c:328:	gi.WriteByte (TE_EXPLOSION2);
g_misc.c:329:	gi.WritePosition (self->s.origin);
g_misc.c:330:	gi.multicast (self->s.origin, MULTICAST_PVS);
g_misc.c:403:		gi.dprintf ("path_corner with no targetname at %s\n", vtos(self->s.origin));
g_misc.c:413:	gi.linkentity (self);
g_misc.c:435:			gi.dprintf("%s at %s target %s does not exist\n", self->classname, vtos(self->s.origin), self->target);
g_misc.c:486:	gi.linkentity (self);
g_misc.c:501:	gi.dprintf ("viewthing spawned\n");
g_misc.c:508:	ent->s.modelindex = gi.modelindex ("models/objects/banner/tris.md2");
g_misc.c:509:	gi.linkentity (ent);
g_misc.c:549:		gi.configstring (CS_LIGHTS+self->style, "m");
g_misc.c:554:		gi.configstring (CS_LIGHTS+self->style, "a");
g_misc.c:572:			gi.configstring (CS_LIGHTS+self->style, "a");
g_misc.c:574:			gi.configstring (CS_LIGHTS+self->style, "m");
g_misc.c:606:	gi.linkentity (self);
g_misc.c:615:	gi.setmodel (self, self->model);
g_misc.c:626:		gi.linkentity (self);
g_misc.c:633://		gi.dprintf("func_wall missing TRIGGER_SPAWN\n");
g_misc.c:642:			gi.dprintf("func_wall START_ON without TOGGLE\n");
g_misc.c:657:	gi.linkentity (self);
g_misc.c:694:	gi.setmodel (self, self->model);
g_misc.c:728:	gi.linkentity (self);
g_misc.c:820:	gi.linkentity (self);
g_misc.c:833:	gi.modelindex ("models/objects/debris1/tris.md2");
g_misc.c:834:	gi.modelindex ("models/objects/debris2/tris.md2");
g_misc.c:836:	gi.setmodel (self, self->model);
g_misc.c:864:	gi.linkentity (self);
g_misc.c:982:	gi.modelindex ("models/objects/debris1/tris.md2");
g_misc.c:983:	gi.modelindex ("models/objects/debris2/tris.md2");
g_misc.c:984:	gi.modelindex ("models/objects/debris3/tris.md2");
g_misc.c:990:	self->s.modelindex = gi.modelindex (self->model);
g_misc.c:1010:	gi.linkentity (self);
g_misc.c:1024:	gi.WriteByte (svc_temp_entity);
g_misc.c:1025:	gi.WriteByte (TE_BOSSTPORT);
g_misc.c:1026:	gi.WritePosition (ent->s.origin);
g_misc.c:1027:	gi.multicast (ent->s.origin, MULTICAST_PVS);
g_misc.c:1049:	ent->s.modelindex = gi.modelindex ("models/objects/black/tris.md2");
g_misc.c:1054:	gi.linkentity (ent);
g_misc.c:1077:	ent->s.modelindex = gi.modelindex ("models/monsters/tank/tris.md2");
g_misc.c:1081:	gi.linkentity (ent);
g_misc.c:1105:	ent->s.modelindex = gi.modelindex ("models/monsters/bitch/tris.md2");
g_misc.c:1109:	gi.linkentity (ent);
g_misc.c:1133:	ent->s.modelindex = gi.modelindex ("models/monsters/bitch/tris.md2");
g_misc.c:1137:	gi.linkentity (ent);
g_misc.c:1154:		gi.sound (self, CHAN_BODY, gi.soundindex ("tank/thud.wav"), 1, ATTN_NORM, 0);
g_misc.c:1161:	gi.sound (self, CHAN_BODY, gi.soundindex ("tank/pain.wav"), 1, ATTN_NORM, 0);
g_misc.c:1175:	self->s.modelindex = gi.modelindex (self->model);
g_misc.c:1182:	gi.linkentity (self);
g_misc.c:1184:	gi.soundindex ("tank/thud.wav");
g_misc.c:1185:	gi.soundindex ("tank/pain.wav");
g_misc.c:1206:	ent->s.modelindex = gi.modelindex ("models/objects/banner/tris.md2");
g_misc.c:1208:	gi.linkentity (ent);
g_misc.c:1224:	gi.sound (self, CHAN_BODY, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
g_misc.c:1240:	ent->s.modelindex=gi.modelindex ("models/deadbods/dude/tris.md2");
g_misc.c:1264:	gi.linkentity (ent);
g_misc.c:1289:		gi.dprintf ("misc_viper without a target at %s\n", vtos(ent->absmin));
g_misc.c:1299:	ent->s.modelindex = gi.modelindex ("models/ships/viper/tris.md2");
g_misc.c:1309:	gi.linkentity (ent);
g_misc.c:1322:	ent->s.modelindex = gi.modelindex ("models/ships/bigviper/tris.md2");
g_misc.c:1323:	gi.linkentity (ent);
g_misc.c:1385:	self->s.modelindex = gi.modelindex ("models/objects/bomb/tris.md2");
g_misc.c:1393:	gi.linkentity (self);
g_misc.c:1419:		gi.dprintf ("%s without a target at %s\n", ent->classname, vtos(ent->absmin));
g_misc.c:1429:	ent->s.modelindex = gi.modelindex ("models/ships/strogg1/tris.md2");
g_misc.c:1439:	gi.linkentity (ent);
g_misc.c:1465:	ent->s.modelindex = gi.modelindex ("models/objects/satellite/tris.md2");
g_misc.c:1467:	gi.linkentity (ent);
g_misc.c:1477:	ent->s.modelindex = gi.modelindex ("models/objects/minelite/light1/tris.md2");
g_misc.c:1478:	gi.linkentity (ent);
g_misc.c:1488:	ent->s.modelindex = gi.modelindex ("models/objects/minelite/light2/tris.md2");
g_misc.c:1489:	gi.linkentity (ent);
g_misc.c:1498:	gi.setmodel (ent, "models/objects/gibs/arm/tris.md2");
g_misc.c:1511:	gi.linkentity (ent);
g_misc.c:1519:	gi.setmodel (ent, "models/objects/gibs/leg/tris.md2");
g_misc.c:1532:	gi.linkentity (ent);
g_misc.c:1540:	gi.setmodel (ent, "models/objects/gibs/head/tris.md2");
g_misc.c:1553:	gi.linkentity (ent);
g_misc.c:1566:	gi.setmodel (self, self->model);
g_misc.c:1569:	gi.linkentity (self);
g_misc.c:1754:		gi.dprintf("%s with no target at %s\n", self->classname, vtos(self->s.origin));
g_misc.c:1761:		gi.dprintf("%s with no count at %s\n", self->classname, vtos(self->s.origin));
g_misc.c:1771:	self->message = gi.TagMalloc (CLOCK_MESSAGE_SIZE, TAG_LEVEL);
g_misc.c:1793:		gi.dprintf ("Couldn't find destination\n");
g_misc.c:1798:	gi.unlinkentity (other);
g_misc.c:1826:	gi.linkentity (other);
g_misc.c:1838:		gi.dprintf ("teleporter without a target.\n");
g_misc.c:1843:	gi.setmodel (ent, "models/objects/dmspot/tris.md2");
g_misc.c:1846:	ent->s.sound = gi.soundindex ("world/amb10.wav");
g_misc.c:1851:	gi.linkentity (ent);
g_misc.c:1861:	gi.linkentity (trig);
g_misc.c:1870:	gi.setmodel (ent, "models/objects/dmspot/tris.md2");
g_misc.c:1876:	gi.linkentity (ent);
g_monster.c:35:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:36:	gi.WriteShort (self - g_edicts);
g_monster.c:37:	gi.WriteByte (flashtype);
g_monster.c:38:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:45:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:46:	gi.WriteShort (self - g_edicts);
g_monster.c:47:	gi.WriteByte (flashtype);
g_monster.c:48:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:55:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:56:	gi.WriteShort (self - g_edicts);
g_monster.c:57:	gi.WriteByte (flashtype);
g_monster.c:58:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:65:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:66:	gi.WriteShort (self - g_edicts);
g_monster.c:67:	gi.WriteByte (flashtype);
g_monster.c:68:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:75:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:76:	gi.WriteShort (self - g_edicts);
g_monster.c:77:	gi.WriteByte (flashtype);
g_monster.c:78:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:85:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:86:	gi.WriteShort (self - g_edicts);
g_monster.c:87:	gi.WriteByte (flashtype);
g_monster.c:88:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:95:	gi.WriteByte (svc_muzzleflash2);
g_monster.c:96:	gi.WriteShort (self - g_edicts);
g_monster.c:97:	gi.WriteByte (flashtype);
g_monster.c:98:	gi.multicast (start, MULTICAST_PVS);
g_monster.c:118:	self->s.sound = gi.soundindex ("infantry/inflies1.wav");
g_monster.c:160:	trace = gi.trace (ent->s.origin, ent->mins, ent->maxs, point, ent, MASK_MONSTERSOLID);
g_monster.c:194:	cont = gi.pointcontents (point);
g_monster.c:206:	cont = gi.pointcontents (point);
g_monster.c:212:	cont = gi.pointcontents (point);
g_monster.c:266:			gi.sound (ent, CHAN_BODY, gi.soundindex("player/watr_out.wav"), 1, ATTN_NORM, 0);
g_monster.c:295:					gi.sound (ent, CHAN_BODY, gi.soundindex("player/lava1.wav"), 1, ATTN_NORM, 0);
g_monster.c:297:					gi.sound (ent, CHAN_BODY, gi.soundindex("player/lava2.wav"), 1, ATTN_NORM, 0);
g_monster.c:299:				gi.sound (ent, CHAN_BODY, gi.soundindex("player/watr_in.wav"), 1, ATTN_NORM, 0);
g_monster.c:301:				gi.sound (ent, CHAN_BODY, gi.soundindex("player/watr_in.wav"), 1, ATTN_NORM, 0);
g_monster.c:319:	trace = gi.trace (ent->s.origin, ent->mins, ent->maxs, end, ent, MASK_MONSTERSOLID);
g_monster.c:326:	gi.linkentity (ent);
g_monster.c:469:	gi.linkentity (self);
g_monster.c:546://		gi.dprintf("fixed spawnflags on %s at %s\n", self->classname, vtos(self->s.origin));
g_monster.c:573:			gi.dprintf("%s at %s has bad item: %s\n", self->classname, vtos(self->s.origin), st.item);
g_monster.c:613:			gi.dprintf("%s at %s has target with mixed types\n", self->classname, vtos(self->s.origin));
g_monster.c:628:				gi.dprintf("%s at (%i %i %i) has a bad combattarget %s : %s at (%i %i %i)\n",
g_monster.c:641:			gi.dprintf ("%s can't find target %s at %s\n", self->classname, self->target, vtos(self->s.origin));
g_monster.c:679:				gi.dprintf ("%s in solid at %s\n", self->classname, vtos(self->s.origin));
g_monster.c:702:		gi.dprintf ("%s in solid at %s\n", self->classname, vtos(self->s.origin));
g_phys.c:58:	trace = gi.trace (ent->s.origin, ent->mins, ent->maxs, ent->s.origin, ent, mask);
g_phys.c:107:		gi.error ("NULL ent->think");
g_phys.c:213:		trace = gi.trace (ent->s.origin, ent->mins, ent->maxs, end, ent, mask);
g_phys.c:292://				gi.dprintf ("clip velocity, numplanes == %i\n",numplanes);
g_phys.c:358:	trace = gi.trace (start, ent->mins, ent->maxs, end, ent, mask);
g_phys.c:361:	gi.linkentity (ent);
g_phys.c:372:			gi.linkentity (ent);
g_phys.c:446:	gi.linkentity (pusher);
g_phys.c:510:				gi.linkentity (check);
g_phys.c:541:			gi.linkentity (p->ent);
g_phys.c:590:		gi.error (ERR_FATAL, "pushed_p > &pushed[MAX_EDICTS], memory corrupted");
g_phys.c:652:	gi.linkentity (ent);
g_phys.c:744:	ent->watertype = gi.pointcontents (ent->s.origin);
g_phys.c:753:		gi.positioned_sound (old_origin, g_edicts, CHAN_AUTO, gi.soundindex("misc/h2ohit1.wav"), 1, 1, 0);
g_phys.c:755:		gi.positioned_sound (ent->s.origin, g_edicts, CHAN_AUTO, gi.soundindex("misc/h2ohit1.wav"), 1, 1, 0);
g_phys.c:761:		gi.linkentity (slave);
g_phys.c:910:		gi.linkentity (ent);
g_phys.c:918:					gi.sound (ent, 0, gi.soundindex("world/land.wav"), 1, 1, 0);
g_phys.c:959:		gi.error ("SV_Physics: bad movetype %i", (int)ent->movetype);			
g_save.c:154:	gi.dprintf ("==== InitGame ====\n");
g_save.c:156:	gun_x = gi.cvar ("gun_x", "0", 0);
g_save.c:157:	gun_y = gi.cvar ("gun_y", "0", 0);
g_save.c:158:	gun_z = gi.cvar ("gun_z", "0", 0);
g_save.c:159:	oldsave = gi.cvar("oldsave", "0", CVAR_ARCHIVE);
g_save.c:161:	sv_rollspeed = gi.cvar ("sv_rollspeed", "200", 0);
g_save.c:162:	sv_rollangle = gi.cvar ("sv_rollangle", "2", 0);
g_save.c:163:	sv_maxvelocity = gi.cvar ("sv_maxvelocity", "2000", 0);
g_save.c:164:	sv_gravity = gi.cvar ("sv_gravity", "800", 0);
g_save.c:167:	dedicated = gi.cvar ("dedicated", "0", CVAR_NOSET);
g_save.c:170:	sv_cheats = gi.cvar ("cheats", "0", CVAR_SERVERINFO|CVAR_LATCH);
g_save.c:171:	gi.cvar ("gamename", GAMEVERSION , CVAR_SERVERINFO | CVAR_LATCH);
g_save.c:172:	gi.cvar ("gamedate", __DATE__ , CVAR_SERVERINFO | CVAR_LATCH);
g_save.c:174:	maxclients = gi.cvar ("maxclients", "4", CVAR_SERVERINFO | CVAR_LATCH);
g_save.c:175:	maxspectators = gi.cvar ("maxspectators", "4", CVAR_SERVERINFO);
g_save.c:176:	deathmatch = gi.cvar ("deathmatch", "0", CVAR_LATCH);
g_save.c:177:	coop = gi.cvar ("coop", "0", CVAR_LATCH);
g_save.c:178:	skill = gi.cvar ("skill", "1", CVAR_LATCH);
g_save.c:179:	maxentities = gi.cvar ("maxentities", "1024", CVAR_LATCH);
g_save.c:182:	dmflags = gi.cvar ("dmflags", "0", CVAR_SERVERINFO);
g_save.c:183:	fraglimit = gi.cvar ("fraglimit", "0", CVAR_SERVERINFO);
g_save.c:184:	timelimit = gi.cvar ("timelimit", "0", CVAR_SERVERINFO);
g_save.c:185:	password = gi.cvar ("password", "", CVAR_USERINFO);
g_save.c:186:	spectator_password = gi.cvar ("spectator_password", "", CVAR_USERINFO);
g_save.c:187:	needpass = gi.cvar ("needpass", "0", CVAR_SERVERINFO);
g_save.c:188:	filterban = gi.cvar ("filterban", "1", 0);
g_save.c:190:	g_select_empty = gi.cvar ("g_select_empty", "0", CVAR_ARCHIVE);
g_save.c:192:	run_pitch = gi.cvar ("run_pitch", "0.002", 0);
g_save.c:193:	run_roll = gi.cvar ("run_roll", "0.005", 0);
g_save.c:194:	bob_up  = gi.cvar ("bob_up", "0.005", 0);
g_save.c:195:	bob_pitch = gi.cvar ("bob_pitch", "0.002", 0);
g_save.c:196:	bob_roll = gi.cvar ("bob_roll", "0.002", 0);
g_save.c:199:	flood_msgs = gi.cvar ("flood_msgs", "4", 0);
g_save.c:200:	flood_persecond = gi.cvar ("flood_persecond", "4", 0);
g_save.c:201:	flood_waitdelay = gi.cvar ("flood_waitdelay", "10", 0);
g_save.c:204:	sv_maplist = gi.cvar ("sv_maplist", "", 0);
g_save.c:215:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:221:	game.clients = gi.TagMalloc (game.maxclients * sizeof(game.clients[0]), TAG_GAME);
g_save.c:295:		gi.error ("WriteEdict: unknown field type");
g_save.c:352:			*(char **)p = gi.TagMalloc (32+len, TAG_LEVEL);
g_save.c:397:		gi.error ("ReadEdict: unknown field type");
g_save.c:478:		gi.error ("Couldn't open %s", filename);
g_save.c:500:	gi.FreeTags (TAG_GAME);
g_save.c:504:		gi.error ("Couldn't open %s", filename);
g_save.c:510:		gi.error ("Savegame from an older version.\n");
g_save.c:513:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:517:	game.clients = gi.TagMalloc (game.maxclients * sizeof(game.clients[0]), TAG_GAME);
g_save.c:644:		gi.error ("Couldn't open %s", filename);
g_save.c:699:		gi.error ("Couldn't open %s", filename);
g_save.c:703:	gi.FreeTags (TAG_LEVEL);
g_save.c:714:		gi.error ("ReadLevel: mismatched edict size");
g_save.c:723:		gi.error ("ReadLevel: function pointers have moved");
g_save.c:726:	gi.dprintf("Function offsets %d\n", ((byte *)base) - ((byte *)InitGame));
g_save.c:738:			gi.error ("ReadLevel: failed to read entnum");
g_save.c:750:		gi.linkentity (ent);
g_spawn.c:286:		gi.dprintf ("ED_CallSpawn: NULL classname\n");
g_spawn.c:311:	gi.dprintf ("%s doesn't have a spawn function\n", ent->classname);
g_spawn.c:326:	newb = gi.TagMalloc (l, TAG_LEVEL);
g_spawn.c:405:	gi.dprintf ("%s is not a field\n", key);
g_spawn.c:433:			gi.error ("ED_ParseEntity: EOF without closing brace");
g_spawn.c:440:			gi.error ("ED_ParseEntity: EOF without closing brace");
g_spawn.c:443:			gi.error ("ED_ParseEntity: closing brace without data");
g_spawn.c:511:	gi.dprintf ("%i teams with %i entities\n", c, c2);
g_spawn.c:536:		gi.cvar_forceset("skill", va("%f", skill_level));
g_spawn.c:540:	gi.FreeTags (TAG_LEVEL);
g_spawn.c:563:			gi.error ("ED_LoadFromFile: found %s when expecting {",com_token);
g_spawn.c:607:	gi.dprintf ("%i entities inhibited\n", inhibit);
g_spawn.c:820:		gi.configstring (CS_NAME, ent->message);
g_spawn.c:827:		gi.configstring (CS_SKY, st.sky);
g_spawn.c:829:		gi.configstring (CS_SKY, "unit1_");
g_spawn.c:831:	gi.configstring (CS_SKYROTATE, va("%f", st.skyrotate) );
g_spawn.c:833:	gi.configstring (CS_SKYAXIS, va("%f %f %f",
g_spawn.c:836:	gi.configstring (CS_CDTRACK, va("%i", ent->sounds) );
g_spawn.c:838:	gi.configstring (CS_MAXCLIENTS, va("%i", (int)(maxclients->value) ) );
g_spawn.c:842:		gi.configstring (CS_STATUSBAR, dm_statusbar);
g_spawn.c:844:		gi.configstring (CS_STATUSBAR, single_statusbar);
g_spawn.c:850:	gi.imageindex ("i_help");
g_spawn.c:851:	level.pic_health = gi.imageindex ("i_health");
g_spawn.c:852:	gi.imageindex ("help");
g_spawn.c:853:	gi.imageindex ("field_3");
g_spawn.c:856:		gi.cvar_set("sv_gravity", "800");
g_spawn.c:858:		gi.cvar_set("sv_gravity", st.gravity);
g_spawn.c:860:	snd_fry = gi.soundindex ("player/fry.wav");	// standing in lava / slime
g_spawn.c:864:	gi.soundindex ("player/lava1.wav");
g_spawn.c:865:	gi.soundindex ("player/lava2.wav");
g_spawn.c:867:	gi.soundindex ("misc/pc_up.wav");
g_spawn.c:868:	gi.soundindex ("misc/talk1.wav");
g_spawn.c:870:	gi.soundindex ("misc/udeath.wav");
g_spawn.c:873:	gi.soundindex ("items/respawn1.wav");
g_spawn.c:876:	gi.soundindex ("*death1.wav");
g_spawn.c:877:	gi.soundindex ("*death2.wav");
g_spawn.c:878:	gi.soundindex ("*death3.wav");
g_spawn.c:879:	gi.soundindex ("*death4.wav");
g_spawn.c:880:	gi.soundindex ("*fall1.wav");
g_spawn.c:881:	gi.soundindex ("*fall2.wav");	
g_spawn.c:882:	gi.soundindex ("*gurp1.wav");		// drowning damage
g_spawn.c:883:	gi.soundindex ("*gurp2.wav");	
g_spawn.c:884:	gi.soundindex ("*jump1.wav");		// player jump
g_spawn.c:885:	gi.soundindex ("*pain25_1.wav");
g_spawn.c:886:	gi.soundindex ("*pain25_2.wav");
g_spawn.c:887:	gi.soundindex ("*pain50_1.wav");
g_spawn.c:888:	gi.soundindex ("*pain50_2.wav");
g_spawn.c:889:	gi.soundindex ("*pain75_1.wav");
g_spawn.c:890:	gi.soundindex ("*pain75_2.wav");
g_spawn.c:891:	gi.soundindex ("*pain100_1.wav");
g_spawn.c:892:	gi.soundindex ("*pain100_2.wav");
g_spawn.c:897:	gi.modelindex ("#w_blaster.md2");
g_spawn.c:898:	gi.modelindex ("#w_shotgun.md2");
g_spawn.c:899:	gi.modelindex ("#w_sshotgun.md2");
g_spawn.c:900:	gi.modelindex ("#w_machinegun.md2");
g_spawn.c:901:	gi.modelindex ("#w_chaingun.md2");
g_spawn.c:902:	gi.modelindex ("#a_grenades.md2");
g_spawn.c:903:	gi.modelindex ("#w_glauncher.md2");
g_spawn.c:904:	gi.modelindex ("#w_rlauncher.md2");
g_spawn.c:905:	gi.modelindex ("#w_hyperblaster.md2");
g_spawn.c:906:	gi.modelindex ("#w_railgun.md2");
g_spawn.c:907:	gi.modelindex ("#w_bfg.md2");
g_spawn.c:911:	gi.soundindex ("player/gasp1.wav");		// gasping for air
g_spawn.c:912:	gi.soundindex ("player/gasp2.wav");		// head breaking surface, not gasping
g_spawn.c:914:	gi.soundindex ("player/watr_in.wav");	// feet hitting water
g_spawn.c:915:	gi.soundindex ("player/watr_out.wav");	// feet leaving water
g_spawn.c:917:	gi.soundindex ("player/watr_un.wav");	// head going underwater
g_spawn.c:919:	gi.soundindex ("player/u_breath1.wav");
g_spawn.c:920:	gi.soundindex ("player/u_breath2.wav");
g_spawn.c:922:	gi.soundindex ("items/pkup.wav");		// bonus item pickup
g_spawn.c:923:	gi.soundindex ("world/land.wav");		// landing thud
g_spawn.c:924:	gi.soundindex ("misc/h2ohit1.wav");		// landing splash
g_spawn.c:926:	gi.soundindex ("items/damage.wav");
g_spawn.c:927:	gi.soundindex ("items/protect.wav");
g_spawn.c:928:	gi.soundindex ("items/protect4.wav");
g_spawn.c:929:	gi.soundindex ("weapons/noammo.wav");
g_spawn.c:931:	gi.soundindex ("infantry/inflies1.wav");
g_spawn.c:933:	sm_meat_index = gi.modelindex ("models/objects/gibs/sm_meat/tris.md2");
g_spawn.c:934:	gi.modelindex ("models/objects/gibs/arm/tris.md2");
g_spawn.c:935:	gi.modelindex ("models/objects/gibs/bone/tris.md2");
g_spawn.c:936:	gi.modelindex ("models/objects/gibs/bone2/tris.md2");
g_spawn.c:937:	gi.modelindex ("models/objects/gibs/chest/tris.md2");
g_spawn.c:938:	gi.modelindex ("models/objects/gibs/skull/tris.md2");
g_spawn.c:939:	gi.modelindex ("models/objects/gibs/head2/tris.md2");
g_spawn.c:946:	gi.configstring(CS_LIGHTS+0, "m");
g_spawn.c:949:	gi.configstring(CS_LIGHTS+1, "mmnmmommommnonmmonqnmmo");
g_spawn.c:952:	gi.configstring(CS_LIGHTS+2, "abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba");
g_spawn.c:955:	gi.configstring(CS_LIGHTS+3, "mmmmmaaaaammmmmaaaaaabcdefgabcdefg");
g_spawn.c:958:	gi.configstring(CS_LIGHTS+4, "mamamamamama");
g_spawn.c:961:	gi.configstring(CS_LIGHTS+5,"jklmnopqrstuvwxyzyxwvutsrqponmlkj");
g_spawn.c:964:	gi.configstring(CS_LIGHTS+6, "nmonqnmomnmomomno");
g_spawn.c:967:	gi.configstring(CS_LIGHTS+7, "mmmaaaabcdefgmmmmaaaammmaamm");
g_spawn.c:970:	gi.configstring(CS_LIGHTS+8, "mmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa");
g_spawn.c:973:	gi.configstring(CS_LIGHTS+9, "aaaaaaaazzzzzzzz");
g_spawn.c:976:	gi.configstring(CS_LIGHTS+10, "mmamammmmammamamaaamammma");
g_spawn.c:979:	gi.configstring(CS_LIGHTS+11, "abcdefghijklmnopqrrqponmlkjihgfedcba");
g_spawn.c:984:	gi.configstring(CS_LIGHTS+63, "a");
g_svcmds.c:26:	gi.cprintf (NULL, PRINT_HIGH, "Svcmd_Test_f()\n");
g_svcmds.c:93:			gi.cprintf(NULL, PRINT_HIGH, "Bad filter address: %s\n", s);
g_svcmds.c:162:	if (gi.argc() < 3) {
g_svcmds.c:163:		gi.cprintf(NULL, PRINT_HIGH, "Usage:  addip <ip-mask>\n");
g_svcmds.c:174:			gi.cprintf (NULL, PRINT_HIGH, "IP filter list is full\n");
g_svcmds.c:180:	if (!StringToFilter (gi.argv(2), &ipfilters[i]))
g_svcmds.c:194:	if (gi.argc() < 3) {
g_svcmds.c:195:		gi.cprintf(NULL, PRINT_HIGH, "Usage:  sv removeip <ip-mask>\n");
g_svcmds.c:199:	if (!StringToFilter (gi.argv(2), &f))
g_svcmds.c:209:			gi.cprintf (NULL, PRINT_HIGH, "Removed.\n");
g_svcmds.c:212:	gi.cprintf (NULL, PRINT_HIGH, "Didn't find %s.\n", gi.argv(2));
g_svcmds.c:225:	gi.cprintf (NULL, PRINT_HIGH, "Filter list:\n");
g_svcmds.c:229:		gi.cprintf (NULL, PRINT_HIGH, "%3i.%3i.%3i.%3i\n", b[0], b[1], b[2], b[3]);
g_svcmds.c:246:	game = gi.cvar("game", "", 0);
g_svcmds.c:253:	gi.cprintf (NULL, PRINT_HIGH, "Writing %s.\n", name);
g_svcmds.c:258:		gi.cprintf (NULL, PRINT_HIGH, "Couldn't open %s\n", name);
g_svcmds.c:278:The game can issue gi.argc() / gi.argv() commands to get the rest
g_svcmds.c:286:	cmd = gi.argv(1);
g_svcmds.c:298:		gi.cprintf (NULL, PRINT_HIGH, "Unknown server command \"%s\"\n", cmd);
g_target.c:28:	gi.WriteByte (svc_temp_entity);
g_target.c:29:	gi.WriteByte (ent->style);
g_target.c:30:	gi.WritePosition (ent->s.origin);
g_target.c:31:	gi.multicast (ent->s.origin, MULTICAST_PVS);
g_target.c:77:		gi.positioned_sound (ent->s.origin, ent, chan, ent->noise_index, ent->volume, ent->attenuation, 0);
g_target.c:87:		gi.dprintf("target_speaker with no noise set at %s\n", vtos(ent->s.origin));
g_target.c:94:	ent->noise_index = gi.soundindex (buffer);
g_target.c:112:	gi.linkentity (ent);
g_target.c:141:		gi.dprintf ("%s with no message at %s\n", ent->classname, vtos(ent->s.origin));
g_target.c:156:	gi.sound (ent, CHAN_VOICE, ent->noise_index, 1, ATTN_NORM, 0);
g_target.c:175:	ent->noise_index = gi.soundindex (st.noise);
g_target.c:191:	gi.sound (ent, CHAN_VOICE, ent->noise_index, 1, ATTN_NORM, 0);
g_target.c:196:		gi.configstring (CS_CDTRACK, "0");
g_target.c:213:	ent->noise_index = gi.soundindex (st.noise);
g_target.c:231:	gi.WriteByte (svc_temp_entity);
g_target.c:232:	gi.WriteByte (TE_EXPLOSION1);
g_target.c:233:	gi.WritePosition (self->s.origin);
g_target.c:234:	gi.multicast (self->s.origin, MULTICAST_PHS);
g_target.c:292:			gi.bprintf (PRINT_HIGH, "%s exited the level.\n", activator->client->pers.netname);
g_target.c:306:		gi.dprintf("target_changelevel with no map at %s\n", vtos(ent->s.origin));
g_target.c:340:	gi.WriteByte (svc_temp_entity);
g_target.c:341:	gi.WriteByte (TE_SPLASH);
g_target.c:342:	gi.WriteByte (self->count);
g_target.c:343:	gi.WritePosition (self->s.origin);
g_target.c:344:	gi.WriteDir (self->movedir);
g_target.c:345:	gi.WriteByte (self->sounds);
g_target.c:346:	gi.multicast (self->s.origin, MULTICAST_PVS);
g_target.c:389:	gi.unlinkentity (ent);
g_target.c:391:	gi.linkentity (ent);
g_target.c:428:	gi.sound (self, CHAN_VOICE, self->noise_index, 1, ATTN_NORM, 0);
g_target.c:435:	self->noise_index = gi.soundindex ("weapons/laser2.wav");
g_target.c:525:		tr = gi.trace (start, NULL, NULL, end, ignore, CONTENTS_SOLID|CONTENTS_MONSTER|CONTENTS_DEADMONSTER);
g_target.c:540:				gi.WriteByte (svc_temp_entity);
g_target.c:541:				gi.WriteByte (TE_LASER_SPARKS);
g_target.c:542:				gi.WriteByte (count);
g_target.c:543:				gi.WritePosition (tr.endpos);
g_target.c:544:				gi.WriteDir (tr.plane.normal);
g_target.c:545:				gi.WriteByte (self->s.skinnum);
g_target.c:546:				gi.multicast (tr.endpos, MULTICAST_PVS);
g_target.c:618:				gi.dprintf ("%s at %s: %s is a bad target\n", self->classname, vtos(self->s.origin), self->target);
g_target.c:634:	gi.linkentity (self);
g_target.c:662:	gi.configstring (CS_LIGHTS+self->enemy->style, style);
g_target.c:694:				gi.dprintf("%s at %s ", self->classname, vtos(self->s.origin));
g_target.c:695:				gi.dprintf("target %s (%s at %s) is not a light\n", self->target, e->classname, vtos(e->s.origin));
g_target.c:705:			gi.dprintf("%s target %s not found at %s\n", self->classname, self->target, vtos(self->s.origin));
g_target.c:719:		gi.dprintf("target_lightramp has bad ramp (%s) at %s\n", self->message, vtos(self->s.origin));
g_target.c:732:		gi.dprintf("%s with no target at %s\n", self->classname, vtos(self->s.origin));
g_target.c:762:		gi.positioned_sound (self->s.origin, self, CHAN_AUTO, self->noise_index, 1.0, ATTN_NONE, 0);
g_target.c:796:		gi.dprintf("untargeted %s at %s\n", self->classname, vtos(self->s.origin));
g_target.c:808:	self->noise_index = gi.soundindex ("world/quake.wav");
g_trigger.c:30:	gi.setmodel (self, self->model);
g_trigger.c:115:	gi.linkentity (self);
g_trigger.c:121:		ent->noise_index = gi.soundindex ("misc/secret.wav");
g_trigger.c:123:		ent->noise_index = gi.soundindex ("misc/talk.wav");
g_trigger.c:125:		ent->noise_index = gi.soundindex ("misc/trigger1.wav");
g_trigger.c:148:	gi.setmodel (ent, ent->model);
g_trigger.c:149:	gi.linkentity (ent);
g_trigger.c:179:		gi.dprintf("fixed TRIGGERED flag on %s at %s\n", ent->classname, vtos(v));
g_trigger.c:227:		gi.centerprintf (activator, "You need the %s", self->item->pickup_name);
g_trigger.c:228:		gi.sound (activator, CHAN_AUTO, gi.soundindex ("misc/keytry.wav"), 1, ATTN_NORM, 0);
g_trigger.c:232:	gi.sound (activator, CHAN_AUTO, gi.soundindex ("misc/keyuse.wav"), 1, ATTN_NORM, 0);
g_trigger.c:286:		gi.dprintf("no key item for trigger_key at %s\n", vtos(self->s.origin));
g_trigger.c:293:		gi.dprintf("item %s not found for trigger_key at %s\n", st.item, vtos(self->s.origin));
g_trigger.c:299:		gi.dprintf("%s at %s has no target\n", self->classname, vtos(self->s.origin));
g_trigger.c:303:	gi.soundindex ("misc/keytry.wav");
g_trigger.c:304:	gi.soundindex ("misc/keyuse.wav");
g_trigger.c:337:			gi.centerprintf(activator, "%i more to go...", self->count);
g_trigger.c:338:			gi.sound (activator, CHAN_AUTO, gi.soundindex ("misc/talk1.wav"), 1, ATTN_NORM, 0);
g_trigger.c:345:		gi.centerprintf(activator, "Sequence completed!");
g_trigger.c:346:		gi.sound (activator, CHAN_AUTO, gi.soundindex ("misc/talk1.wav"), 1, ATTN_NORM, 0);
g_trigger.c:411:				gi.sound (other, CHAN_AUTO, windsound, 1, ATTN_NORM, 0);
g_trigger.c:427:	windsound = gi.soundindex ("misc/windfly.wav");
g_trigger.c:431:	gi.linkentity (self);
g_trigger.c:461:	gi.linkentity (self);
g_trigger.c:486:			gi.sound (other, CHAN_AUTO, self->noise_index, 1, ATTN_NORM, 0);
g_trigger.c:500:	self->noise_index = gi.soundindex ("world/electro.wav");
g_trigger.c:514:	gi.linkentity (self);
g_trigger.c:541:		gi.dprintf("trigger_gravity without gravity set at %s\n", vtos(self->s.origin));
g_turret.c:93:	gi.positioned_sound (start, self, CHAN_WEAPON, gi.soundindex("weapons/rocklf1a.wav"), 1, ATTN_NORM, 0);
g_turret.c:206:		gi.dprintf("%s at %s needs a target\n", self->classname, vtos(self->s.origin));
g_turret.c:224:	gi.setmodel (self, self->model);
g_turret.c:250:	gi.linkentity (self);
g_turret.c:263:	gi.setmodel (self, self->model);
g_turret.c:265:	gi.linkentity (self);
g_turret.c:397:	self->s.modelindex = gi.modelindex("models/monsters/infantry/tris.md2");
g_turret.c:425:			gi.dprintf("%s at %s has bad item: %s\n", self->classname, vtos(self->s.origin), st.item);
g_turret.c:431:	gi.linkentity (self);
g_utils.c:126:		gi.dprintf("G_PickTarget called with NULL targetname\n");
g_utils.c:142:		gi.dprintf("G_PickTarget: target %s not found\n", targetname);
g_utils.c:189:			gi.dprintf ("Think_Delay with no activator\n");
g_utils.c:202:		gi.centerprintf (activator, "%s", ent->message);
g_utils.c:204:			gi.sound (activator, CHAN_AUTO, ent->noise_index, 1, ATTN_NORM, 0);
g_utils.c:206:			gi.sound (activator, CHAN_AUTO, gi.soundindex ("misc/talk1.wav"), 1, ATTN_NORM, 0);
g_utils.c:220:				gi.dprintf("entity was removed while using killtargets\n");
g_utils.c:241:				gi.dprintf ("WARNING: Entity used itself.\n");
g_utils.c:250:				gi.dprintf("entity was removed while using targets\n");
g_utils.c:395:	out = gi.TagMalloc (strlen(in)+1, TAG_LEVEL);
g_utils.c:438:		gi.error ("ED_Alloc: no free edicts");
g_utils.c:454:	gi.unlinkentity (ed);		// unlink from world
g_utils.c:458://		gi.dprintf("tried to free special edict\n");
g_utils.c:484:	num = gi.BoxEdicts (ent->absmin, ent->absmax, touch
g_utils.c:513:	num = gi.BoxEdicts (ent->absmin, ent->absmax, touch
g_utils.c:555:		tr = gi.trace (ent->s.origin, ent->mins, ent->maxs, ent->s.origin, NULL, MASK_PLAYERSOLID);
g_weapon.c:46:	tr = gi.trace (start, NULL, NULL, end, self, MASK_SHOT);
g_weapon.c:94:	tr = gi.trace (self->s.origin, NULL, NULL, point, self, MASK_SHOT);
g_weapon.c:146:	tr = gi.trace (self->s.origin, NULL, NULL, start, self, MASK_SHOT);
g_weapon.c:158:		if (gi.pointcontents (start) & MASK_WATER)
g_weapon.c:165:		tr = gi.trace (start, NULL, NULL, end, self, content_mask);
g_weapon.c:193:					gi.WriteByte (svc_temp_entity);
g_weapon.c:194:					gi.WriteByte (TE_SPLASH);
g_weapon.c:195:					gi.WriteByte (8);
g_weapon.c:196:					gi.WritePosition (tr.endpos);
g_weapon.c:197:					gi.WriteDir (tr.plane.normal);
g_weapon.c:198:					gi.WriteByte (color);
g_weapon.c:199:					gi.multicast (tr.endpos, MULTICAST_PVS);
g_weapon.c:214:			tr = gi.trace (water_start, NULL, NULL, end, self, MASK_SHOT);
g_weapon.c:231:					gi.WriteByte (svc_temp_entity);
g_weapon.c:232:					gi.WriteByte (te_impact);
g_weapon.c:233:					gi.WritePosition (tr.endpos);
g_weapon.c:234:					gi.WriteDir (tr.plane.normal);
g_weapon.c:235:					gi.multicast (tr.endpos, MULTICAST_PVS);
g_weapon.c:252:		if (gi.pointcontents (pos) & MASK_WATER)
g_weapon.c:255:			tr = gi.trace (pos, NULL, NULL, water_start, tr.ent, MASK_WATER);
g_weapon.c:260:		gi.WriteByte (svc_temp_entity);
g_weapon.c:261:		gi.WriteByte (TE_BUBBLETRAIL);
g_weapon.c:262:		gi.WritePosition (water_start);
g_weapon.c:263:		gi.WritePosition (tr.endpos);
g_weapon.c:264:		gi.multicast (pos, MULTICAST_PVS);
g_weapon.c:332:		gi.WriteByte (svc_temp_entity);
g_weapon.c:333:		gi.WriteByte (TE_BLASTER);
g_weapon.c:334:		gi.WritePosition (self->s.origin);
g_weapon.c:336:			gi.WriteDir (vec3_origin);
g_weapon.c:338:			gi.WriteDir (plane->normal);
g_weapon.c:339:		gi.multicast (self->s.origin, MULTICAST_PVS);
g_weapon.c:369:	bolt->s.modelindex = gi.modelindex ("models/objects/laser/tris.md2");
g_weapon.c:370:	bolt->s.sound = gi.soundindex ("misc/lasfly.wav");
g_weapon.c:379:	gi.linkentity (bolt);
g_weapon.c:384:	tr = gi.trace (self->s.origin, NULL, NULL, bolt->s.origin, bolt, MASK_SHOT);
g_weapon.c:434:	gi.WriteByte (svc_temp_entity);
g_weapon.c:438:			gi.WriteByte (TE_GRENADE_EXPLOSION_WATER);
g_weapon.c:440:			gi.WriteByte (TE_ROCKET_EXPLOSION_WATER);
g_weapon.c:445:			gi.WriteByte (TE_GRENADE_EXPLOSION);
g_weapon.c:447:			gi.WriteByte (TE_ROCKET_EXPLOSION);
g_weapon.c:449:	gi.WritePosition (origin);
g_weapon.c:450:	gi.multicast (ent->s.origin, MULTICAST_PHS);
g_weapon.c:471:				gi.sound (ent, CHAN_VOICE, gi.soundindex ("weapons/hgrenb1a.wav"), 1, ATTN_NORM, 0);
g_weapon.c:473:				gi.sound (ent, CHAN_VOICE, gi.soundindex ("weapons/hgrenb2a.wav"), 1, ATTN_NORM, 0);
g_weapon.c:477:			gi.sound (ent, CHAN_VOICE, gi.soundindex ("weapons/grenlb1b.wav"), 1, ATTN_NORM, 0);
g_weapon.c:507:	grenade->s.modelindex = gi.modelindex ("models/objects/grenade/tris.md2");
g_weapon.c:516:	gi.linkentity (grenade);
g_weapon.c:540:	grenade->s.modelindex = gi.modelindex ("models/objects/grenade2/tris.md2");
g_weapon.c:552:	grenade->s.sound = gi.soundindex("weapons/hgrenc1b.wav");
g_weapon.c:558:		gi.sound (self, CHAN_WEAPON, gi.soundindex ("weapons/hgrent1a.wav"), 1, ATTN_NORM, 0);
g_weapon.c:559:		gi.linkentity (grenade);
g_weapon.c:609:	gi.WriteByte (svc_temp_entity);
g_weapon.c:611:		gi.WriteByte (TE_ROCKET_EXPLOSION_WATER);
g_weapon.c:613:		gi.WriteByte (TE_ROCKET_EXPLOSION);
g_weapon.c:614:	gi.WritePosition (origin);
g_weapon.c:615:	gi.multicast (ent->s.origin, MULTICAST_PHS);
g_weapon.c:635:	rocket->s.modelindex = gi.modelindex ("models/objects/rocket/tris.md2");
g_weapon.c:643:	rocket->s.sound = gi.soundindex ("weapons/rockfly.wav");
g_weapon.c:649:	gi.linkentity (rocket);
g_weapon.c:673:	  tr = gi.trace (from, NULL, NULL, end, ignore, mask);
g_weapon.c:697:	gi.WriteByte (svc_temp_entity);
g_weapon.c:698:	gi.WriteByte (TE_RAILTRAIL);
g_weapon.c:699:	gi.WritePosition (start);
g_weapon.c:700:	gi.WritePosition (tr.endpos);
g_weapon.c:701:	gi.multicast (self->s.origin, MULTICAST_PHS);
g_weapon.c:702://	gi.multicast (start, MULTICAST_PHS);
g_weapon.c:705:		gi.WriteByte (svc_temp_entity);
g_weapon.c:706:		gi.WriteByte (TE_RAILTRAIL);
g_weapon.c:707:		gi.WritePosition (start);
g_weapon.c:708:		gi.WritePosition (tr.endpos);
g_weapon.c:709:		gi.multicast (tr.endpos, MULTICAST_PHS);
g_weapon.c:752:			gi.WriteByte (svc_temp_entity);
g_weapon.c:753:			gi.WriteByte (TE_BFG_EXPLOSION);
g_weapon.c:754:			gi.WritePosition (ent->s.origin);
g_weapon.c:755:			gi.multicast (ent->s.origin, MULTICAST_PHS);
g_weapon.c:785:	gi.sound (self, CHAN_VOICE, gi.soundindex ("weapons/bfg__x1b.wav"), 1, ATTN_NORM, 0);
g_weapon.c:790:	self->s.modelindex = gi.modelindex ("sprites/s_bfg3.sp2");
g_weapon.c:798:	gi.WriteByte (svc_temp_entity);
g_weapon.c:799:	gi.WriteByte (TE_BFG_BIGEXPLOSION);
g_weapon.c:800:	gi.WritePosition (self->s.origin);
g_weapon.c:801:	gi.multicast (self->s.origin, MULTICAST_PVS);
g_weapon.c:846:			tr = gi.trace (start, NULL, NULL, end, ignore, CONTENTS_SOLID|CONTENTS_MONSTER|CONTENTS_DEADMONSTER);
g_weapon.c:858:				gi.WriteByte (svc_temp_entity);
g_weapon.c:859:				gi.WriteByte (TE_LASER_SPARKS);
g_weapon.c:860:				gi.WriteByte (4);
g_weapon.c:861:				gi.WritePosition (tr.endpos);
g_weapon.c:862:				gi.WriteDir (tr.plane.normal);
g_weapon.c:863:				gi.WriteByte (self->s.skinnum);
g_weapon.c:864:				gi.multicast (tr.endpos, MULTICAST_PVS);
g_weapon.c:872:		gi.WriteByte (svc_temp_entity);
g_weapon.c:873:		gi.WriteByte (TE_BFG_LASER);
g_weapon.c:874:		gi.WritePosition (self->s.origin);
g_weapon.c:875:		gi.WritePosition (tr.endpos);
g_weapon.c:876:		gi.multicast (self->s.origin, MULTICAST_PHS);
g_weapon.c:898:	bfg->s.modelindex = gi.modelindex ("sprites/s_bfg1.sp2");
g_weapon.c:906:	bfg->s.sound = gi.soundindex ("weapons/bfg__l1a.wav");
g_weapon.c:916:	gi.linkentity (bfg);
m_actor.c:241://	gi.sound (self, CHAN_VOICE, actor.sound_pain, 1, ATTN_NORM, 0);
m_actor.c:255:		gi.cprintf (other, PRINT_CHAT, "%s: %s!\n", name, messages[rand()%3]);
m_actor.c:306:	gi.linkentity (self);
m_actor.c:346://		gi.sound (self, CHAN_VOICE, actor.sound_gib, 1, ATTN_NORM, 0);
m_actor.c:360://	gi.sound (self, CHAN_VOICE, actor.sound_die, 1, ATTN_NORM, 0);
m_actor.c:408:		gi.dprintf ("%s has bad target %s at %s\n", self->classname, self->target, vtos(self->s.origin));
m_actor.c:435:		gi.dprintf("untargeted %s at %s\n", self->classname, vtos(self->s.origin));
m_actor.c:442:		gi.dprintf("%s with no target at %s\n", self->classname, vtos(self->s.origin));
m_actor.c:449:	self->s.modelindex = gi.modelindex("players/male/tris.md2");
m_actor.c:469:	gi.linkentity (self);
m_actor.c:518:			gi.cprintf (ent, PRINT_CHAT, "%s: %s\n", actor_names[(other - g_edicts)%MAX_ACTOR_NAMES], self->message);
m_actor.c:531:			gi.sound(other, CHAN_VOICE, gi.soundindex("player/male/jump1.wav"), 1, ATTN_NORM, 0);
m_actor.c:588:		gi.dprintf ("%s with no targetname at %s\n", self->classname, vtos(self->s.origin));
m_actor.c:608:	gi.linkentity (self);
m_berserk.c:41:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_berserk.c:46:	gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_NORM, 0);
m_berserk.c:99:	gi.sound (self, CHAN_WEAPON, sound_idle, 1, ATTN_IDLE, 0);
m_berserk.c:179:	gi.sound (self, CHAN_WEAPON, sound_punch, 1, ATTN_NORM, 0);
m_berserk.c:324:	gi.sound (self, CHAN_VOICE, sound_pain, 1, ATTN_NORM, 0);
m_berserk.c:343:	gi.linkentity (self);
m_berserk.c:387:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_berserk.c:400:	gi.sound (self, CHAN_VOICE, sound_die, 1, ATTN_NORM, 0);
m_berserk.c:422:	sound_pain  = gi.soundindex ("berserk/berpain2.wav");
m_berserk.c:423:	sound_die   = gi.soundindex ("berserk/berdeth2.wav");
m_berserk.c:424:	sound_idle  = gi.soundindex ("berserk/beridle1.wav");
m_berserk.c:425:	sound_punch = gi.soundindex ("berserk/attack.wav");
m_berserk.c:426:	sound_search = gi.soundindex ("berserk/bersrch1.wav");
m_berserk.c:427:	sound_sight = gi.soundindex ("berserk/sight.wav");
m_berserk.c:429:	self->s.modelindex = gi.modelindex("models/monsters/berserk/tris.md2");
m_berserk.c:454:	gi.linkentity (self);
m_boss2.c:44:		gi.sound (self, CHAN_VOICE, sound_search1, 1, ATTN_NONE, 0);
m_boss2.c:482:		gi.sound (self, CHAN_VOICE, sound_pain3, 1, ATTN_NONE, 0);
m_boss2.c:487:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NONE, 0);
m_boss2.c:492:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NONE, 0);
m_boss2.c:504:	gi.linkentity (self);
m_boss2.c:509:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NONE, 0);
m_boss2.c:521:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_boss2.c:558:		tr = gi.trace (spot1, NULL, NULL, spot2, self, CONTENTS_SOLID|CONTENTS_MONSTER|CONTENTS_SLIME|CONTENTS_LAVA);
m_boss2.c:644:	sound_pain1 = gi.soundindex ("bosshovr/bhvpain1.wav");
m_boss2.c:645:	sound_pain2 = gi.soundindex ("bosshovr/bhvpain2.wav");
m_boss2.c:646:	sound_pain3 = gi.soundindex ("bosshovr/bhvpain3.wav");
m_boss2.c:647:	sound_death = gi.soundindex ("bosshovr/bhvdeth1.wav");
m_boss2.c:648:	sound_search1 = gi.soundindex ("bosshovr/bhvunqv1.wav");
m_boss2.c:650:	self->s.sound = gi.soundindex ("bosshovr/bhvengn1.wav");
m_boss2.c:654:	self->s.modelindex = gi.modelindex ("models/monsters/boss2/tris.md2");
m_boss2.c:673:	gi.linkentity (self);
m_boss31.c:60:		gi.sound (self, CHAN_VOICE, sound_search1, 1, ATTN_NORM, 0);
m_boss31.c:62:		gi.sound (self, CHAN_VOICE, sound_search2, 1, ATTN_NORM, 0);
m_boss31.c:64:		gi.sound (self, CHAN_VOICE, sound_search3, 1, ATTN_NORM, 0);
m_boss31.c:141:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_NORM,0);
m_boss31.c:146:	gi.sound (self, CHAN_BODY, sound_death_hit, 1, ATTN_NORM,0);
m_boss31.c:152:	gi.sound (self, CHAN_BODY, sound_step_left, 1, ATTN_NORM,0);
m_boss31.c:157:	gi.sound (self, CHAN_BODY, sound_step_right, 1, ATTN_NORM,0);
m_boss31.c:457:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM,0);
m_boss31.c:462:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM,0);
m_boss31.c:469:			gi.sound (self, CHAN_VOICE, sound_pain3, 1, ATTN_NORM,0);
m_boss31.c:489:	gi.sound (self, CHAN_VOICE, sound_attack2, 1, ATTN_NORM, 0);
m_boss31.c:549:		gi.sound (self, CHAN_VOICE, sound_attack1, 1, ATTN_NORM,0);
m_boss31.c:550:		self->s.sound = gi.soundindex ("boss3/w_loop.wav");
m_boss31.c:555:		gi.sound (self, CHAN_VOICE, sound_attack2, 1, ATTN_NORM,0);
m_boss31.c:574:	gi.linkentity (self);
m_boss31.c:591:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_boss31.c:617:		tr = gi.trace (spot1, NULL, NULL, spot2, self, CONTENTS_SOLID|CONTENTS_MONSTER|CONTENTS_SLIME|CONTENTS_LAVA);
m_boss31.c:704:	sound_pain1 = gi.soundindex ("boss3/bs3pain1.wav");
m_boss31.c:705:	sound_pain2 = gi.soundindex ("boss3/bs3pain2.wav");
m_boss31.c:706:	sound_pain3 = gi.soundindex ("boss3/bs3pain3.wav");
m_boss31.c:707:	sound_death = gi.soundindex ("boss3/bs3deth1.wav");
m_boss31.c:708:	sound_attack1 = gi.soundindex ("boss3/bs3atck1.wav");
m_boss31.c:709:	sound_attack2 = gi.soundindex ("boss3/bs3atck2.wav");
m_boss31.c:710:	sound_search1 = gi.soundindex ("boss3/bs3srch1.wav");
m_boss31.c:711:	sound_search2 = gi.soundindex ("boss3/bs3srch2.wav");
m_boss31.c:712:	sound_search3 = gi.soundindex ("boss3/bs3srch3.wav");
m_boss31.c:713:	sound_idle = gi.soundindex ("boss3/bs3idle1.wav");
m_boss31.c:714:	sound_step_left = gi.soundindex ("boss3/step1.wav");
m_boss31.c:715:	sound_step_right = gi.soundindex ("boss3/step2.wav");
m_boss31.c:716:	sound_firegun = gi.soundindex ("boss3/xfire.wav");
m_boss31.c:717:	sound_death_hit = gi.soundindex ("boss3/d_hit.wav");
m_boss31.c:723:	self->s.modelindex = gi.modelindex ("models/monsters/boss3/rider/tris.md2");
m_boss31.c:724:	self->s.modelindex2 = gi.modelindex ("models/monsters/boss3/jorg/tris.md2");
m_boss31.c:743:	gi.linkentity (self);
m_boss32.c:62:		gi.sound (self, CHAN_AUTO, sound_taunt1, 1, ATTN_NONE, 0);
m_boss32.c:64:		gi.sound (self, CHAN_AUTO, sound_taunt2, 1, ATTN_NONE, 0);
m_boss32.c:66:		gi.sound (self, CHAN_AUTO, sound_taunt3, 1, ATTN_NONE, 0);
m_boss32.c:160:	gi.sound (self, CHAN_AUTO, sound_hit, 1, ATTN_NONE,0);
m_boss32.c:165:	gi.sound (self, CHAN_BODY, sound_popup, 1, ATTN_NONE,0);
m_boss32.c:170:	gi.sound (self, CHAN_BODY, sound_step_left, 1, ATTN_NORM,0);
m_boss32.c:175:	gi.sound (self, CHAN_BODY, sound_step_right, 1, ATTN_NORM,0);
m_boss32.c:180:	gi.sound (self, CHAN_VOICE, sound_brainsplorch, 1, ATTN_NORM,0);
m_boss32.c:185:	gi.sound (self, CHAN_WEAPON, sound_prerailgun, 1, ATTN_NORM,0);
m_boss32.c:424:	gi.sound (self, CHAN_VOICE, sound_attack_bfg, 1, ATTN_NORM, 0);
m_boss32.c:576:		gi.sound (self, CHAN_VOICE, sound_pain4, 1, ATTN_NONE,0);
m_boss32.c:581:		gi.sound (self, CHAN_VOICE, sound_pain5, 1, ATTN_NONE,0);
m_boss32.c:590:				gi.sound (self, CHAN_VOICE, sound_pain6, 1, ATTN_NONE,0);
m_boss32.c:596:				gi.sound (self, CHAN_VOICE, sound_pain6, 1, ATTN_NONE,0);
m_boss32.c:652:	ent->s.modelindex = gi.modelindex ("models/monsters/boss3/rider/tris.md2");
m_boss32.c:655:	ent->s.sound = gi.soundindex ("makron/spine.wav");
m_boss32.c:656:	gi.linkentity (ent);
m_boss32.c:671:	gi.linkentity (self);
m_boss32.c:685:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_boss32.c:699:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NONE, 0);
m_boss32.c:731:		tr = gi.trace (spot1, NULL, NULL, spot2, self, CONTENTS_SOLID|CONTENTS_MONSTER|CONTENTS_SLIME|CONTENTS_LAVA);
m_boss32.c:812:	sound_pain4 = gi.soundindex ("makron/pain3.wav");
m_boss32.c:813:	sound_pain5 = gi.soundindex ("makron/pain2.wav");
m_boss32.c:814:	sound_pain6 = gi.soundindex ("makron/pain1.wav");
m_boss32.c:815:	sound_death = gi.soundindex ("makron/death.wav");
m_boss32.c:816:	sound_step_left = gi.soundindex ("makron/step1.wav");
m_boss32.c:817:	sound_step_right = gi.soundindex ("makron/step2.wav");
m_boss32.c:818:	sound_attack_bfg = gi.soundindex ("makron/bfg_fire.wav");
m_boss32.c:819:	sound_brainsplorch = gi.soundindex ("makron/brain1.wav");
m_boss32.c:820:	sound_prerailgun = gi.soundindex ("makron/rail_up.wav");
m_boss32.c:821:	sound_popup = gi.soundindex ("makron/popup.wav");
m_boss32.c:822:	sound_taunt1 = gi.soundindex ("makron/voice4.wav");
m_boss32.c:823:	sound_taunt2 = gi.soundindex ("makron/voice3.wav");
m_boss32.c:824:	sound_taunt3 = gi.soundindex ("makron/voice.wav");
m_boss32.c:825:	sound_hit = gi.soundindex ("makron/bhit.wav");
m_boss32.c:827:	gi.modelindex ("models/monsters/boss3/rider/tris.md2");
m_boss32.c:844:	self->s.modelindex = gi.modelindex ("models/monsters/boss3/rider/tris.md2");
m_boss32.c:863:	gi.linkentity (self);
m_boss3.c:33:	gi.WriteByte (svc_temp_entity);
m_boss3.c:34:	gi.WriteByte (TE_BOSSTPORT);
m_boss3.c:35:	gi.WritePosition (ent->s.origin);
m_boss3.c:36:	gi.multicast (ent->s.origin, MULTICAST_PVS);
m_boss3.c:64:	self->s.modelindex = gi.modelindex (self->model);
m_boss3.c:67:	gi.soundindex ("misc/bigtele.wav");
m_boss3.c:75:	gi.linkentity (self);
m_brain.c:50:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_brain.c:55:	gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_NORM, 0);
m_brain.c:153:	gi.sound (self, CHAN_AUTO, sound_idle3, 1, ATTN_IDLE, 0);
m_brain.c:320:	gi.linkentity (self);
m_brain.c:336:	gi.linkentity (self);
m_brain.c:405:	gi.sound (self, CHAN_BODY, sound_melee1, 1, ATTN_NORM, 0);
m_brain.c:414:		gi.sound (self, CHAN_WEAPON, sound_melee3, 1, ATTN_NORM, 0);
m_brain.c:419:	gi.sound (self, CHAN_BODY, sound_melee2, 1, ATTN_NORM, 0);
m_brain.c:428:		gi.sound (self, CHAN_WEAPON, sound_melee3, 1, ATTN_NORM, 0);
m_brain.c:458:	gi.sound (self, CHAN_BODY, sound_chest_open, 1, ATTN_NORM, 0);
m_brain.c:468:	gi.sound (self, CHAN_WEAPON, sound_tentacles_retract, 1, ATTN_NORM, 0);
m_brain.c:559:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_brain.c:564:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_brain.c:569:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_brain.c:581:	gi.linkentity (self);
m_brain.c:596:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_brain.c:610:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_brain.c:629:	sound_chest_open = gi.soundindex ("brain/brnatck1.wav");
m_brain.c:630:	sound_tentacles_extend = gi.soundindex ("brain/brnatck2.wav");
m_brain.c:631:	sound_tentacles_retract = gi.soundindex ("brain/brnatck3.wav");
m_brain.c:632:	sound_death = gi.soundindex ("brain/brndeth1.wav");
m_brain.c:633:	sound_idle1 = gi.soundindex ("brain/brnidle1.wav");
m_brain.c:634:	sound_idle2 = gi.soundindex ("brain/brnidle2.wav");
m_brain.c:635:	sound_idle3 = gi.soundindex ("brain/brnlens1.wav");
m_brain.c:636:	sound_pain1 = gi.soundindex ("brain/brnpain1.wav");
m_brain.c:637:	sound_pain2 = gi.soundindex ("brain/brnpain2.wav");
m_brain.c:638:	sound_sight = gi.soundindex ("brain/brnsght1.wav");
m_brain.c:639:	sound_search = gi.soundindex ("brain/brnsrch1.wav");
m_brain.c:640:	sound_melee1 = gi.soundindex ("brain/melee1.wav");
m_brain.c:641:	sound_melee2 = gi.soundindex ("brain/melee2.wav");
m_brain.c:642:	sound_melee3 = gi.soundindex ("brain/melee3.wav");
m_brain.c:646:	self->s.modelindex = gi.modelindex ("models/monsters/brain/tris.md2");
m_brain.c:670:	gi.linkentity (self);
m_chick.c:59:		gi.sound (self, CHAN_VOICE, sound_idle1, 1, ATTN_IDLE, 0);
m_chick.c:61:		gi.sound (self, CHAN_VOICE, sound_idle2, 1, ATTN_IDLE, 0);
m_chick.c:280:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_chick.c:282:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_chick.c:284:		gi.sound (self, CHAN_VOICE, sound_pain3, 1, ATTN_NORM, 0);
m_chick.c:304:	gi.linkentity (self);
m_chick.c:360:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_chick.c:381:		gi.sound (self, CHAN_VOICE, sound_death1, 1, ATTN_NORM, 0);
m_chick.c:386:		gi.sound (self, CHAN_VOICE, sound_death2, 1, ATTN_NORM, 0);
m_chick.c:399:	gi.linkentity (self);
m_chick.c:415:	gi.linkentity (self);
m_chick.c:446:	gi.sound (self, CHAN_WEAPON, sound_melee_swing, 1, ATTN_NORM, 0);
m_chick.c:471:	gi.sound (self, CHAN_VOICE, sound_missile_prelaunch, 1, ATTN_NORM, 0);
m_chick.c:476:	gi.sound (self, CHAN_VOICE, sound_missile_reload, 1, ATTN_NORM, 0);
m_chick.c:623:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_chick.c:636:	sound_missile_prelaunch	= gi.soundindex ("chick/chkatck1.wav");	
m_chick.c:637:	sound_missile_launch	= gi.soundindex ("chick/chkatck2.wav");	
m_chick.c:638:	sound_melee_swing		= gi.soundindex ("chick/chkatck3.wav");	
m_chick.c:639:	sound_melee_hit			= gi.soundindex ("chick/chkatck4.wav");	
m_chick.c:640:	sound_missile_reload	= gi.soundindex ("chick/chkatck5.wav");	
m_chick.c:641:	sound_death1			= gi.soundindex ("chick/chkdeth1.wav");	
m_chick.c:642:	sound_death2			= gi.soundindex ("chick/chkdeth2.wav");	
m_chick.c:643:	sound_fall_down			= gi.soundindex ("chick/chkfall1.wav");	
m_chick.c:644:	sound_idle1				= gi.soundindex ("chick/chkidle1.wav");	
m_chick.c:645:	sound_idle2				= gi.soundindex ("chick/chkidle2.wav");	
m_chick.c:646:	sound_pain1				= gi.soundindex ("chick/chkpain1.wav");	
m_chick.c:647:	sound_pain2				= gi.soundindex ("chick/chkpain2.wav");	
m_chick.c:648:	sound_pain3				= gi.soundindex ("chick/chkpain3.wav");	
m_chick.c:649:	sound_sight				= gi.soundindex ("chick/chksght1.wav");	
m_chick.c:650:	sound_search			= gi.soundindex ("chick/chksrch1.wav");	
m_chick.c:654:	self->s.modelindex = gi.modelindex ("models/monsters/bitch/tris.md2");
m_chick.c:673:	gi.linkentity (self);
m_flipper.c:190:	gi.sound (self, CHAN_WEAPON, sound_chomp, 1, ATTN_NORM, 0);
m_flipper.c:241:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_flipper.c:246:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_flipper.c:258:	gi.linkentity (self);
m_flipper.c:329:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_flipper.c:339:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_flipper.c:353:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_flipper.c:369:	sound_pain1		= gi.soundindex ("flipper/flppain1.wav");	
m_flipper.c:370:	sound_pain2		= gi.soundindex ("flipper/flppain2.wav");	
m_flipper.c:371:	sound_death		= gi.soundindex ("flipper/flpdeth1.wav");	
m_flipper.c:372:	sound_chomp		= gi.soundindex ("flipper/flpatck1.wav");
m_flipper.c:373:	sound_attack	= gi.soundindex ("flipper/flpatck2.wav");
m_flipper.c:374:	sound_idle		= gi.soundindex ("flipper/flpidle1.wav");
m_flipper.c:375:	sound_search	= gi.soundindex ("flipper/flpsrch1.wav");
m_flipper.c:376:	sound_sight		= gi.soundindex ("flipper/flpsght1.wav");
m_flipper.c:380:	self->s.modelindex = gi.modelindex ("models/monsters/flipper/tris.md2");
m_flipper.c:397:	gi.linkentity (self);
m_float.c:43:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_float.c:48:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_float.c:518:	gi.sound (self, CHAN_WEAPON, sound_attack3, 1, ATTN_NORM, 0);
m_float.c:537:	gi.sound (self, CHAN_WEAPON, sound_attack2, 1, ATTN_NORM, 0);
m_float.c:540:	gi.WriteByte (svc_temp_entity);
m_float.c:541:	gi.WriteByte (TE_SPLASH);
m_float.c:542:	gi.WriteByte (32);
m_float.c:543:	gi.WritePosition (origin);
m_float.c:544:	gi.WriteDir (dir);
m_float.c:545:	gi.WriteByte (1);	//sparks
m_float.c:546:	gi.multicast (origin, MULTICAST_PVS);
m_float.c:583:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_float.c:588:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_float.c:600:	gi.linkentity (self);
m_float.c:605:	gi.sound (self, CHAN_VOICE, sound_death1, 1, ATTN_NORM, 0);
m_float.c:619:	sound_attack2 = gi.soundindex ("floater/fltatck2.wav");
m_float.c:620:	sound_attack3 = gi.soundindex ("floater/fltatck3.wav");
m_float.c:621:	sound_death1 = gi.soundindex ("floater/fltdeth1.wav");
m_float.c:622:	sound_idle = gi.soundindex ("floater/fltidle1.wav");
m_float.c:623:	sound_pain1 = gi.soundindex ("floater/fltpain1.wav");
m_float.c:624:	sound_pain2 = gi.soundindex ("floater/fltpain2.wav");
m_float.c:625:	sound_sight = gi.soundindex ("floater/fltsght1.wav");
m_float.c:627:	gi.soundindex ("floater/fltatck1.wav");
m_float.c:629:	self->s.sound = gi.soundindex ("floater/fltsrch1.wav");
m_float.c:633:	self->s.modelindex = gi.modelindex ("models/monsters/float/tris.md2");
m_float.c:653:	gi.linkentity (self);
m_flyer.c:54:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_flyer.c:59:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_flyer.c:64:	gi.sound (self, CHAN_VOICE, sound_sproing, 1, ATTN_NORM, 0);
m_flyer.c:429:	gi.sound (self, CHAN_WEAPON, sound_slash, 1, ATTN_NORM, 0);
m_flyer.c:438:	gi.sound (self, CHAN_WEAPON, sound_slash, 1, ATTN_NORM, 0);
m_flyer.c:548:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_flyer.c:553:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_flyer.c:558:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_flyer.c:566:	gi.sound (self, CHAN_VOICE, sound_die, 1, ATTN_NORM, 0);
m_flyer.c:588:	sound_sight = gi.soundindex ("flyer/flysght1.wav");
m_flyer.c:589:	sound_idle = gi.soundindex ("flyer/flysrch1.wav");
m_flyer.c:590:	sound_pain1 = gi.soundindex ("flyer/flypain1.wav");
m_flyer.c:591:	sound_pain2 = gi.soundindex ("flyer/flypain2.wav");
m_flyer.c:592:	sound_slash = gi.soundindex ("flyer/flyatck2.wav");
m_flyer.c:593:	sound_sproing = gi.soundindex ("flyer/flyatck1.wav");
m_flyer.c:594:	sound_die = gi.soundindex ("flyer/flydeth1.wav");
m_flyer.c:596:	gi.soundindex ("flyer/flyatck3.wav");
m_flyer.c:598:	self->s.modelindex = gi.modelindex ("models/monsters/flyer/tris.md2");
m_flyer.c:604:	self->s.sound = gi.soundindex ("flyer/flyidle1.wav");
m_flyer.c:620:	gi.linkentity (self);
m_gladiator.c:46:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_gladiator.c:51:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_gladiator.c:56:	gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_NORM, 0);
m_gladiator.c:61:	gi.sound (self, CHAN_WEAPON, sound_cleaver_swing, 1, ATTN_NORM, 0);
m_gladiator.c:135:		gi.sound (self, CHAN_AUTO, sound_cleaver_hit, 1, ATTN_NORM, 0);
m_gladiator.c:137:		gi.sound (self, CHAN_AUTO, sound_cleaver_miss, 1, ATTN_NORM, 0);
m_gladiator.c:210:	gi.sound (self, CHAN_WEAPON, sound_gun, 1, ATTN_NORM, 0);
m_gladiator.c:256:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_gladiator.c:258:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_gladiator.c:278:	gi.linkentity (self);
m_gladiator.c:315:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_gladiator.c:329:	gi.sound (self, CHAN_VOICE, sound_die, 1, ATTN_NORM, 0);
m_gladiator.c:348:	sound_pain1 = gi.soundindex ("gladiator/pain.wav");	
m_gladiator.c:349:	sound_pain2 = gi.soundindex ("gladiator/gldpain2.wav");	
m_gladiator.c:350:	sound_die = gi.soundindex ("gladiator/glddeth2.wav");	
m_gladiator.c:351:	sound_gun = gi.soundindex ("gladiator/railgun.wav");
m_gladiator.c:352:	sound_cleaver_swing = gi.soundindex ("gladiator/melee1.wav");
m_gladiator.c:353:	sound_cleaver_hit = gi.soundindex ("gladiator/melee2.wav");
m_gladiator.c:354:	sound_cleaver_miss = gi.soundindex ("gladiator/melee3.wav");
m_gladiator.c:355:	sound_idle = gi.soundindex ("gladiator/gldidle1.wav");
m_gladiator.c:356:	sound_search = gi.soundindex ("gladiator/gldsrch1.wav");
m_gladiator.c:357:	sound_sight = gi.soundindex ("gladiator/sight.wav");
m_gladiator.c:361:	self->s.modelindex = gi.modelindex ("models/monsters/gladiatr/tris.md2");
m_gladiator.c:382:	gi.linkentity (self);
m_gunner.c:43:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_gunner.c:48:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_gunner.c:53:	gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_NORM, 0);
m_gunner.c:294:		gi.sound (self, CHAN_VOICE, sound_pain, 1, ATTN_NORM, 0);
m_gunner.c:296:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_gunner.c:316:	gi.linkentity (self);
m_gunner.c:342:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_gunner.c:356:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_gunner.c:377:	gi.linkentity (self);
m_gunner.c:393:	gi.linkentity (self);
m_gunner.c:423:	gi.sound (self, CHAN_VOICE, sound_open, 1, ATTN_IDLE, 0);
m_gunner.c:589:	sound_death = gi.soundindex ("gunner/death1.wav");	
m_gunner.c:590:	sound_pain = gi.soundindex ("gunner/gunpain2.wav");	
m_gunner.c:591:	sound_pain2 = gi.soundindex ("gunner/gunpain1.wav");	
m_gunner.c:592:	sound_idle = gi.soundindex ("gunner/gunidle1.wav");	
m_gunner.c:593:	sound_open = gi.soundindex ("gunner/gunatck1.wav");	
m_gunner.c:594:	sound_search = gi.soundindex ("gunner/gunsrch1.wav");	
m_gunner.c:595:	sound_sight = gi.soundindex ("gunner/sight1.wav");	
m_gunner.c:597:	gi.soundindex ("gunner/gunatck2.wav");
m_gunner.c:598:	gi.soundindex ("gunner/gunatck3.wav");
m_gunner.c:602:	self->s.modelindex = gi.modelindex ("models/monsters/gunner/tris.md2");
m_gunner.c:622:	gi.linkentity (self);
m_hover.c:45:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_hover.c:51:		gi.sound (self, CHAN_VOICE, sound_search1, 1, ATTN_NORM, 0);
m_hover.c:53:		gi.sound (self, CHAN_VOICE, sound_search2, 1, ATTN_NORM, 0);
m_hover.c:504:			gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_hover.c:509:			gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_hover.c:515:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_hover.c:538:	gi.linkentity (self);
m_hover.c:548:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_hover.c:563:		gi.sound (self, CHAN_VOICE, sound_death1, 1, ATTN_NORM, 0);
m_hover.c:565:		gi.sound (self, CHAN_VOICE, sound_death2, 1, ATTN_NORM, 0);
m_hover.c:581:	sound_pain1 = gi.soundindex ("hover/hovpain1.wav");	
m_hover.c:582:	sound_pain2 = gi.soundindex ("hover/hovpain2.wav");	
m_hover.c:583:	sound_death1 = gi.soundindex ("hover/hovdeth1.wav");	
m_hover.c:584:	sound_death2 = gi.soundindex ("hover/hovdeth2.wav");	
m_hover.c:585:	sound_sight = gi.soundindex ("hover/hovsght1.wav");	
m_hover.c:586:	sound_search1 = gi.soundindex ("hover/hovsrch1.wav");	
m_hover.c:587:	sound_search2 = gi.soundindex ("hover/hovsrch2.wav");	
m_hover.c:589:	gi.soundindex ("hover/hovatck1.wav");	
m_hover.c:591:	self->s.sound = gi.soundindex ("hover/hovidle1.wav");
m_hover.c:595:	self->s.modelindex = gi.modelindex("models/monsters/hover/tris.md2");
m_hover.c:614:	gi.linkentity (self);
m_infantry.c:138:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_infantry.c:234:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_infantry.c:239:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_infantry.c:301:	gi.sound (self, CHAN_BODY, sound_sight, 1, ATTN_NORM, 0);
m_infantry.c:310:	gi.linkentity (self);
m_infantry.c:393:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_infantry.c:414:		gi.sound (self, CHAN_VOICE, sound_die2, 1, ATTN_NORM, 0);
m_infantry.c:419:		gi.sound (self, CHAN_VOICE, sound_die1, 1, ATTN_NORM, 0);
m_infantry.c:424:		gi.sound (self, CHAN_VOICE, sound_die2, 1, ATTN_NORM, 0);
m_infantry.c:437:	gi.linkentity (self);
m_infantry.c:453:	gi.linkentity (self);
m_infantry.c:482:	gi.sound (self, CHAN_WEAPON, sound_weapon_cock, 1, ATTN_NORM, 0);
m_infantry.c:520:	gi.sound (self, CHAN_WEAPON, sound_punch_swing, 1, ATTN_NORM, 0);
m_infantry.c:529:		gi.sound (self, CHAN_WEAPON, sound_punch_hit, 1, ATTN_NORM, 0);
m_infantry.c:564:	sound_pain1 = gi.soundindex ("infantry/infpain1.wav");
m_infantry.c:565:	sound_pain2 = gi.soundindex ("infantry/infpain2.wav");
m_infantry.c:566:	sound_die1 = gi.soundindex ("infantry/infdeth1.wav");
m_infantry.c:567:	sound_die2 = gi.soundindex ("infantry/infdeth2.wav");
m_infantry.c:569:	sound_gunshot = gi.soundindex ("infantry/infatck1.wav");
m_infantry.c:570:	sound_weapon_cock = gi.soundindex ("infantry/infatck3.wav");
m_infantry.c:571:	sound_punch_swing = gi.soundindex ("infantry/infatck2.wav");
m_infantry.c:572:	sound_punch_hit = gi.soundindex ("infantry/melee2.wav");
m_infantry.c:574:	sound_sight = gi.soundindex ("infantry/infsght1.wav");
m_infantry.c:575:	sound_search = gi.soundindex ("infantry/infsrch1.wav");
m_infantry.c:576:	sound_idle = gi.soundindex ("infantry/infidle1.wav");
m_infantry.c:581:	self->s.modelindex = gi.modelindex("models/monsters/infantry/tris.md2");
m_infantry.c:601:	gi.linkentity (self);
m_insane.c:39:	gi.sound (self, CHAN_VOICE, sound_fist, 1, ATTN_IDLE, 0);
m_insane.c:44:	gi.sound (self, CHAN_VOICE, sound_shake, 1, ATTN_IDLE, 0);
m_insane.c:49:	gi.sound (self, CHAN_VOICE, sound_moan, 1, ATTN_IDLE, 0);
m_insane.c:54:	gi.sound (self, CHAN_VOICE, sound_scream[rand()%8], 1, ATTN_IDLE, 0);
m_insane.c:498:	gi.sound (self, CHAN_VOICE, gi.soundindex (va("player/male/pain%i_%i.wav", l, r)), 1, ATTN_IDLE, 0);
m_insane.c:579:	gi.linkentity (self);
m_insane.c:589:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_IDLE, 0);
m_insane.c:602:	gi.sound (self, CHAN_VOICE, gi.soundindex(va("player/male/death%i.wav", (rand()%4)+1)), 1, ATTN_IDLE, 0);
m_insane.c:633:	sound_fist = gi.soundindex ("insane/insane11.wav");
m_insane.c:634:	sound_shake = gi.soundindex ("insane/insane5.wav");
m_insane.c:635:	sound_moan = gi.soundindex ("insane/insane7.wav");
m_insane.c:636:	sound_scream[0] = gi.soundindex ("insane/insane1.wav");
m_insane.c:637:	sound_scream[1] = gi.soundindex ("insane/insane2.wav");
m_insane.c:638:	sound_scream[2] = gi.soundindex ("insane/insane3.wav");
m_insane.c:639:	sound_scream[3] = gi.soundindex ("insane/insane4.wav");
m_insane.c:640:	sound_scream[4] = gi.soundindex ("insane/insane6.wav");
m_insane.c:641:	sound_scream[5] = gi.soundindex ("insane/insane8.wav");
m_insane.c:642:	sound_scream[6] = gi.soundindex ("insane/insane9.wav");
m_insane.c:643:	sound_scream[7] = gi.soundindex ("insane/insane10.wav");
m_insane.c:647:	self->s.modelindex = gi.modelindex("models/monsters/insane/tris.md2");
m_insane.c:674:	gi.linkentity (self);
m_medic.c:84:	gi.sound (self, CHAN_VOICE, sound_idle1, 1, ATTN_IDLE, 0);
m_medic.c:100:	gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_IDLE, 0);
m_medic.c:118:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_medic.c:333:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_medic.c:338:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_medic.c:375:	gi.linkentity (self);
m_medic.c:424:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_medic.c:438:	gi.sound (self, CHAN_VOICE, sound_die, 1, ATTN_NORM, 0);
m_medic.c:454:	gi.linkentity (self);
m_medic.c:470:	gi.linkentity (self);
m_medic.c:557:	gi.sound (self, CHAN_WEAPON, sound_hook_launch, 1, ATTN_NORM, 0);
m_medic.c:603:	tr = gi.trace (start, NULL, NULL, self->enemy->s.origin, self, MASK_SHOT);
m_medic.c:609:		gi.sound (self->enemy, CHAN_AUTO, sound_hook_hit, 1, ATTN_NORM, 0);
m_medic.c:638:			gi.sound (self, CHAN_WEAPON, sound_hook_heal, 1, ATTN_NORM, 0);
m_medic.c:648:	gi.WriteByte (svc_temp_entity);
m_medic.c:649:	gi.WriteByte (TE_MEDIC_CABLE_ATTACK);
m_medic.c:650:	gi.WriteShort (self - g_edicts);
m_medic.c:651:	gi.WritePosition (start);
m_medic.c:652:	gi.WritePosition (end);
m_medic.c:653:	gi.multicast (self->s.origin, MULTICAST_PVS);
m_medic.c:658:	gi.sound (self, CHAN_WEAPON, sound_hook_retract, 1, ATTN_NORM, 0);
m_medic.c:726:	sound_idle1 = gi.soundindex ("medic/idle.wav");
m_medic.c:727:	sound_pain1 = gi.soundindex ("medic/medpain1.wav");
m_medic.c:728:	sound_pain2 = gi.soundindex ("medic/medpain2.wav");
m_medic.c:729:	sound_die = gi.soundindex ("medic/meddeth1.wav");
m_medic.c:730:	sound_sight = gi.soundindex ("medic/medsght1.wav");
m_medic.c:731:	sound_search = gi.soundindex ("medic/medsrch1.wav");
m_medic.c:732:	sound_hook_launch = gi.soundindex ("medic/medatck2.wav");
m_medic.c:733:	sound_hook_hit = gi.soundindex ("medic/medatck3.wav");
m_medic.c:734:	sound_hook_heal = gi.soundindex ("medic/medatck4.wav");
m_medic.c:735:	sound_hook_retract = gi.soundindex ("medic/medatck5.wav");
m_medic.c:737:	gi.soundindex ("medic/medatck1.wav");
m_medic.c:741:	self->s.modelindex = gi.modelindex ("models/monsters/medic/tris.md2");
m_medic.c:763:	gi.linkentity (self);
m_move.c:56:			if (gi.pointcontents (start) != CONTENTS_SOLID)
m_move.c:74:	trace = gi.trace (start, vec3_origin, vec3_origin, stop, ent, MASK_MONSTERSOLID);
m_move.c:87:			trace = gi.trace (start, vec3_origin, vec3_origin, stop, ent, MASK_MONSTERSOLID);
m_move.c:158:			trace = gi.trace (ent->s.origin, ent->mins, ent->maxs, neworg, ent, MASK_MONSTERSOLID);
m_move.c:168:					contents = gi.pointcontents(test);
m_move.c:182:					contents = gi.pointcontents(test);
m_move.c:193:					gi.linkentity (ent);
m_move.c:216:	trace = gi.trace (neworg, ent->mins, ent->maxs, end, ent, MASK_MONSTERSOLID);
m_move.c:224:		trace = gi.trace (neworg, ent->mins, ent->maxs, end, ent, MASK_MONSTERSOLID);
m_move.c:236:		contents = gi.pointcontents(test);
m_move.c:250:				gi.linkentity (ent);
m_move.c:270:				gi.linkentity (ent);
m_move.c:289:		gi.linkentity (ent);
m_move.c:374:		gi.linkentity (ent);
m_move.c:378:	gi.linkentity (ent);
m_mutant.c:55:		gi.sound (self, CHAN_VOICE, sound_step1, 1, ATTN_NORM, 0);		
m_mutant.c:57:		gi.sound (self, CHAN_VOICE, sound_step2, 1, ATTN_NORM, 0);
m_mutant.c:59:		gi.sound (self, CHAN_VOICE, sound_step3, 1, ATTN_NORM, 0);
m_mutant.c:64:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_mutant.c:69:	gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_NORM, 0);
m_mutant.c:74:	gi.sound (self, CHAN_VOICE, sound_swing, 1, ATTN_NORM, 0);
m_mutant.c:180:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_mutant.c:261:		gi.sound (self, CHAN_WEAPON, sound_hit, 1, ATTN_NORM, 0);
m_mutant.c:263:		gi.sound (self, CHAN_WEAPON, sound_swing, 1, ATTN_NORM, 0);
m_mutant.c:272:		gi.sound (self, CHAN_WEAPON, sound_hit2, 1, ATTN_NORM, 0);
m_mutant.c:274:		gi.sound (self, CHAN_WEAPON, sound_swing, 1, ATTN_NORM, 0);
m_mutant.c:349:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_mutant.c:364:		gi.sound (self, CHAN_WEAPON, sound_thud, 1, ATTN_NORM, 0);
m_mutant.c:514:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_mutant.c:519:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_mutant.c:524:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_mutant.c:540:	gi.linkentity (self);
m_mutant.c:580:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_mutant.c:593:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_mutant.c:619:	sound_swing = gi.soundindex ("mutant/mutatck1.wav");
m_mutant.c:620:	sound_hit = gi.soundindex ("mutant/mutatck2.wav");
m_mutant.c:621:	sound_hit2 = gi.soundindex ("mutant/mutatck3.wav");
m_mutant.c:622:	sound_death = gi.soundindex ("mutant/mutdeth1.wav");
m_mutant.c:623:	sound_idle = gi.soundindex ("mutant/mutidle1.wav");
m_mutant.c:624:	sound_pain1 = gi.soundindex ("mutant/mutpain1.wav");
m_mutant.c:625:	sound_pain2 = gi.soundindex ("mutant/mutpain2.wav");
m_mutant.c:626:	sound_sight = gi.soundindex ("mutant/mutsght1.wav");
m_mutant.c:627:	sound_search = gi.soundindex ("mutant/mutsrch1.wav");
m_mutant.c:628:	sound_step1 = gi.soundindex ("mutant/step1.wav");
m_mutant.c:629:	sound_step2 = gi.soundindex ("mutant/step2.wav");
m_mutant.c:630:	sound_step3 = gi.soundindex ("mutant/step3.wav");
m_mutant.c:631:	sound_thud = gi.soundindex ("mutant/thud1.wav");
m_mutant.c:635:	self->s.modelindex = gi.modelindex ("models/monsters/mutant/tris.md2");
m_mutant.c:657:	gi.linkentity (self);
m_parasite.c:57:	gi.sound (self, CHAN_WEAPON, sound_launch, 1, ATTN_NORM, 0);
m_parasite.c:62:	gi.sound (self, CHAN_WEAPON, sound_reelin, 1, ATTN_NORM, 0);
m_parasite.c:67:	gi.sound (self, CHAN_WEAPON, sound_sight, 1, ATTN_NORM, 0);
m_parasite.c:72:	gi.sound (self, CHAN_WEAPON, sound_tap, 1, ATTN_IDLE, 0);
m_parasite.c:77:	gi.sound (self, CHAN_WEAPON, sound_scratch, 1, ATTN_IDLE, 0);
m_parasite.c:82:	gi.sound (self, CHAN_WEAPON, sound_search, 1, ATTN_IDLE, 0);
m_parasite.c:289:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM, 0);
m_parasite.c:291:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);
m_parasite.c:339:	tr = gi.trace (start, NULL, NULL, end, self, MASK_SHOT);
m_parasite.c:346:		gi.sound (self->enemy, CHAN_AUTO, sound_impact, 1, ATTN_NORM, 0);
m_parasite.c:351:			gi.sound (self, CHAN_WEAPON, sound_suck, 1, ATTN_NORM, 0);
m_parasite.c:355:	gi.WriteByte (svc_temp_entity);
m_parasite.c:356:	gi.WriteByte (TE_PARASITE_ATTACK);
m_parasite.c:357:	gi.WriteShort (self - g_edicts);
m_parasite.c:358:	gi.WritePosition (start);
m_parasite.c:359:	gi.WritePosition (end);
m_parasite.c:360:	gi.multicast (self->s.origin, MULTICAST_PVS);
m_parasite.c:456:	gi.linkentity (self);
m_parasite.c:478:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_parasite.c:492:	gi.sound (self, CHAN_VOICE, sound_die, 1, ATTN_NORM, 0);
m_parasite.c:514:	sound_pain1 = gi.soundindex ("parasite/parpain1.wav");	
m_parasite.c:515:	sound_pain2 = gi.soundindex ("parasite/parpain2.wav");	
m_parasite.c:516:	sound_die = gi.soundindex ("parasite/pardeth1.wav");	
m_parasite.c:517:	sound_launch = gi.soundindex("parasite/paratck1.wav");
m_parasite.c:518:	sound_impact = gi.soundindex("parasite/paratck2.wav");
m_parasite.c:519:	sound_suck = gi.soundindex("parasite/paratck3.wav");
m_parasite.c:520:	sound_reelin = gi.soundindex("parasite/paratck4.wav");
m_parasite.c:521:	sound_sight = gi.soundindex("parasite/parsght1.wav");
m_parasite.c:522:	sound_tap = gi.soundindex("parasite/paridle1.wav");
m_parasite.c:523:	sound_scratch = gi.soundindex("parasite/paridle2.wav");
m_parasite.c:524:	sound_search = gi.soundindex("parasite/parsrch1.wav");
m_parasite.c:526:	self->s.modelindex = gi.modelindex ("models/monsters/parasite/tris.md2");
m_parasite.c:546:	gi.linkentity (self);
m_soldier.c:47:		gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_soldier.c:53:		gi.sound (self, CHAN_WEAPON, sound_cock, 1, ATTN_IDLE, 0);
m_soldier.c:55:		gi.sound (self, CHAN_WEAPON, sound_cock, 1, ATTN_NORM, 0);
m_soldier.c:428:		gi.sound (self, CHAN_VOICE, sound_pain_light, 1, ATTN_NORM, 0);
m_soldier.c:430:		gi.sound (self, CHAN_VOICE, sound_pain, 1, ATTN_NORM, 0);
m_soldier.c:432:		gi.sound (self, CHAN_VOICE, sound_pain_ss, 1, ATTN_NORM, 0);
m_soldier.c:642:	gi.linkentity (self);
m_soldier.c:650:	gi.linkentity (self);
m_soldier.c:795:		gi.sound (self, CHAN_VOICE, sound_sight1, 1, ATTN_NORM, 0);
m_soldier.c:797:		gi.sound (self, CHAN_VOICE, sound_sight2, 1, ATTN_NORM, 0);
m_soldier.c:891:	gi.linkentity (self);
m_soldier.c:1151:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_soldier.c:1169:		gi.sound (self, CHAN_VOICE, sound_death_light, 1, ATTN_NORM, 0);
m_soldier.c:1171:		gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_soldier.c:1173:		gi.sound (self, CHAN_VOICE, sound_death_ss, 1, ATTN_NORM, 0);
m_soldier.c:1203:	self->s.modelindex = gi.modelindex ("models/monsters/soldier/tris.md2");
m_soldier.c:1210:	sound_idle =	gi.soundindex ("soldier/solidle1.wav");
m_soldier.c:1211:	sound_sight1 =	gi.soundindex ("soldier/solsght1.wav");
m_soldier.c:1212:	sound_sight2 =	gi.soundindex ("soldier/solsrch1.wav");
m_soldier.c:1213:	sound_cock =	gi.soundindex ("infantry/infatck3.wav");
m_soldier.c:1228:	gi.linkentity (self);
m_soldier.c:1248:	sound_pain_light = gi.soundindex ("soldier/solpain2.wav");
m_soldier.c:1249:	sound_death_light =	gi.soundindex ("soldier/soldeth2.wav");
m_soldier.c:1250:	gi.modelindex ("models/objects/laser/tris.md2");
m_soldier.c:1251:	gi.soundindex ("misc/lasfly.wav");
m_soldier.c:1252:	gi.soundindex ("soldier/solatck2.wav");
m_soldier.c:1271:	sound_pain = gi.soundindex ("soldier/solpain1.wav");
m_soldier.c:1272:	sound_death = gi.soundindex ("soldier/soldeth1.wav");
m_soldier.c:1273:	gi.soundindex ("soldier/solatck1.wav");
m_soldier.c:1292:	sound_pain_ss = gi.soundindex ("soldier/solpain3.wav");
m_soldier.c:1293:	sound_death_ss = gi.soundindex ("soldier/soldeth3.wav");
m_soldier.c:1294:	gi.soundindex ("soldier/solatck3.wav");
m_supertank.c:46:	gi.sound (self, CHAN_VOICE, tread_sound, 1, ATTN_NORM, 0);
m_supertank.c:52:		gi.sound (self, CHAN_VOICE, sound_search1, 1, ATTN_NORM, 0);
m_supertank.c:54:		gi.sound (self, CHAN_VOICE, sound_search2, 1, ATTN_NORM, 0);
m_supertank.c:478:		gi.sound (self, CHAN_VOICE, sound_pain1, 1, ATTN_NORM,0);
m_supertank.c:483:		gi.sound (self, CHAN_VOICE, sound_pain3, 1, ATTN_NORM,0);
m_supertank.c:488:		gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM,0);
m_supertank.c:590:	gi.linkentity (self);
m_supertank.c:648:	gi.WriteByte (svc_temp_entity);
m_supertank.c:649:	gi.WriteByte (TE_EXPLOSION1);
m_supertank.c:650:	gi.WritePosition (org);
m_supertank.c:651:	gi.multicast (self->s.origin, MULTICAST_PVS);
m_supertank.c:659:	gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
m_supertank.c:680:	sound_pain1 = gi.soundindex ("bosstank/btkpain1.wav");
m_supertank.c:681:	sound_pain2 = gi.soundindex ("bosstank/btkpain2.wav");
m_supertank.c:682:	sound_pain3 = gi.soundindex ("bosstank/btkpain3.wav");
m_supertank.c:683:	sound_death = gi.soundindex ("bosstank/btkdeth1.wav");
m_supertank.c:684:	sound_search1 = gi.soundindex ("bosstank/btkunqv1.wav");
m_supertank.c:685:	sound_search2 = gi.soundindex ("bosstank/btkunqv2.wav");
m_supertank.c:687://	self->s.sound = gi.soundindex ("bosstank/btkengn1.wav");
m_supertank.c:688:	tread_sound = gi.soundindex ("bosstank/btkengn1.wav");
m_supertank.c:692:	self->s.modelindex = gi.modelindex ("models/monsters/boss1/tris.md2");
m_supertank.c:711:	gi.linkentity (self);
m_tank.c:51:	gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
m_tank.c:57:	gi.sound (self, CHAN_BODY, sound_step, 1, ATTN_NORM, 0);
m_tank.c:62:	gi.sound (self, CHAN_BODY, sound_thud, 1, ATTN_NORM, 0);
m_tank.c:67:	gi.sound (self, CHAN_WEAPON, sound_windup, 1, ATTN_NORM, 0);
m_tank.c:72:	gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
m_tank.c:313:	gi.sound (self, CHAN_VOICE, sound_pain, 1, ATTN_NORM, 0);
m_tank.c:358:	gi.sound (self, CHAN_WEAPON, sound_strike, 1, ATTN_NORM, 0);
m_tank.c:713:	gi.linkentity (self);
m_tank.c:760:		gi.sound (self, CHAN_VOICE, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
m_tank.c:775:	gi.sound (self, CHAN_VOICE, sound_die, 1, ATTN_NORM, 0);
m_tank.c:800:	self->s.modelindex = gi.modelindex ("models/monsters/tank/tris.md2");
m_tank.c:806:	sound_pain = gi.soundindex ("tank/tnkpain2.wav");
m_tank.c:807:	sound_thud = gi.soundindex ("tank/tnkdeth2.wav");
m_tank.c:808:	sound_idle = gi.soundindex ("tank/tnkidle1.wav");
m_tank.c:809:	sound_die = gi.soundindex ("tank/death.wav");
m_tank.c:810:	sound_step = gi.soundindex ("tank/step.wav");
m_tank.c:811:	sound_windup = gi.soundindex ("tank/tnkatck4.wav");
m_tank.c:812:	sound_strike = gi.soundindex ("tank/tnkatck5.wav");
m_tank.c:813:	sound_sight = gi.soundindex ("tank/sight1.wav");
m_tank.c:815:	gi.soundindex ("tank/tnkatck1.wav");
m_tank.c:816:	gi.soundindex ("tank/tnkatk2a.wav");
m_tank.c:817:	gi.soundindex ("tank/tnkatk2b.wav");
m_tank.c:818:	gi.soundindex ("tank/tnkatk2c.wav");
m_tank.c:819:	gi.soundindex ("tank/tnkatk2d.wav");
m_tank.c:820:	gi.soundindex ("tank/tnkatk2e.wav");
m_tank.c:821:	gi.soundindex ("tank/tnkatck3.wav");
m_tank.c:847:	gi.linkentity (self);
p_client.c:58://				gi.dprintf("FixCoopSpots changed %s at %s targetname from %s to %s\n", self->classname, vtos(self->s.origin), self->targetname, spot->targetname);
p_client.c:306:			gi.bprintf (PRINT_MEDIUM, "%s %s.\n", self->client->pers.netname, message);
p_client.c:389:				gi.bprintf (PRINT_MEDIUM,"%s %s %s%s\n", self->client->pers.netname, message, attacker->client->pers.netname, message2);
p_client.c:402:	gi.bprintf (PRINT_MEDIUM,"%s died.\n", self->client->pers.netname);
p_client.c:552:		gi.sound (self, CHAN_BODY, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
p_client.c:588:			gi.sound (self, CHAN_VOICE, gi.soundindex(va("*death%i.wav", (rand()%4)+1)), 1, ATTN_NORM, 0);
p_client.c:594:	gi.linkentity (self);
p_client.c:906:				gi.error ("Couldn't find spawn point %s\n", game.spawnpoint);
p_client.c:937:		gi.sound (self, CHAN_BODY, gi.soundindex ("misc/udeath.wav"), 1, ATTN_NORM, 0);
p_client.c:956:	gi.unlinkentity (ent);
p_client.c:958:	gi.unlinkentity (body);
p_client.c:976:	gi.linkentity (body);
p_client.c:1003:	gi.AddCommandString ("menu_loadgame\n");
p_client.c:1022:			gi.cprintf(ent, PRINT_HIGH, "Spectator password incorrect.\n");
p_client.c:1024:			gi.WriteByte (svc_stufftext);
p_client.c:1025:			gi.WriteString ("spectator 0\n");
p_client.c:1026:			gi.unicast(ent, true);
p_client.c:1036:			gi.cprintf(ent, PRINT_HIGH, "Server spectator limit is full.");
p_client.c:1039:			gi.WriteByte (svc_stufftext);
p_client.c:1040:			gi.WriteString ("spectator 0\n");
p_client.c:1041:			gi.unicast(ent, true);
p_client.c:1050:			gi.cprintf(ent, PRINT_HIGH, "Password incorrect.\n");
p_client.c:1052:			gi.WriteByte (svc_stufftext);
p_client.c:1053:			gi.WriteString ("spectator 1\n");
p_client.c:1054:			gi.unicast(ent, true);
p_client.c:1068:		gi.WriteByte (svc_muzzleflash);
p_client.c:1069:		gi.WriteShort (ent-g_edicts);
p_client.c:1070:		gi.WriteByte (MZ_LOGIN);
p_client.c:1071:		gi.multicast (ent->s.origin, MULTICAST_PVS);
p_client.c:1081:		gi.bprintf (PRINT_HIGH, "%s has moved to the sidelines\n", ent->client->pers.netname);
p_client.c:1083:		gi.bprintf (PRINT_HIGH, "%s joined the game\n", ent->client->pers.netname);
p_client.c:1207:	client->ps.gunindex = gi.modelindex(client->pers.weapon->view_model);
p_client.c:1244:		gi.linkentity (ent);
p_client.c:1253:	gi.linkentity (ent);
p_client.c:1284:		gi.WriteByte (svc_muzzleflash);
p_client.c:1285:		gi.WriteShort (ent-g_edicts);
p_client.c:1286:		gi.WriteByte (MZ_LOGIN);
p_client.c:1287:		gi.multicast (ent->s.origin, MULTICAST_PVS);
p_client.c:1290:	gi.bprintf (PRINT_HIGH, "%s entered the game\n", ent->client->pers.netname);
p_client.c:1348:			gi.WriteByte (svc_muzzleflash);
p_client.c:1349:			gi.WriteShort (ent-g_edicts);
p_client.c:1350:			gi.WriteByte (MZ_LOGIN);
p_client.c:1351:			gi.multicast (ent->s.origin, MULTICAST_PVS);
p_client.c:1353:			gi.bprintf (PRINT_HIGH, "%s entered the game\n", ent->client->pers.netname);
p_client.c:1400:	gi.configstring (CS_PLAYERSKINS+playernum, va("%s\\%s", ent->client->pers.netname, s) );
p_client.c:1499:		gi.dprintf ("%s connected\n", ent->client->pers.netname);
p_client.c:1521:	gi.bprintf (PRINT_HIGH, "%s disconnected\n", ent->client->pers.netname);
p_client.c:1524:	gi.WriteByte (svc_muzzleflash);
p_client.c:1525:	gi.WriteShort (ent-g_edicts);
p_client.c:1526:	gi.WriteByte (MZ_LOGOUT);
p_client.c:1527:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_client.c:1529:	gi.unlinkentity (ent);
p_client.c:1537:	gi.configstring (CS_PLAYERSKINS+playernum, "");
p_client.c:1550:		return gi.trace (start, mins, maxs, end, pm_passent, MASK_PLAYERSOLID);
p_client.c:1552:		return gi.trace (start, mins, maxs, end, pm_passent, MASK_DEADSOLID);
p_client.c:1636:	//		gi.dprintf ("pmove changed!\n");
p_client.c:1642:		pm.pointcontents = gi.pointcontents;
p_client.c:1645:		gi.Pmove (&pm);
p_client.c:1666:			gi.sound(ent, CHAN_VOICE, gi.soundindex("*jump1.wav"), 1, ATTN_NORM, 0);
p_client.c:1689:		gi.linkentity (ent);
p_hud.c:68:		gi.unicast (ent, true);
p_hud.c:216:		picnum = gi.imageindex ("i_fixme");
p_hud.c:249:	gi.WriteByte (svc_layout);
p_hud.c:250:	gi.WriteString (string);
p_hud.c:265:	gi.unicast (ent, true);
p_hud.c:333:	gi.WriteByte (svc_layout);
p_hud.c:334:	gi.WriteString (string);
p_hud.c:335:	gi.unicast (ent, true);
p_hud.c:400:		ent->client->ps.stats[STAT_AMMO_ICON] = gi.imageindex (item->icon);
p_hud.c:416:			gi.sound(ent, CHAN_ITEM, gi.soundindex("misc/power2.wav"), 1, ATTN_NORM, 0);
p_hud.c:424:		ent->client->ps.stats[STAT_ARMOR_ICON] = gi.imageindex ("i_powershield");
p_hud.c:430:		ent->client->ps.stats[STAT_ARMOR_ICON] = gi.imageindex (item->icon);
p_hud.c:453:		ent->client->ps.stats[STAT_TIMER_ICON] = gi.imageindex ("p_quad");
p_hud.c:458:		ent->client->ps.stats[STAT_TIMER_ICON] = gi.imageindex ("p_invulnerability");
p_hud.c:463:		ent->client->ps.stats[STAT_TIMER_ICON] = gi.imageindex ("p_envirosuit");
p_hud.c:468:		ent->client->ps.stats[STAT_TIMER_ICON] = gi.imageindex ("p_rebreather");
p_hud.c:483:		ent->client->ps.stats[STAT_SELECTED_ICON] = gi.imageindex (itemlist[ent->client->pers.selected_item].icon);
p_hud.c:517:		ent->client->ps.stats[STAT_HELPICON] = gi.imageindex ("i_help");
p_hud.c:520:		ent->client->ps.stats[STAT_HELPICON] = gi.imageindex (ent->client->pers.weapon->icon);
p_view.c:145:		gi.sound (player, CHAN_VOICE, gi.soundindex(va("*pain%i_%i.wav", l, r)), 1, ATTN_NORM, 0);
p_view.c:314:	//gi.DebugGraph (bob *2, 255);
p_view.c:429:	contents = gi.pointcontents (vieworg);
p_view.c:447:			gi.sound(ent, CHAN_ITEM, gi.soundindex("items/damage2.wav"), 1, ATTN_NORM, 0);
p_view.c:455:			gi.sound(ent, CHAN_ITEM, gi.soundindex("items/protect2.wav"), 1, ATTN_NORM, 0);
p_view.c:463:			gi.sound(ent, CHAN_ITEM, gi.soundindex("items/airout.wav"), 1, ATTN_NORM, 0);
p_view.c:471:			gi.sound(ent, CHAN_ITEM, gi.soundindex("items/airout.wav"), 1, ATTN_NORM, 0);
p_view.c:605:			gi.sound (current_player, CHAN_BODY, gi.soundindex("player/lava_in.wav"), 1, ATTN_NORM, 0);
p_view.c:607:			gi.sound (current_player, CHAN_BODY, gi.soundindex("player/watr_in.wav"), 1, ATTN_NORM, 0);
p_view.c:609:			gi.sound (current_player, CHAN_BODY, gi.soundindex("player/watr_in.wav"), 1, ATTN_NORM, 0);
p_view.c:622:		gi.sound (current_player, CHAN_BODY, gi.soundindex("player/watr_out.wav"), 1, ATTN_NORM, 0);
p_view.c:631:		gi.sound (current_player, CHAN_BODY, gi.soundindex("player/watr_un.wav"), 1, ATTN_NORM, 0);
p_view.c:641:			gi.sound (current_player, CHAN_VOICE, gi.soundindex("player/gasp1.wav"), 1, ATTN_NORM, 0);
p_view.c:646:			gi.sound (current_player, CHAN_VOICE, gi.soundindex("player/gasp2.wav"), 1, ATTN_NORM, 0);
p_view.c:663:					gi.sound (current_player, CHAN_AUTO, gi.soundindex("player/u_breath1.wav"), 1, ATTN_NORM, 0);
p_view.c:665:					gi.sound (current_player, CHAN_AUTO, gi.soundindex("player/u_breath2.wav"), 1, ATTN_NORM, 0);
p_view.c:687:					gi.sound (current_player, CHAN_VOICE, gi.soundindex("player/drown1.wav"), 1, ATTN_NORM, 0);
p_view.c:689:					gi.sound (current_player, CHAN_VOICE, gi.soundindex("*gurp1.wav"), 1, ATTN_NORM, 0);
p_view.c:691:					gi.sound (current_player, CHAN_VOICE, gi.soundindex("*gurp2.wav"), 1, ATTN_NORM, 0);
p_view.c:717:					gi.sound (current_player, CHAN_VOICE, gi.soundindex("player/burn1.wav"), 1, ATTN_NORM, 0);
p_view.c:719:					gi.sound (current_player, CHAN_VOICE, gi.soundindex("player/burn2.wav"), 1, ATTN_NORM, 0);
p_view.c:829:		gi.sound (ent, CHAN_VOICE, gi.soundindex ("misc/pc_up.wav"), 1, ATTN_STATIC, 0);
p_view.c:841:		ent->s.sound = gi.soundindex("weapons/rg_hum.wav");
p_view.c:843:		ent->s.sound = gi.soundindex("weapons/bfg_hum.wav");
p_view.c:1084:		gi.unicast (ent, false);
p_weapon.c:114:	gi.linkentity (noise);
p_weapon.c:213:	ent->client->ps.gunindex = gi.modelindex(ent->client->pers.weapon->view_model);
p_weapon.c:327:			gi.cprintf (ent, PRINT_HIGH, "No %s for %s.\n", ammo_item->pickup_name, item->pickup_name);
p_weapon.c:333:			gi.cprintf (ent, PRINT_HIGH, "Not enough %s for %s.\n", ammo_item->pickup_name, item->pickup_name);
p_weapon.c:360:		gi.cprintf (ent, PRINT_HIGH, "Can't drop current weapon\n");
p_weapon.c:480:					gi.sound(ent, CHAN_VOICE, gi.soundindex("weapons/noammo.wav"), 1, ATTN_NORM, 0);
p_weapon.c:518:					gi.sound(ent, CHAN_ITEM, gi.soundindex("items/damage3.wav"), 1, ATTN_NORM, 0);
p_weapon.c:625:					gi.sound(ent, CHAN_VOICE, gi.soundindex("weapons/noammo.wav"), 1, ATTN_NORM, 0);
p_weapon.c:647:			gi.sound(ent, CHAN_WEAPON, gi.soundindex("weapons/hgrena1b.wav"), 1, ATTN_NORM, 0);
p_weapon.c:654:				ent->client->weapon_sound = gi.soundindex("weapons/hgrenc1b.wav");
p_weapon.c:730:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:731:	gi.WriteShort (ent-g_edicts);
p_weapon.c:732:	gi.WriteByte (MZ_GRENADE | is_silenced);
p_weapon.c:733:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:786:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:787:	gi.WriteShort (ent-g_edicts);
p_weapon.c:788:	gi.WriteByte (MZ_ROCKET | is_silenced);
p_weapon.c:789:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:835:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:836:	gi.WriteShort (ent-g_edicts);
p_weapon.c:838:		gi.WriteByte (MZ_HYPERBLASTER | is_silenced);
p_weapon.c:840:		gi.WriteByte (MZ_BLASTER | is_silenced);
p_weapon.c:841:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:875:	ent->client->weapon_sound = gi.soundindex("weapons/hyprbl1a.wav");
p_weapon.c:887:				gi.sound(ent, CHAN_VOICE, gi.soundindex("weapons/noammo.wav"), 1, ATTN_NORM, 0);
p_weapon.c:931:		gi.sound(ent, CHAN_AUTO, gi.soundindex("weapons/hyprbd1a.wav"), 1, ATTN_NORM, 0);
p_weapon.c:980:			gi.sound(ent, CHAN_VOICE, gi.soundindex("weapons/noammo.wav"), 1, ATTN_NORM, 0);
p_weapon.c:1016:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:1017:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1018:	gi.WriteByte (MZ_MACHINEGUN | is_silenced);
p_weapon.c:1019:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:1064:		gi.sound(ent, CHAN_AUTO, gi.soundindex("weapons/chngnu1a.wav"), 1, ATTN_IDLE, 0);
p_weapon.c:1085:		gi.sound(ent, CHAN_AUTO, gi.soundindex("weapons/chngnd1a.wav"), 1, ATTN_IDLE, 0);
p_weapon.c:1089:		ent->client->weapon_sound = gi.soundindex("weapons/chngnl1a.wav");
p_weapon.c:1123:			gi.sound(ent, CHAN_VOICE, gi.soundindex("weapons/noammo.wav"), 1, ATTN_NORM, 0);
p_weapon.c:1155:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:1156:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1157:	gi.WriteByte ((MZ_CHAINGUN1 + shots - 1) | is_silenced);
p_weapon.c:1158:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:1218:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:1219:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1220:	gi.WriteByte (MZ_SHOTGUN | is_silenced);
p_weapon.c:1221:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:1272:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:1273:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1274:	gi.WriteByte (MZ_SSHOTGUN | is_silenced);
p_weapon.c:1275:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:1337:	gi.WriteByte (svc_muzzleflash);
p_weapon.c:1338:	gi.WriteShort (ent-g_edicts);
p_weapon.c:1339:	gi.WriteByte (MZ_RAILGUN | is_silenced);
p_weapon.c:1340:	gi.multicast (ent->s.origin, MULTICAST_PVS);
p_weapon.c:1382:		gi.WriteByte (svc_muzzleflash);
p_weapon.c:1383:		gi.WriteShort (ent-g_edicts);
p_weapon.c:1384:		gi.WriteByte (MZ_BFG | is_silenced);
p_weapon.c:1385:		gi.multicast (ent->s.origin, MULTICAST_PVS);
gib_on usage ===
g_main.c:76:cvar_t *gib_on;
gladiator_frames_attack_gun usage ===
m_gladiator.c:184:mframe_t gladiator_frames_attack_gun [] =
m_gladiator.c:196:mmove_t gladiator_move_attack_gun = {FRAME_attack1, FRAME_attack9, gladiator_frames_attack_gun, gladiator_run};
gladiator_frames_attack_melee usage ===
m_gladiator.c:140:mframe_t gladiator_frames_attack_melee [] =
m_gladiator.c:160:mmove_t gladiator_move_attack_melee = {FRAME_melee1, FRAME_melee17, gladiator_frames_attack_melee, gladiator_run};
gladiator_frames_death usage ===
m_gladiator.c:281:mframe_t gladiator_frames_death [] =
m_gladiator.c:306:mmove_t gladiator_move_death = {FRAME_death1, FRAME_death22, gladiator_frames_death, gladiator_dead};
gladiator_frames_pain usage ===
m_gladiator.c:217:mframe_t gladiator_frames_pain [] =
m_gladiator.c:226:mmove_t gladiator_move_pain = {FRAME_pain1, FRAME_pain6, gladiator_frames_pain, gladiator_run};
gladiator_frames_pain_air usage ===
m_gladiator.c:228:mframe_t gladiator_frames_pain_air [] =
m_gladiator.c:238:mmove_t gladiator_move_pain_air = {FRAME_painup1, FRAME_painup7, gladiator_frames_pain_air, gladiator_run};
gladiator_frames_run usage ===
m_gladiator.c:109:mframe_t gladiator_frames_run [] =
m_gladiator.c:118:mmove_t gladiator_move_run = {FRAME_run1, FRAME_run6, gladiator_frames_run, NULL};
gladiator_frames_stand usage ===
m_gladiator.c:64:mframe_t gladiator_frames_stand [] =
m_gladiator.c:74:mmove_t gladiator_move_stand = {FRAME_stand1, FRAME_stand7, gladiator_frames_stand, NULL};
gladiator_frames_walk usage ===
m_gladiator.c:82:mframe_t gladiator_frames_walk [] =
m_gladiator.c:101:mmove_t gladiator_move_walk = {FRAME_walk1, FRAME_walk16, gladiator_frames_walk, NULL};
gladiator_move_attack_gun usage ===
m_gladiator.c:196:mmove_t gladiator_move_attack_gun = {FRAME_attack1, FRAME_attack9, gladiator_frames_attack_gun, gladiator_run};
m_gladiator.c:213:	self->monsterinfo.currentmove = &gladiator_move_attack_gun;
gladiator_move_attack_melee usage ===
m_gladiator.c:160:mmove_t gladiator_move_attack_melee = {FRAME_melee1, FRAME_melee17, gladiator_frames_attack_melee, gladiator_run};
m_gladiator.c:164:	self->monsterinfo.currentmove = &gladiator_move_attack_melee;
gladiator_move_death usage ===
m_gladiator.c:306:mmove_t gladiator_move_death = {FRAME_death1, FRAME_death22, gladiator_frames_death, gladiator_dead};
m_gladiator.c:333:	self->monsterinfo.currentmove = &gladiator_move_death;
gladiator_move_pain usage ===
m_gladiator.c:226:mmove_t gladiator_move_pain = {FRAME_pain1, FRAME_pain6, gladiator_frames_pain, gladiator_run};
m_gladiator.c:248:		if ((self->velocity[2] > 100) && (self->monsterinfo.currentmove == &gladiator_move_pain))
m_gladiator.c:266:		self->monsterinfo.currentmove = &gladiator_move_pain;
gladiator_move_pain_air usage ===
m_gladiator.c:238:mmove_t gladiator_move_pain_air = {FRAME_painup1, FRAME_painup7, gladiator_frames_pain_air, gladiator_run};
m_gladiator.c:249:			self->monsterinfo.currentmove = &gladiator_move_pain_air;
m_gladiator.c:264:		self->monsterinfo.currentmove = &gladiator_move_pain_air;
gladiator_move_run usage ===
m_gladiator.c:118:mmove_t gladiator_move_run = {FRAME_run1, FRAME_run6, gladiator_frames_run, NULL};
m_gladiator.c:125:		self->monsterinfo.currentmove = &gladiator_move_run;
gladiator_move_stand usage ===
m_gladiator.c:74:mmove_t gladiator_move_stand = {FRAME_stand1, FRAME_stand7, gladiator_frames_stand, NULL};
m_gladiator.c:78:	self->monsterinfo.currentmove = &gladiator_move_stand;
m_gladiator.c:123:		self->monsterinfo.currentmove = &gladiator_move_stand;
m_gladiator.c:383:	self->monsterinfo.currentmove = &gladiator_move_stand;
gladiator_move_walk usage ===
m_gladiator.c:101:mmove_t gladiator_move_walk = {FRAME_walk1, FRAME_walk16, gladiator_frames_walk, NULL};
m_gladiator.c:105:	self->monsterinfo.currentmove = &gladiator_move_walk;
globals usage ===
g_main.c:26:game_export_t	globals;
g_main.c:118:	globals.apiversion = GAME_API_VERSION;
g_main.c:119:	globals.Init = InitGame;
g_main.c:120:	globals.Shutdown = ShutdownGame;
g_main.c:121:	globals.SpawnEntities = SpawnEntities;
g_main.c:123:	globals.WriteGame = WriteGame;
g_main.c:124:	globals.ReadGame = ReadGame;
g_main.c:125:	globals.WriteLevel = WriteLevel;
g_main.c:126:	globals.ReadLevel = ReadLevel;
g_main.c:128:	globals.ClientThink = ClientThink;
g_main.c:129:	globals.ClientConnect = ClientConnect;
g_main.c:130:	globals.ClientUserinfoChanged = ClientUserinfoChanged;
g_main.c:131:	globals.ClientDisconnect = ClientDisconnect;
g_main.c:132:	globals.ClientBegin = ClientBegin;
g_main.c:133:	globals.ClientCommand = ClientCommand;
g_main.c:135:	globals.RunFrame = G_RunFrame;
g_main.c:137:	globals.ServerCommand = ServerCommand;
g_main.c:139:	globals.edict_size = sizeof(edict_t);
g_main.c:141:	return &globals;
g_main.c:408:	for (i=0 ; i<globals.num_edicts ; i++, ent++)
g_phys.c:450:	for (e = 1; e < globals.num_edicts; e++, check++)
g_save.c:216:	globals.edicts = g_edicts;
g_save.c:217:	globals.max_edicts = game.maxentities;
g_save.c:222:	globals.num_edicts = game.maxclients+1;
g_save.c:514:	globals.edicts = g_edicts;
g_save.c:658:	for (i=0 ; i<globals.num_edicts ; i++)
g_save.c:707:	globals.num_edicts = maxclients->value+1;
g_save.c:742:		if (entnum >= globals.num_edicts)
g_save.c:743:			globals.num_edicts = entnum+1;
g_save.c:764:	for (i=0 ; i<globals.num_edicts ; i++)
g_spawn.c:480:	for (i=1, e=g_edicts+i ; i < globals.num_edicts ; i++,e++)
g_spawn.c:492:		for (j=i+1, e2=e+1 ; j < globals.num_edicts ; j++,e2++)
g_spawn.c:612:	while (i < globals.num_edicts) {
g_target.c:766:	for (i=1, e=g_edicts+i; i < globals.num_edicts; i++,e++)
g_utils.c:54:	for ( ; from < &g_edicts[globals.num_edicts] ; from++)
g_utils.c:87:	for ( ; from < &g_edicts[globals.num_edicts]; from++)
g_utils.c:426:	for ( i=maxclients->value+1 ; i<globals.num_edicts ; i++, e++)
g_utils.c:440:	globals.num_edicts++;
gun_x usage ===
g_main.c:57:cvar_t	*gun_x;
g_save.c:156:	gun_x = gi.cvar ("gun_x", "0", 0);
p_view.c:382:	// gun_x / gun_y / gun_z are development tools
p_view.c:386:		ent->client->ps.gunoffset[i] += right[i]*gun_x->value;
gun_y usage ===
g_main.c:58:cvar_t	*gun_y;
g_save.c:157:	gun_y = gi.cvar ("gun_y", "0", 0);
p_view.c:382:	// gun_x / gun_y / gun_z are development tools
p_view.c:385:		ent->client->ps.gunoffset[i] += forward[i]*(gun_y->value);
gun_z usage ===
g_main.c:59:cvar_t	*gun_z;
g_save.c:158:	gun_z = gi.cvar ("gun_z", "0", 0);
p_view.c:382:	// gun_x / gun_y / gun_z are development tools
p_view.c:387:		ent->client->ps.gunoffset[i] += up[i]* (-gun_z->value);
gunner_frames_attack_chain usage ===
m_gunner.c:474:mframe_t gunner_frames_attack_chain [] =
m_gunner.c:494:mmove_t gunner_move_attack_chain = {FRAME_attak209, FRAME_attak215, gunner_frames_attack_chain, gunner_fire_chain};
gunner_frames_attack_grenade usage ===
m_gunner.c:521:mframe_t gunner_frames_attack_grenade [] =
m_gunner.c:545:mmove_t gunner_move_attack_grenade = {FRAME_attak101, FRAME_attak121, gunner_frames_attack_grenade, gunner_run};
gunner_frames_death usage ===
m_gunner.c:319:mframe_t gunner_frames_death [] =
m_gunner.c:333:mmove_t gunner_move_death = {FRAME_death01, FRAME_death11, gunner_frames_death, gunner_dead};
gunner_frames_duck usage ===
m_gunner.c:396:mframe_t gunner_frames_duck [] =
m_gunner.c:407:mmove_t	gunner_move_duck = {FRAME_duck01, FRAME_duck08, gunner_frames_duck, gunner_run};
gunner_frames_endfire_chain usage ===
m_gunner.c:509:mframe_t gunner_frames_endfire_chain [] =
m_gunner.c:519:mmove_t gunner_move_endfire_chain = {FRAME_attak224, FRAME_attak230, gunner_frames_endfire_chain, gunner_run};
gunner_frames_fidget usage ===
m_gunner.c:66:mframe_t gunner_frames_fidget [] =
m_gunner.c:122:mmove_t	gunner_move_fidget = {FRAME_stand31, FRAME_stand70, gunner_frames_fidget, gunner_stand};
gunner_frames_fire_chain usage ===
m_gunner.c:496:mframe_t gunner_frames_fire_chain [] =
m_gunner.c:507:mmove_t gunner_move_fire_chain = {FRAME_attak216, FRAME_attak223, gunner_frames_fire_chain, gunner_refire_chain};
gunner_frames_pain1 usage ===
m_gunner.c:260:mframe_t gunner_frames_pain1 [] =
m_gunner.c:281:mmove_t gunner_move_pain1 = {FRAME_pain101, FRAME_pain118, gunner_frames_pain1, gunner_run};
gunner_frames_pain2 usage ===
m_gunner.c:247:mframe_t gunner_frames_pain2 [] =
m_gunner.c:258:mmove_t gunner_move_pain2 = {FRAME_pain201, FRAME_pain208, gunner_frames_pain2, gunner_run};
gunner_frames_pain3 usage ===
m_gunner.c:237:mframe_t gunner_frames_pain3 [] =
m_gunner.c:245:mmove_t gunner_move_pain3 = {FRAME_pain301, FRAME_pain305, gunner_frames_pain3, gunner_run};
gunner_frames_run usage ===
m_gunner.c:198:mframe_t gunner_frames_run [] =
m_gunner.c:210:mmove_t gunner_move_run = {FRAME_run01, FRAME_run08, gunner_frames_run, NULL};
gunner_frames_runandshoot usage ===
m_gunner.c:220:mframe_t gunner_frames_runandshoot [] =
m_gunner.c:230:mmove_t gunner_move_runandshoot = {FRAME_runs01, FRAME_runs06, gunner_frames_runandshoot, NULL};
gunner_frames_stand usage ===
m_gunner.c:132:mframe_t gunner_frames_stand [] =
m_gunner.c:167:mmove_t	gunner_move_stand = {FRAME_stand01, FRAME_stand30, gunner_frames_stand, NULL};
gunner_frames_walk usage ===
m_gunner.c:175:mframe_t gunner_frames_walk [] =
m_gunner.c:191:mmove_t gunner_move_walk = {FRAME_walk07, FRAME_walk19, gunner_frames_walk, NULL};
gunner_move_attack_chain usage ===
m_gunner.c:494:mmove_t gunner_move_attack_chain = {FRAME_attak209, FRAME_attak215, gunner_frames_attack_chain, gunner_fire_chain};
m_gunner.c:551:		self->monsterinfo.currentmove = &gunner_move_attack_chain;
m_gunner.c:558:			self->monsterinfo.currentmove = &gunner_move_attack_chain;
gunner_move_attack_grenade usage ===
m_gunner.c:545:mmove_t gunner_move_attack_grenade = {FRAME_attak101, FRAME_attak121, gunner_frames_attack_grenade, gunner_run};
m_gunner.c:556:			self->monsterinfo.currentmove = &gunner_move_attack_grenade;
gunner_move_death usage ===
m_gunner.c:333:mmove_t gunner_move_death = {FRAME_death01, FRAME_death11, gunner_frames_death, gunner_dead};
m_gunner.c:359:	self->monsterinfo.currentmove = &gunner_move_death;
gunner_move_duck usage ===
m_gunner.c:407:mmove_t	gunner_move_duck = {FRAME_duck01, FRAME_duck08, gunner_frames_duck, gunner_run};
m_gunner.c:417:	self->monsterinfo.currentmove = &gunner_move_duck;
gunner_move_endfire_chain usage ===
m_gunner.c:519:mmove_t gunner_move_endfire_chain = {FRAME_attak224, FRAME_attak230, gunner_frames_endfire_chain, gunner_run};
m_gunner.c:576:	self->monsterinfo.currentmove = &gunner_move_endfire_chain;
gunner_move_fidget usage ===
m_gunner.c:122:mmove_t	gunner_move_fidget = {FRAME_stand31, FRAME_stand70, gunner_frames_fidget, gunner_stand};
m_gunner.c:129:		self->monsterinfo.currentmove = &gunner_move_fidget;
gunner_move_fire_chain usage ===
m_gunner.c:507:mmove_t gunner_move_fire_chain = {FRAME_attak216, FRAME_attak223, gunner_frames_fire_chain, gunner_refire_chain};
m_gunner.c:564:	self->monsterinfo.currentmove = &gunner_move_fire_chain;
m_gunner.c:573:				self->monsterinfo.currentmove = &gunner_move_fire_chain;
gunner_move_pain1 usage ===
m_gunner.c:281:mmove_t gunner_move_pain1 = {FRAME_pain101, FRAME_pain118, gunner_frames_pain1, gunner_run};
m_gunner.c:306:		self->monsterinfo.currentmove = &gunner_move_pain1;
gunner_move_pain2 usage ===
m_gunner.c:258:mmove_t gunner_move_pain2 = {FRAME_pain201, FRAME_pain208, gunner_frames_pain2, gunner_run};
m_gunner.c:304:		self->monsterinfo.currentmove = &gunner_move_pain2;
gunner_move_pain3 usage ===
m_gunner.c:245:mmove_t gunner_move_pain3 = {FRAME_pain301, FRAME_pain305, gunner_frames_pain3, gunner_run};
m_gunner.c:302:		self->monsterinfo.currentmove = &gunner_move_pain3;
gunner_move_run usage ===
m_gunner.c:210:mmove_t gunner_move_run = {FRAME_run01, FRAME_run08, gunner_frames_run, NULL};
m_gunner.c:217:		self->monsterinfo.currentmove = &gunner_move_run;
gunner_move_runandshoot usage ===
m_gunner.c:230:mmove_t gunner_move_runandshoot = {FRAME_runs01, FRAME_runs06, gunner_frames_runandshoot, NULL};
m_gunner.c:234:	self->monsterinfo.currentmove = &gunner_move_runandshoot;
gunner_move_stand usage ===
m_gunner.c:167:mmove_t	gunner_move_stand = {FRAME_stand01, FRAME_stand30, gunner_frames_stand, NULL};
m_gunner.c:171:		self->monsterinfo.currentmove = &gunner_move_stand;
m_gunner.c:215:		self->monsterinfo.currentmove = &gunner_move_stand;
m_gunner.c:624:	self->monsterinfo.currentmove = &gunner_move_stand;	
gunner_move_walk usage ===
m_gunner.c:191:mmove_t gunner_move_walk = {FRAME_walk07, FRAME_walk19, gunner_frames_walk, NULL};
m_gunner.c:195:	self->monsterinfo.currentmove = &gunner_move_walk;
hover_frames_attack1 usage ===
m_hover.c:405:mframe_t hover_frames_attack1 [] =
m_hover.c:411:mmove_t hover_move_attack1 = {FRAME_attak104, FRAME_attak106, hover_frames_attack1, NULL};
hover_frames_backward usage ===
m_hover.c:368:mframe_t hover_frames_backward [] =
m_hover.c:395:mmove_t hover_move_backward = {FRAME_backwd01, FRAME_backwd24, hover_frames_backward, NULL};
hover_frames_death1 usage ===
m_hover.c:352:mframe_t hover_frames_death1 [] =
m_hover.c:366:mmove_t hover_move_death1 = {FRAME_death101, FRAME_death111, hover_frames_death1, hover_dead};
hover_frames_end_attack usage ===
m_hover.c:414:mframe_t hover_frames_end_attack [] =
m_hover.c:419:mmove_t hover_move_end_attack = {FRAME_attak107, FRAME_attak108, hover_frames_end_attack, hover_run};
hover_frames_forward usage ===
m_hover.c:232:mframe_t hover_frames_forward [] =
m_hover.c:270:mmove_t hover_move_forward = {FRAME_forwrd01, FRAME_forwrd35, hover_frames_forward, NULL};
hover_frames_land usage ===
m_hover.c:226:mframe_t hover_frames_land [] =
m_hover.c:230:mmove_t hover_move_land = {FRAME_land01, FRAME_land01, hover_frames_land, NULL};
hover_frames_pain1 usage ===
m_hover.c:193:mframe_t hover_frames_pain1 [] =
m_hover.c:224:mmove_t hover_move_pain1 = {FRAME_pain101, FRAME_pain128, hover_frames_pain1, hover_run};
hover_frames_pain2 usage ===
m_hover.c:176:mframe_t hover_frames_pain2 [] =
m_hover.c:191:mmove_t hover_move_pain2 = {FRAME_pain201, FRAME_pain212, hover_frames_pain2, hover_run};
hover_frames_pain3 usage ===
m_hover.c:162:mframe_t hover_frames_pain3 [] =
m_hover.c:174:mmove_t hover_move_pain3 = {FRAME_pain301, FRAME_pain309, hover_frames_pain3, hover_run};
hover_frames_run usage ===
m_hover.c:312:mframe_t hover_frames_run [] =
m_hover.c:350:mmove_t hover_move_run = {FRAME_forwrd01, FRAME_forwrd35, hover_frames_run, NULL};
hover_frames_stand usage ===
m_hover.c:65:mframe_t hover_frames_stand [] =
m_hover.c:98:mmove_t	hover_move_stand = {FRAME_stand01, FRAME_stand30, hover_frames_stand, NULL};
hover_frames_start_attack usage ===
m_hover.c:397:mframe_t hover_frames_start_attack [] =
m_hover.c:403:mmove_t hover_move_start_attack = {FRAME_attak101, FRAME_attak103, hover_frames_start_attack, hover_attack};
hover_frames_stop1 usage ===
m_hover.c:100:mframe_t hover_frames_stop1 [] =
m_hover.c:112:mmove_t hover_move_stop1 = {FRAME_stop101, FRAME_stop109, hover_frames_stop1, NULL};
hover_frames_stop2 usage ===
m_hover.c:114:mframe_t hover_frames_stop2 [] =
m_hover.c:125:mmove_t hover_move_stop2 = {FRAME_stop201, FRAME_stop208, hover_frames_stop2, NULL};
hover_frames_takeoff usage ===
m_hover.c:127:mframe_t hover_frames_takeoff [] =
m_hover.c:160:mmove_t hover_move_takeoff = {FRAME_takeof01, FRAME_takeof30, hover_frames_takeoff, NULL};
hover_frames_walk usage ===
m_hover.c:272:mframe_t hover_frames_walk [] =
m_hover.c:310:mmove_t hover_move_walk = {FRAME_forwrd01, FRAME_forwrd35, hover_frames_walk, NULL};
hover_move_attack1 usage ===
m_hover.c:411:mmove_t hover_move_attack1 = {FRAME_attak104, FRAME_attak106, hover_frames_attack1, NULL};
m_hover.c:427:				self->monsterinfo.currentmove = &hover_move_attack1;
m_hover.c:483:	self->monsterinfo.currentmove = &hover_move_attack1;
hover_move_backward usage ===
m_hover.c:395:mmove_t hover_move_backward = {FRAME_backwd01, FRAME_backwd24, hover_frames_backward, NULL};
hover_move_death1 usage ===
m_hover.c:366:mmove_t hover_move_death1 = {FRAME_death101, FRAME_death111, hover_frames_death1, hover_dead};
m_hover.c:568:	self->monsterinfo.currentmove = &hover_move_death1;
hover_move_end_attack usage ===
m_hover.c:419:mmove_t hover_move_end_attack = {FRAME_attak107, FRAME_attak108, hover_frames_end_attack, hover_run};
m_hover.c:430:	self->monsterinfo.currentmove = &hover_move_end_attack;
hover_move_forward usage ===
m_hover.c:270:mmove_t hover_move_forward = {FRAME_forwrd01, FRAME_forwrd35, hover_frames_forward, NULL};
hover_move_land usage ===
m_hover.c:230:mmove_t hover_move_land = {FRAME_land01, FRAME_land01, hover_frames_land, NULL};
hover_move_pain1 usage ===
m_hover.c:224:mmove_t hover_move_pain1 = {FRAME_pain101, FRAME_pain128, hover_frames_pain1, hover_run};
m_hover.c:516:		self->monsterinfo.currentmove = &hover_move_pain1;
hover_move_pain2 usage ===
m_hover.c:191:mmove_t hover_move_pain2 = {FRAME_pain201, FRAME_pain212, hover_frames_pain2, hover_run};
m_hover.c:510:			self->monsterinfo.currentmove = &hover_move_pain2;
hover_move_pain3 usage ===
m_hover.c:174:mmove_t hover_move_pain3 = {FRAME_pain301, FRAME_pain309, hover_frames_pain3, hover_run};
m_hover.c:505:			self->monsterinfo.currentmove = &hover_move_pain3;
hover_move_run usage ===
m_hover.c:350:mmove_t hover_move_run = {FRAME_forwrd01, FRAME_forwrd35, hover_frames_run, NULL};
m_hover.c:468:		self->monsterinfo.currentmove = &hover_move_run;
hover_move_stand usage ===
m_hover.c:98:mmove_t	hover_move_stand = {FRAME_stand01, FRAME_stand30, hover_frames_stand, NULL};
m_hover.c:460:		self->monsterinfo.currentmove = &hover_move_stand;
m_hover.c:466:		self->monsterinfo.currentmove = &hover_move_stand;
m_hover.c:616:	self->monsterinfo.currentmove = &hover_move_stand;	
hover_move_start_attack usage ===
m_hover.c:403:mmove_t hover_move_start_attack = {FRAME_attak101, FRAME_attak103, hover_frames_start_attack, hover_attack};
m_hover.c:478:	self->monsterinfo.currentmove = &hover_move_start_attack;
hover_move_stop1 usage ===
m_hover.c:112:mmove_t hover_move_stop1 = {FRAME_stop101, FRAME_stop109, hover_frames_stop1, NULL};
hover_move_stop2 usage ===
m_hover.c:125:mmove_t hover_move_stop2 = {FRAME_stop201, FRAME_stop208, hover_frames_stop2, NULL};
hover_move_takeoff usage ===
m_hover.c:160:mmove_t hover_move_takeoff = {FRAME_takeof01, FRAME_takeof30, hover_frames_takeoff, NULL};
hover_move_walk usage ===
m_hover.c:310:mmove_t hover_move_walk = {FRAME_forwrd01, FRAME_forwrd35, hover_frames_walk, NULL};
m_hover.c:473:	self->monsterinfo.currentmove = &hover_move_walk;
infantry_frames_attack1 usage ===
m_infantry.c:497:mframe_t infantry_frames_attack1 [] =
m_infantry.c:515:mmove_t infantry_move_attack1 = {FRAME_attak101, FRAME_attak115, infantry_frames_attack1, infantry_run};
infantry_frames_attack2 usage ===
m_infantry.c:532:mframe_t infantry_frames_attack2 [] =
m_infantry.c:543:mmove_t infantry_move_attack2 = {FRAME_attak201, FRAME_attak208, infantry_frames_attack2, infantry_run};
infantry_frames_death1 usage ===
m_infantry.c:315:mframe_t infantry_frames_death1 [] =
m_infantry.c:338:mmove_t infantry_move_death1 = {FRAME_death101, FRAME_death120, infantry_frames_death1, infantry_dead};
infantry_frames_death2 usage ===
m_infantry.c:341:mframe_t infantry_frames_death2 [] =
m_infantry.c:369:mmove_t infantry_move_death2 = {FRAME_death201, FRAME_death225, infantry_frames_death2, infantry_dead};
infantry_frames_death3 usage ===
m_infantry.c:371:mframe_t infantry_frames_death3 [] =
m_infantry.c:383:mmove_t infantry_move_death3 = {FRAME_death301, FRAME_death309, infantry_frames_death3, infantry_dead};
infantry_frames_duck usage ===
m_infantry.c:456:mframe_t infantry_frames_duck [] =
m_infantry.c:464:mmove_t infantry_move_duck = {FRAME_duck01, FRAME_duck05, infantry_frames_duck, infantry_run};
infantry_frames_fidget usage ===
m_infantry.c:81:mframe_t infantry_frames_fidget [] =
m_infantry.c:133:mmove_t infantry_move_fidget = {FRAME_stand01, FRAME_stand49, infantry_frames_fidget, infantry_stand};
infantry_frames_pain1 usage ===
m_infantry.c:185:mframe_t infantry_frames_pain1 [] =
m_infantry.c:198:mmove_t infantry_move_pain1 = {FRAME_pain101, FRAME_pain110, infantry_frames_pain1, infantry_run};
infantry_frames_pain2 usage ===
m_infantry.c:200:mframe_t infantry_frames_pain2 [] =
m_infantry.c:213:mmove_t infantry_move_pain2 = {FRAME_pain201, FRAME_pain210, infantry_frames_pain2, infantry_run};
infantry_frames_run usage ===
m_infantry.c:163:mframe_t infantry_frames_run [] =
m_infantry.c:174:mmove_t infantry_move_run = {FRAME_run01, FRAME_run08, infantry_frames_run, NULL};
infantry_frames_stand usage ===
m_infantry.c:48:mframe_t infantry_frames_stand [] =
m_infantry.c:73:mmove_t infantry_move_stand = {FRAME_stand50, FRAME_stand71, infantry_frames_stand, NULL};
infantry_frames_walk usage ===
m_infantry.c:141:mframe_t infantry_frames_walk [] =
m_infantry.c:156:mmove_t infantry_move_walk = {FRAME_walk03, FRAME_walk14, infantry_frames_walk, NULL};
infantry_move_attack1 usage ===
m_infantry.c:515:mmove_t infantry_move_attack1 = {FRAME_attak101, FRAME_attak115, infantry_frames_attack1, infantry_run};
m_infantry.c:550:		self->monsterinfo.currentmove = &infantry_move_attack1;
infantry_move_attack2 usage ===
m_infantry.c:543:mmove_t infantry_move_attack2 = {FRAME_attak201, FRAME_attak208, infantry_frames_attack2, infantry_run};
m_infantry.c:548:		self->monsterinfo.currentmove = &infantry_move_attack2;
infantry_move_death1 usage ===
m_infantry.c:338:mmove_t infantry_move_death1 = {FRAME_death101, FRAME_death120, infantry_frames_death1, infantry_dead};
m_infantry.c:413:		self->monsterinfo.currentmove = &infantry_move_death1;
infantry_move_death2 usage ===
m_infantry.c:369:mmove_t infantry_move_death2 = {FRAME_death201, FRAME_death225, infantry_frames_death2, infantry_dead};
m_infantry.c:418:		self->monsterinfo.currentmove = &infantry_move_death2;
infantry_move_death3 usage ===
m_infantry.c:383:mmove_t infantry_move_death3 = {FRAME_death301, FRAME_death309, infantry_frames_death3, infantry_dead};
m_infantry.c:423:		self->monsterinfo.currentmove = &infantry_move_death3;
infantry_move_duck usage ===
m_infantry.c:464:mmove_t infantry_move_duck = {FRAME_duck01, FRAME_duck05, infantry_frames_duck, infantry_run};
m_infantry.c:474:	self->monsterinfo.currentmove = &infantry_move_duck;
infantry_move_fidget usage ===
m_infantry.c:133:mmove_t infantry_move_fidget = {FRAME_stand01, FRAME_stand49, infantry_frames_fidget, infantry_stand};
m_infantry.c:137:	self->monsterinfo.currentmove = &infantry_move_fidget;
infantry_move_pain1 usage ===
m_infantry.c:198:mmove_t infantry_move_pain1 = {FRAME_pain101, FRAME_pain110, infantry_frames_pain1, infantry_run};
m_infantry.c:233:		self->monsterinfo.currentmove = &infantry_move_pain1;
infantry_move_pain2 usage ===
m_infantry.c:213:mmove_t infantry_move_pain2 = {FRAME_pain201, FRAME_pain210, infantry_frames_pain2, infantry_run};
m_infantry.c:238:		self->monsterinfo.currentmove = &infantry_move_pain2;
infantry_move_run usage ===
m_infantry.c:174:mmove_t infantry_move_run = {FRAME_run01, FRAME_run08, infantry_frames_run, NULL};
m_infantry.c:181:		self->monsterinfo.currentmove = &infantry_move_run;
infantry_move_stand usage ===
m_infantry.c:73:mmove_t infantry_move_stand = {FRAME_stand50, FRAME_stand71, infantry_frames_stand, NULL};
m_infantry.c:77:	self->monsterinfo.currentmove = &infantry_move_stand;
m_infantry.c:179:		self->monsterinfo.currentmove = &infantry_move_stand;
m_infantry.c:603:	self->monsterinfo.currentmove = &infantry_move_stand;
infantry_move_walk usage ===
m_infantry.c:156:mmove_t infantry_move_walk = {FRAME_walk03, FRAME_walk14, infantry_frames_walk, NULL};
m_infantry.c:160:	self->monsterinfo.currentmove = &infantry_move_walk;
insane_frames_crawl usage ===
m_insane.c:353:mframe_t insane_frames_crawl [] =
m_insane.c:365:mmove_t insane_move_crawl = {FRAME_crawl1, FRAME_crawl9, insane_frames_crawl, NULL};
m_insane.c:366:mmove_t insane_move_runcrawl = {FRAME_crawl1, FRAME_crawl9, insane_frames_crawl, NULL};
insane_frames_crawl_death usage ===
m_insane.c:382:mframe_t insane_frames_crawl_death [] =
m_insane.c:392:mmove_t insane_move_crawl_death = {FRAME_cr_death10, FRAME_cr_death16, insane_frames_crawl_death, insane_dead};
insane_frames_crawl_pain usage ===
m_insane.c:368:mframe_t insane_frames_crawl_pain [] =
m_insane.c:380:mmove_t insane_move_crawl_pain = {FRAME_cr_pain2, FRAME_cr_pain10, insane_frames_crawl_pain, insane_run};
insane_frames_cross usage ===
m_insane.c:394:mframe_t insane_frames_cross [] =
m_insane.c:412:mmove_t insane_move_cross = {FRAME_cross1, FRAME_cross15, insane_frames_cross, insane_cross};
insane_frames_down usage ===
m_insane.c:198:mframe_t insane_frames_down [] =
m_insane.c:262:mmove_t insane_move_down = {FRAME_stand100, FRAME_stand160, insane_frames_down, insane_onground};
insane_frames_downtoup usage ===
m_insane.c:163:mframe_t insane_frames_downtoup [] =
m_insane.c:185:mmove_t insane_move_downtoup = {FRAME_stand41, FRAME_stand59, insane_frames_downtoup, insane_stand};
insane_frames_jumpdown usage ===
m_insane.c:187:mframe_t insane_frames_jumpdown [] =
m_insane.c:195:mmove_t insane_move_jumpdown = {FRAME_stand96, FRAME_stand100, insane_frames_jumpdown, insane_onground};
insane_frames_stand_death usage ===
m_insane.c:331:mframe_t insane_frames_stand_death [] =
m_insane.c:351:mmove_t insane_move_stand_death = {FRAME_st_death2, FRAME_st_death18, insane_frames_stand_death, insane_dead};
insane_frames_stand_insane usage ===
m_insane.c:79:mframe_t insane_frames_stand_insane [] =
m_insane.c:112:mmove_t insane_move_stand_insane = {FRAME_stand65, FRAME_stand94, insane_frames_stand_insane, insane_stand};
insane_frames_stand_normal usage ===
m_insane.c:68:mframe_t insane_frames_stand_normal [] =
m_insane.c:77:mmove_t insane_move_stand_normal = {FRAME_stand60, FRAME_stand65, insane_frames_stand_normal, insane_stand};
insane_frames_stand_pain usage ===
m_insane.c:315:mframe_t insane_frames_stand_pain [] =
m_insane.c:329:mmove_t insane_move_stand_pain = {FRAME_st_pain2, FRAME_st_pain12, insane_frames_stand_pain, insane_run};
insane_frames_struggle_cross usage ===
m_insane.c:414:mframe_t insane_frames_struggle_cross [] =
m_insane.c:432:mmove_t insane_move_struggle_cross = {FRAME_cross16, FRAME_cross30, insane_frames_struggle_cross, insane_cross};
insane_frames_uptodown usage ===
m_insane.c:114:mframe_t insane_frames_uptodown [] =
m_insane.c:160:mmove_t insane_move_uptodown = {FRAME_stand1, FRAME_stand40, insane_frames_uptodown, insane_onground};
insane_frames_walk_insane usage ===
m_insane.c:283:mframe_t insane_frames_walk_insane [] =
m_insane.c:312:mmove_t insane_move_walk_insane = {FRAME_walk1, FRAME_walk26, insane_frames_walk_insane, insane_walk};
m_insane.c:313:mmove_t insane_move_run_insane = {FRAME_walk1, FRAME_walk26, insane_frames_walk_insane, insane_run};
insane_frames_walk_normal usage ===
m_insane.c:264:mframe_t insane_frames_walk_normal [] =
m_insane.c:280:mmove_t insane_move_walk_normal = {FRAME_walk27, FRAME_walk39, insane_frames_walk_normal, insane_walk};
m_insane.c:281:mmove_t insane_move_run_normal = {FRAME_walk27, FRAME_walk39, insane_frames_walk_normal, insane_run};
insane_move_crawl usage ===
m_insane.c:365:mmove_t insane_move_crawl = {FRAME_crawl1, FRAME_crawl9, insane_frames_crawl, NULL};
m_insane.c:451:		self->monsterinfo.currentmove = &insane_move_crawl;
insane_move_crawl_death usage ===
m_insane.c:392:mmove_t insane_move_crawl_death = {FRAME_cr_death10, FRAME_cr_death16, insane_frames_crawl_death, insane_dead};
m_insane.c:614:			self->monsterinfo.currentmove = &insane_move_crawl_death;
insane_move_crawl_pain usage ===
m_insane.c:380:mmove_t insane_move_crawl_pain = {FRAME_cr_pain2, FRAME_cr_pain10, insane_frames_crawl_pain, insane_run};
m_insane.c:512:		self->monsterinfo.currentmove = &insane_move_crawl_pain;
insane_move_cross usage ===
m_insane.c:412:mmove_t insane_move_cross = {FRAME_cross1, FRAME_cross15, insane_frames_cross, insane_cross};
m_insane.c:437:		self->monsterinfo.currentmove = &insane_move_cross;
m_insane.c:552:		self->monsterinfo.currentmove = &insane_move_cross;
insane_move_down usage ===
m_insane.c:262:mmove_t insane_move_down = {FRAME_stand100, FRAME_stand160, insane_frames_down, insane_onground};
m_insane.c:447:			self->monsterinfo.currentmove = &insane_move_down;
m_insane.c:464:			self->monsterinfo.currentmove = &insane_move_down;
m_insane.c:521:	self->monsterinfo.currentmove = &insane_move_down;
m_insane.c:557:		self->monsterinfo.currentmove = &insane_move_down;
insane_move_downtoup usage ===
m_insane.c:185:mmove_t insane_move_downtoup = {FRAME_stand41, FRAME_stand59, insane_frames_downtoup, insane_stand};
m_insane.c:544:		self->monsterinfo.currentmove = &insane_move_downtoup;				
insane_move_jumpdown usage ===
m_insane.c:195:mmove_t insane_move_jumpdown = {FRAME_stand96, FRAME_stand100, insane_frames_jumpdown, insane_onground};
m_insane.c:534:			self->monsterinfo.currentmove = &insane_move_jumpdown; 
insane_move_run_insane usage ===
m_insane.c:313:mmove_t insane_move_run_insane = {FRAME_walk1, FRAME_walk26, insane_frames_walk_insane, insane_run};
m_insane.c:473:			self->monsterinfo.currentmove = &insane_move_run_insane;
insane_move_run_normal usage ===
m_insane.c:281:mmove_t insane_move_run_normal = {FRAME_walk27, FRAME_walk39, insane_frames_walk_normal, insane_run};
m_insane.c:471:			self->monsterinfo.currentmove = &insane_move_run_normal;
insane_move_runcrawl usage ===
m_insane.c:366:mmove_t insane_move_runcrawl = {FRAME_crawl1, FRAME_crawl9, insane_frames_crawl, NULL};
m_insane.c:468:		self->monsterinfo.currentmove = &insane_move_runcrawl;
insane_move_stand_death usage ===
m_insane.c:351:mmove_t insane_move_stand_death = {FRAME_st_death2, FRAME_st_death18, insane_frames_stand_death, insane_dead};
m_insane.c:616:			self->monsterinfo.currentmove = &insane_move_stand_death;
insane_move_stand_insane usage ===
m_insane.c:112:mmove_t insane_move_stand_insane = {FRAME_stand65, FRAME_stand94, insane_frames_stand_insane, insane_stand};
m_insane.c:562:			self->monsterinfo.currentmove = &insane_move_stand_insane;
insane_move_stand_normal usage ===
m_insane.c:77:mmove_t insane_move_stand_normal = {FRAME_stand60, FRAME_stand65, insane_frames_stand_normal, insane_stand};
m_insane.c:560:			self->monsterinfo.currentmove = &insane_move_stand_normal;
m_insane.c:679:	self->monsterinfo.currentmove = &insane_move_stand_normal;
insane_move_stand_pain usage ===
m_insane.c:329:mmove_t insane_move_stand_pain = {FRAME_st_pain2, FRAME_st_pain12, insane_frames_stand_pain, insane_run};
m_insane.c:515:		self->monsterinfo.currentmove = &insane_move_stand_pain;
insane_move_struggle_cross usage ===
m_insane.c:432:mmove_t insane_move_struggle_cross = {FRAME_cross16, FRAME_cross30, insane_frames_struggle_cross, insane_cross};
m_insane.c:439:		self->monsterinfo.currentmove = &insane_move_struggle_cross;
m_insane.c:506:		self->monsterinfo.currentmove = &insane_move_struggle_cross;			
insane_move_uptodown usage ===
m_insane.c:160:mmove_t insane_move_uptodown = {FRAME_stand1, FRAME_stand40, insane_frames_uptodown, insane_onground};
m_insane.c:532:			self->monsterinfo.currentmove = &insane_move_uptodown;
insane_move_walk_insane usage ===
m_insane.c:312:mmove_t insane_move_walk_insane = {FRAME_walk1, FRAME_walk26, insane_frames_walk_insane, insane_walk};
m_insane.c:456:			self->monsterinfo.currentmove = &insane_move_walk_insane;
insane_move_walk_normal usage ===
m_insane.c:280:mmove_t insane_move_walk_normal = {FRAME_walk27, FRAME_walk39, insane_frames_walk_normal, insane_walk};
m_insane.c:454:			self->monsterinfo.currentmove = &insane_move_walk_normal;
ipfilters usage ===
g_svcmds.c:68:ipfilter_t	ipfilters[MAX_IPFILTERS];
g_svcmds.c:146:		if ( (in & ipfilters[i].mask) == ipfilters[i].compare)
g_svcmds.c:168:		if (ipfilters[i].compare == 0xffffffff)
g_svcmds.c:180:	if (!StringToFilter (gi.argv(2), &ipfilters[i]))
g_svcmds.c:181:		ipfilters[i].compare = 0xffffffff;
g_svcmds.c:203:		if (ipfilters[i].mask == f.mask
g_svcmds.c:204:		&& ipfilters[i].compare == f.compare)
g_svcmds.c:207:				ipfilters[j-1] = ipfilters[j];
g_svcmds.c:228:		*(unsigned *)b = ipfilters[i].compare;
g_svcmds.c:266:		*(unsigned *)b = ipfilters[i].compare;
itemlist usage ===
g_cmds.c:85:		it = &itemlist[index];
g_cmds.c:117:		it = &itemlist[index];
g_cmds.c:188:			it = itemlist + i;
g_cmds.c:203:			it = itemlist + i;
g_cmds.c:250:			it = itemlist + i;
g_cmds.c:509:	it = &itemlist[ent->client->pers.selected_item];
g_cmds.c:543:		it = &itemlist[index];
g_cmds.c:579:		it = &itemlist[index];
g_cmds.c:609:	it = &itemlist[index];
g_cmds.c:634:	it = &itemlist[ent->client->pers.selected_item];
g_items.c:67:	return &itemlist[index];
g_items.c:82:	it = itemlist;
g_items.c:105:	it = itemlist;
g_items.c:1134:gitem_t	itemlist[] = 
g_items.c:2188:	game.num_items = sizeof(itemlist)/sizeof(itemlist[0]) - 1;
g_items.c:2207:		it = &itemlist[i];
g_save.c:272:			index = *(gitem_t **)p - itemlist;
g_save.c:375:			*(gitem_t **)p = &itemlist[index];
g_spawn.c:291:	for (i=0,item=itemlist ; i<game.num_items ; i++,item++)
p_client.c:537:			if (coop->value && itemlist[n].flags & IT_KEY)
p_client.c:1136://			if (itemlist[n].flags & IT_KEY)
p_hud.c:108:					if (itemlist[n].flags & IT_KEY)
p_hud.c:399:		item = &itemlist[ent->client->ammo_index];
p_hud.c:483:		ent->client->ps.stats[STAT_SELECTED_ICON] = gi.imageindex (itemlist[ent->client->pers.selected_item].icon);
jacketarmor_info usage ===
g_items.c:39:gitem_armor_t jacketarmor_info	= { 25,  50, .30, .00, ARMOR_JACKET};
g_items.c:641:			oldinfo = &jacketarmor_info;
g_items.c:1208:		&jacketarmor_info,
jorg_frames_attack1 usage ===
m_boss31.c:374:mframe_t jorg_frames_attack1[]=
m_boss31.c:383:mmove_t jorg_move_attack1 = {FRAME_attak109, FRAME_attak114, jorg_frames_attack1, jorg_reattack1};
jorg_frames_attack2 usage ===
m_boss31.c:343:mframe_t jorg_frames_attack2 []=
m_boss31.c:359:mmove_t jorg_move_attack2 = {FRAME_attak201, FRAME_attak213, jorg_frames_attack2, jorg_run};
jorg_frames_death1 usage ===
m_boss31.c:288:mframe_t jorg_frames_death1 [] =
m_boss31.c:341:mmove_t jorg_move_death = {FRAME_death01, FRAME_death50, jorg_frames_death1, jorg_dead};
jorg_frames_end_attack1 usage ===
m_boss31.c:385:mframe_t jorg_frames_end_attack1[]=
m_boss31.c:392:mmove_t jorg_move_end_attack1 = {FRAME_attak115, FRAME_attak118, jorg_frames_end_attack1, jorg_run};
jorg_frames_end_walk usage ===
m_boss31.c:218:mframe_t jorg_frames_end_walk [] =
m_boss31.c:227:mmove_t jorg_move_end_walk = {FRAME_walk20, FRAME_walk25, jorg_frames_end_walk, NULL};
jorg_frames_pain1 usage ===
m_boss31.c:280:mframe_t jorg_frames_pain1 [] =
m_boss31.c:286:mmove_t jorg_move_pain1 = {FRAME_pain101, FRAME_pain103, jorg_frames_pain1, jorg_run};
jorg_frames_pain2 usage ===
m_boss31.c:272:mframe_t jorg_frames_pain2 [] =
m_boss31.c:278:mmove_t jorg_move_pain2 = {FRAME_pain201, FRAME_pain203, jorg_frames_pain2, jorg_run};
jorg_frames_pain3 usage ===
m_boss31.c:242:mframe_t jorg_frames_pain3 [] =
m_boss31.c:270:mmove_t jorg_move_pain3 = {FRAME_pain301, FRAME_pain325, jorg_frames_pain3, jorg_run};
jorg_frames_run usage ===
m_boss31.c:166:mframe_t jorg_frames_run [] =
m_boss31.c:183:mmove_t	jorg_move_run = {FRAME_walk06, FRAME_walk19, jorg_frames_run, NULL};
jorg_frames_stand usage ===
m_boss31.c:83:mframe_t jorg_frames_stand []=
m_boss31.c:137:mmove_t	jorg_move_stand = {FRAME_stand01, FRAME_stand51, jorg_frames_stand, NULL};
jorg_frames_start_attack1 usage ===
m_boss31.c:361:mframe_t jorg_frames_start_attack1 [] =
m_boss31.c:372:mmove_t jorg_move_start_attack1 = {FRAME_attak101, FRAME_attak108, jorg_frames_start_attack1, jorg_attack1};
jorg_frames_start_walk usage ===
m_boss31.c:189:mframe_t jorg_frames_start_walk [] =
m_boss31.c:197:mmove_t jorg_move_start_walk = {FRAME_walk01, FRAME_walk05, jorg_frames_start_walk, NULL};
jorg_frames_walk usage ===
m_boss31.c:199:mframe_t jorg_frames_walk [] =
m_boss31.c:216:mmove_t	jorg_move_walk = {FRAME_walk06, FRAME_walk19, jorg_frames_walk, NULL};
jorg_move_attack1 usage ===
m_boss31.c:383:mmove_t jorg_move_attack1 = {FRAME_attak109, FRAME_attak114, jorg_frames_attack1, jorg_reattack1};
m_boss31.c:398:			self->monsterinfo.currentmove = &jorg_move_attack1;
m_boss31.c:413:	self->monsterinfo.currentmove = &jorg_move_attack1;
jorg_move_attack2 usage ===
m_boss31.c:359:mmove_t jorg_move_attack2 = {FRAME_attak201, FRAME_attak213, jorg_frames_attack2, jorg_run};
m_boss31.c:556:		self->monsterinfo.currentmove = &jorg_move_attack2;
jorg_move_death usage ===
m_boss31.c:341:mmove_t jorg_move_death = {FRAME_death01, FRAME_death50, jorg_frames_death1, jorg_dead};
m_boss31.c:596:	self->monsterinfo.currentmove = &jorg_move_death;
jorg_move_end_attack1 usage ===
m_boss31.c:392:mmove_t jorg_move_end_attack1 = {FRAME_attak115, FRAME_attak118, jorg_frames_end_attack1, jorg_run};
m_boss31.c:402:			self->monsterinfo.currentmove = &jorg_move_end_attack1;	
m_boss31.c:407:		self->monsterinfo.currentmove = &jorg_move_end_attack1;	
jorg_move_end_walk usage ===
m_boss31.c:227:mmove_t jorg_move_end_walk = {FRAME_walk20, FRAME_walk25, jorg_frames_end_walk, NULL};
jorg_move_pain1 usage ===
m_boss31.c:286:mmove_t jorg_move_pain1 = {FRAME_pain101, FRAME_pain103, jorg_frames_pain1, jorg_run};
m_boss31.c:458:		self->monsterinfo.currentmove = &jorg_move_pain1;
jorg_move_pain2 usage ===
m_boss31.c:278:mmove_t jorg_move_pain2 = {FRAME_pain201, FRAME_pain203, jorg_frames_pain2, jorg_run};
m_boss31.c:463:		self->monsterinfo.currentmove = &jorg_move_pain2;
jorg_move_pain3 usage ===
m_boss31.c:270:mmove_t jorg_move_pain3 = {FRAME_pain301, FRAME_pain325, jorg_frames_pain3, jorg_run};
m_boss31.c:470:			self->monsterinfo.currentmove = &jorg_move_pain3;
jorg_move_run usage ===
m_boss31.c:183:mmove_t	jorg_move_run = {FRAME_walk06, FRAME_walk19, jorg_frames_run, NULL};
m_boss31.c:239:		self->monsterinfo.currentmove = &jorg_move_run;
jorg_move_stand usage ===
m_boss31.c:137:mmove_t	jorg_move_stand = {FRAME_stand01, FRAME_stand51, jorg_frames_stand, NULL};
m_boss31.c:163:	self->monsterinfo.currentmove = &jorg_move_stand;
m_boss31.c:237:		self->monsterinfo.currentmove = &jorg_move_stand;
m_boss31.c:745:	self->monsterinfo.currentmove = &jorg_move_stand;
jorg_move_start_attack1 usage ===
m_boss31.c:372:mmove_t jorg_move_start_attack1 = {FRAME_attak101, FRAME_attak108, jorg_frames_start_attack1, jorg_attack1};
m_boss31.c:551:		self->monsterinfo.currentmove = &jorg_move_start_attack1;
jorg_move_start_walk usage ===
m_boss31.c:197:mmove_t jorg_move_start_walk = {FRAME_walk01, FRAME_walk05, jorg_frames_start_walk, NULL};
jorg_move_walk usage ===
m_boss31.c:216:mmove_t	jorg_move_walk = {FRAME_walk06, FRAME_walk19, jorg_frames_walk, NULL};
m_boss31.c:231:		self->monsterinfo.currentmove = &jorg_move_walk;
level usage ===
g_ai.c:41:Called once each frame to set level.sight_client to the
g_ai.c:55:	if (level.sight_client == NULL)
g_ai.c:58:		start = level.sight_client - g_edicts;
g_ai.c:71:			level.sight_client = ent;
g_ai.c:76:			level.sight_client = NULL;
g_ai.c:135:	if (level.time > self->monsterinfo.pausetime)
g_ai.c:141:	if (!(self->spawnflags & 1) && (self->monsterinfo.idle) && (level.time > self->monsterinfo.idle_time))
g_ai.c:146:			self->monsterinfo.idle_time = level.time + 15 + random() * 15;
g_ai.c:150:			self->monsterinfo.idle_time = level.time + random() * 15;
g_ai.c:171:	if ((self->monsterinfo.search) && (level.time > self->monsterinfo.idle_time))
g_ai.c:176:			self->monsterinfo.idle_time = level.time + 15 + random() * 15;
g_ai.c:180:			self->monsterinfo.idle_time = level.time + random() * 15;
g_ai.c:352:		level.sight_entity = self;
g_ai.c:353:		level.sight_entity_framenum = level.framenum;
g_ai.c:354:		level.sight_entity->light_level = 128;
g_ai.c:357:	self->show_hostile = level.time + 1;		// wake up other monsters
g_ai.c:360:	self->monsterinfo.trail_time = level.time;
g_ai.c:437:	if ((level.sight_entity_framenum >= (level.framenum - 1)) && !(self->spawnflags & 1) )
g_ai.c:439:		client = level.sight_entity;
g_ai.c:445:	else if (level.sound_entity_framenum >= (level.framenum - 1))
g_ai.c:447:		client = level.sound_entity;
g_ai.c:450:	else if (!(self->enemy) && (level.sound2_entity_framenum >= (level.framenum - 1)) && !(self->spawnflags & 1) )
g_ai.c:452:		client = level.sound2_entity;
g_ai.c:457:		client = level.sight_client;
g_ai.c:509:			if (client->show_hostile < level.time && !infront (self, client))
g_ai.c:645:	if (level.time < self->monsterinfo.attack_finished)
g_ai.c:680:		self->monsterinfo.attack_finished = level.time + 2*random();
g_ai.c:784:			if ((level.time - self->enemy->teleport_time) > 5.0)
g_ai.c:798:				self->show_hostile = level.time + 1;
g_ai.c:857:				self->monsterinfo.pausetime = level.time + 100000000;
g_ai.c:864:	self->show_hostile = level.time + 1;		// wake up other monsters
g_ai.c:870:		self->monsterinfo.search_time = level.time + 5;
g_ai.c:875://	if (coop && self->monsterinfo.search_time < level.time)
g_ai.c:967:		self->monsterinfo.trail_time = level.time;
g_ai.c:978:	if ((self->monsterinfo.search_time) && (level.time > (self->monsterinfo.search_time + 20)))
g_ai.c:1007:		self->monsterinfo.search_time = level.time + 5;
g_cmds.c:650:	if((level.time - ent->client->respawn_time) < 5 || 
g_cmds.c:834:        if (level.time < cl->flood_locktill) {
g_cmds.c:836:				(int)(cl->flood_locktill - level.time));
g_cmds.c:843:			level.time - cl->flood_when[i] < flood_persecond->value) {
g_cmds.c:844:			cl->flood_locktill = level.time + flood_waitdelay->value;
g_cmds.c:851:		cl->flood_when[cl->flood_whenhead] = level.time;
g_cmds.c:887:			(level.framenum - e2->client->resp.enterframe) / 600,
g_cmds.c:888:			((level.framenum - e2->client->resp.enterframe) % 600)/10,
g_cmds.c:944:	if (level.intermissiontime)
g_combat.c:104:			level.killed_monsters++;
g_combat.c:245:	ent->powerarmor_time = level.time + 0.2;
g_combat.c:463:	if ((client && client->invincible_framenum > level.framenum ) && !(dflags & DAMAGE_NO_PROTECTION))
g_combat.c:465:		if (targ->pain_debounce_time < level.time)
g_combat.c:468:			targ->pain_debounce_time = level.time + 2;
g_combat.c:515:				targ->pain_debounce_time = level.time + 5;
g_func.c:93:	ent->nextthink = level.time + FRAMETIME;
g_func.c:108:	ent->nextthink = level.time + (frames * FRAMETIME);
g_func.c:123:		if (level.current_entity == ((ent->flags & FL_TEAMSLAVE) ? ent->teammaster : ent))
g_func.c:129:			ent->nextthink = level.time + FRAMETIME;
g_func.c:138:		ent->nextthink = level.time + FRAMETIME;
g_func.c:171:	ent->nextthink = level.time + FRAMETIME;
g_func.c:205:	ent->nextthink = level.time + frames * FRAMETIME;
g_func.c:213:	if (level.current_entity == ((ent->flags & FL_TEAMSLAVE) ? ent->teammaster : ent))
g_func.c:219:		ent->nextthink = level.time + FRAMETIME;
g_func.c:351:	ent->nextthink = level.time + FRAMETIME;
g_func.c:369:	ent->nextthink = level.time + 3;
g_func.c:448:		ent->nextthink = level.time + 1;	// the player is still on the plat, so delay going down
g_func.c:721:		self->nextthink = level.time + self->moveinfo.wait;
g_func.c:884:		self->nextthink = level.time + self->moveinfo.wait;
g_func.c:929:			self->nextthink = level.time + self->moveinfo.wait;
g_func.c:991:	if (level.time < self->touch_debounce_time)
g_func.c:993:	self->touch_debounce_time = level.time + 1.0;
g_func.c:1130:	if (level.time < self->touch_debounce_time)
g_func.c:1132:	self->touch_debounce_time = level.time + 5.0;
g_func.c:1224:	ent->nextthink = level.time + FRAMETIME;
g_func.c:1355:	ent->nextthink = level.time + FRAMETIME;
g_func.c:1473:	if (level.time < self->touch_debounce_time)
g_func.c:1478:	self->touch_debounce_time = level.time + 0.5;
g_func.c:1504:			self->nextthink = level.time + self->moveinfo.wait;
g_func.c:1627:		self->nextthink = level.time + FRAMETIME;
g_func.c:1687:		self->nextthink = level.time + FRAMETIME;
g_func.c:1753:	self->nextthink = level.time + FRAMETIME;
g_func.c:1774:	self->nextthink = level.time + self->wait + crandom() * self->random;
g_func.c:1790:		self->nextthink = level.time + self->delay;
g_func.c:1811:		self->nextthink = level.time + 1.0 + st.pausetime + self->delay + self->wait + crandom() * self->random;
g_func.c:1898:	self->nextthink = level.time + 1.0;
g_func.c:1911:	self->nextthink = level.time + self->wait;
g_func.c:1922:	self->nextthink = level.time + 1.0;
g_func.c:1953:	if (level.time < self->touch_debounce_time)
g_func.c:1955:	self->touch_debounce_time = level.time + 0.5;
g_items.c:151:	ent->nextthink = level.time + delay;
g_items.c:179:				quad_drop_timeout_hack = (ent->nextthink - level.time) / FRAMETIME;
g_items.c:356:	if (ent->client->quad_framenum > level.framenum)
g_items.c:359:		ent->client->quad_framenum = level.framenum + timeout;
g_items.c:371:	if (ent->client->breather_framenum > level.framenum)
g_items.c:374:		ent->client->breather_framenum = level.framenum + 300;
g_items.c:386:	if (ent->client->enviro_framenum > level.framenum)
g_items.c:389:		ent->client->enviro_framenum = level.framenum + 300;
g_items.c:401:	if (ent->client->invincible_framenum > level.framenum)
g_items.c:404:		ent->client->invincible_framenum = level.framenum + 300;
g_items.c:545:		self->nextthink = level.time + 1;
g_items.c:573:		ent->nextthink = level.time + 5;
g_items.c:782:		other->client->pickup_msg_time = level.time + 3.0;
g_items.c:838:		ent->nextthink = level.time + 29;
g_items.c:885:	dropped->nextthink = level.time + 1;
g_items.c:960:			ent->nextthink = level.time + FRAMETIME;
g_items.c:989:This will be called for each item spawned in a level,
g_items.c:1113:		ent->spawnflags |= (1 << (8 + level.power_cubes));
g_items.c:1114:		level.power_cubes++;
g_items.c:1124:	ent->nextthink = level.time + 2 * FRAMETIME;    // items start after other solids
g_items.c:1974:security pass for the security level
g_main.c:24:level_locals_t	level;
g_main.c:210:	Com_sprintf(level.nextmap, sizeof(level.nextmap), "%s", map);
g_main.c:211:	ent->map = level.nextmap;
g_main.c:228:	// stay on same level flag
g_main.c:231:		BeginIntermission (CreateTargetChangeLevel (level.mapname) );
g_main.c:241:			if (Q_stricmp(t, level.mapname) == 0) {
g_main.c:245:					if (f == NULL) // there isn't a first one, same level
g_main.c:246:						BeginIntermission (CreateTargetChangeLevel (level.mapname) );
g_main.c:261:	if (level.nextmap[0]) // go to a specific map
g_main.c:262:		BeginIntermission (CreateTargetChangeLevel (level.nextmap) );
g_main.c:267:			// so create a fake ent that goes back to the same level
g_main.c:268:			BeginIntermission (CreateTargetChangeLevel (level.mapname) );
g_main.c:312:	if (level.intermissiontime)
g_main.c:320:		if (level.time >= timelimit->value*60)
g_main.c:358:	Com_sprintf (command, sizeof(command), "gamemap \"%s\"\n", level.changemap);
g_main.c:360:	level.changemap = NULL;
g_main.c:361:	level.exitintermission = 0;
g_main.c:362:	level.intermissiontime = 0;
g_main.c:365:	// clear some things before going to next level
g_main.c:389:	level.framenum++;
g_main.c:390:	level.time = level.framenum*FRAMETIME;
g_main.c:397:	if (level.exitintermission)
g_main.c:413:		level.current_entity = ent;
g_misc.c:95:	self->nextthink = level.time + FRAMETIME;
g_misc.c:100:		self->nextthink = level.time + 8 + random()*10;
g_misc.c:125:			self->nextthink = level.time + FRAMETIME;
g_misc.c:178:	gib->nextthink = level.time + 10 + random()*10;
g_misc.c:223:	self->nextthink = level.time + 10 + random()*10;
g_misc.c:304:	chunk->nextthink = level.time + 5 + random()*5;
g_misc.c:382:		other->monsterinfo.pausetime = level.time + self->wait;
g_misc.c:389:		other->monsterinfo.pausetime = level.time + 100000000;
g_misc.c:442:		other->monsterinfo.pausetime = level.time + 100000000;
g_misc.c:491:Just for the debugging level.  Don't use
g_misc.c:496:	ent->nextthink = level.time + FRAMETIME;
g_misc.c:510:	ent->nextthink = level.time + 0.5;
g_misc.c:711:		self->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:969:	self->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:1008:	self->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:1035:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1039:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1053:	ent->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:1063:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1067:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1080:	ent->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:1091:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1095:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1108:	ent->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:1119:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1123:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1136:	ent->nextthink = level.time + 2 * FRAMETIME;
g_misc.c:1149:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1160:	self->nextthink = level.time + FRAMETIME;
g_misc.c:1188:	self->nextthink = level.time + 5 * FRAMETIME;
g_misc.c:1199:	ent->nextthink = level.time + FRAMETIME;
g_misc.c:1211:	ent->nextthink = level.time + FRAMETIME;
g_misc.c:1304:	ent->nextthink = level.time + FRAMETIME;
g_misc.c:1346:	diff = self->timestamp - level.time;
g_misc.c:1374:	self->timestamp = level.time;
g_misc.c:1434:	ent->nextthink = level.time + FRAMETIME;
g_misc.c:1449:		self->nextthink = level.time + FRAMETIME;
g_misc.c:1456:	self->nextthink = level.time + FRAMETIME;
g_misc.c:1510:	ent->nextthink = level.time + 30;
g_misc.c:1531:	ent->nextthink = level.time + 30;
g_misc.c:1552:	ent->nextthink = level.time + 30;
g_misc.c:1737:	self->nextthink = level.time + 1;
g_misc.c:1778:		self->nextthink = level.time + 1;
g_monster.c:120:	self->nextthink = level.time + 60;
g_monster.c:132:	self->nextthink = level.time + 5 + 10 * random();
g_monster.c:137:	self->monsterinfo.attack_finished = level.time + time;
g_monster.c:228:				ent->air_finished = level.time + 12;
g_monster.c:230:			else if (ent->air_finished < level.time)
g_monster.c:232:				if (ent->pain_debounce_time < level.time)
g_monster.c:234:					dmg = 2 + 2 * floor(level.time - ent->air_finished);
g_monster.c:238:					ent->pain_debounce_time = level.time + 1;
g_monster.c:246:				ent->air_finished = level.time + 9;
g_monster.c:248:			else if (ent->air_finished < level.time)
g_monster.c:250:				if (ent->pain_debounce_time < level.time)
g_monster.c:252:					dmg = 2 + 2 * floor(level.time - ent->air_finished);
g_monster.c:256:					ent->pain_debounce_time = level.time + 1;
g_monster.c:274:		if (ent->damage_debounce_time < level.time)
g_monster.c:276:			ent->damage_debounce_time = level.time + 0.2;
g_monster.c:282:		if (ent->damage_debounce_time < level.time)
g_monster.c:284:			ent->damage_debounce_time = level.time + 1;
g_monster.c:346:	if (ent->powerarmor_time > level.time)
g_monster.c:367:	self->nextthink = level.time + FRAMETIME;
g_monster.c:468:	self->air_finished = level.time + 12;
g_monster.c:487:	self->nextthink = level.time + FRAMETIME;
g_monster.c:550:		level.total_monsters++;
g_monster.c:552:	self->nextthink = level.time + FRAMETIME;
g_monster.c:556:	self->air_finished = level.time + 12;
g_monster.c:667:	self->nextthink = level.time + FRAMETIME;
g_monster.c:673:	if (!(self->spawnflags & 2) && level.time < 1)
g_phys.c:102:	if (thinktime > level.time+0.001)
g_save.c:457:This will be called whenever the game goes to a new level,
g_save.c:460:Game information include cross level data, like multi level
g_save.c:572:	temp = level;
g_save.c:586:		WriteField2 (f, field, (byte *)&level);
g_save.c:621:	fread (&level, sizeof(level), 1, f);
g_save.c:625:		ReadField (f, field, (byte *)&level);
g_save.c:678:level the same way it was when the level was saved.
g_save.c:701:	// free any dynamic memory allocated by loading the level
g_save.c:729:	// load the level locals
g_save.c:771:		// fire any cross-level triggers
g_save.c:774:				ent->nextthink = level.time + ent->delay;
g_spawn.c:542:	memset (&level, 0, sizeof(level));
g_spawn.c:545:	strncpy (level.mapname, mapname, sizeof(level.mapname)-1);
g_spawn.c:572:		if (!Q_stricmp(level.mapname, "command") && !Q_stricmp(ent->classname, "trigger_once") && !Q_stricmp(ent->model, "*27"))
g_spawn.c:814:		strcpy (level.nextmap, st.nextmap);
g_spawn.c:821:		strncpy (level.level_name, ent->message, sizeof(level.level_name));
g_spawn.c:824:		strncpy (level.level_name, level.mapname, sizeof(level.level_name));
g_spawn.c:851:	level.pic_health = gi.imageindex ("i_health");
g_target.c:47:-1 = none, send to whole level
g_target.c:49:2 = idle sound level
g_target.c:50:3 = ambient sound level
g_target.c:158:	level.found_secrets++;
g_target.c:177:	level.total_secrets++;
g_target.c:179:	if (!Q_stricmp(level.mapname, "mine3") && ent->s.origin[0] == 280 && ent->s.origin[1] == -2048 && ent->s.origin[2] == -624)
g_target.c:193:	level.found_goals++;
g_target.c:195:	if (level.found_goals == level.total_goals)
g_target.c:215:	level.total_goals++;
g_target.c:255:	self->nextthink = level.time + self->delay;
g_target.c:268:Changes level to "map" when fired
g_target.c:272:	if (level.intermissiontime)
g_target.c:292:			gi.bprintf (PRINT_HIGH, "%s exited the level.\n", activator->client->pers.netname);
g_target.c:312:   if((Q_stricmp(level.mapname, "fact1") == 0) && (Q_stricmp(ent->map, "fact3") == 0))
g_target.c:449:Once this trigger is touched/used, any trigger_crosslevel_target with the same trigger number is automatically used when a level is started within the same unit.  It is OK to check multiple triggers.  Message, delay, target, and killtarget also work.
g_target.c:485:	self->nextthink = level.time + self->delay;
g_target.c:557:	self->nextthink = level.time + FRAMETIME;
g_target.c:646:	self->nextthink = level.time + 1;
g_target.c:660:	style[0] = 'a' + self->movedir[0] + (level.time - self->timestamp) / FRAMETIME * self->movedir[2];
g_target.c:664:	if ((level.time - self->timestamp) < self->speed)
g_target.c:666:		self->nextthink = level.time + FRAMETIME;
g_target.c:711:	self->timestamp = level.time;
g_target.c:749:When triggered, this initiates a level-wide earthquake.
g_target.c:760:	if (self->last_move_time < level.time)
g_target.c:763:		self->last_move_time = level.time + 0.5;
g_target.c:781:	if (level.time < self->timestamp)
g_target.c:782:		self->nextthink = level.time + FRAMETIME;
g_target.c:787:	self->timestamp = level.time + self->count;
g_target.c:788:	self->nextthink = level.time + FRAMETIME;
g_trigger.c:55:		ent->nextthink = level.time + ent->wait;
g_trigger.c:61:		ent->nextthink = level.time + FRAMETIME;
g_trigger.c:155:You must set the key "target" to the name of another object in the level that has a matching "targetname".
g_trigger.c:224:		if (level.time < self->touch_debounce_time)
g_trigger.c:226:		self->touch_debounce_time = level.time + 5.0;
g_trigger.c:408:			if (other->fly_sound_debounce_time < level.time)
g_trigger.c:410:				other->fly_sound_debounce_time = level.time + 1.5;
g_trigger.c:475:	if (self->timestamp > level.time)
g_trigger.c:479:		self->timestamp = level.time + 1;
g_trigger.c:481:		self->timestamp = level.time + FRAMETIME;
g_trigger.c:485:		if ((level.framenum % 10) == 0)
g_trigger.c:529:gravity for the level.
g_turret.c:157:	self->nextthink = level.time + FRAMETIME;
g_turret.c:249:	self->nextthink = level.time + FRAMETIME;
g_turret.c:282:	// level the gun
g_turret.c:306:	self->nextthink = level.time + FRAMETIME;
g_turret.c:315:		self->monsterinfo.trail_time = level.time;
g_turret.c:324:				self->monsterinfo.trail_time = level.time;
g_turret.c:342:	if (level.time < self->monsterinfo.attack_finished)
g_turret.c:346:	if ((level.time - self->monsterinfo.trail_time) < reaction_time)
g_turret.c:349:	self->monsterinfo.attack_finished = level.time + reaction_time + 1.0;
g_turret.c:360:	self->nextthink = level.time + FRAMETIME;
g_turret.c:411:	level.total_monsters++;
g_turret.c:429:	self->nextthink = level.time + FRAMETIME;
g_utils.c:185:		t->nextthink = level.time + ent->delay;
g_utils.c:430:		if (!e->inuse && ( e->freetime < 2 || level.time - e->freetime > 0.5 ) )
g_utils.c:464:	ed->freetime = level.time;
g_weapon.c:373:	bolt->nextthink = level.time + 2;
g_weapon.c:510:	grenade->nextthink = level.time + timer;
g_weapon.c:543:	grenade->nextthink = level.time + timer;
g_weapon.c:638:	rocket->nextthink = level.time + 8000/speed;
g_weapon.c:760:	self->nextthink = level.time + FRAMETIME;
g_weapon.c:795:	self->nextthink = level.time + FRAMETIME;
g_weapon.c:879:	self->nextthink = level.time + FRAMETIME;
g_weapon.c:901:	bfg->nextthink = level.time + 8000/speed;
g_weapon.c:909:	bfg->nextthink = level.time + FRAMETIME;
m_actor.c:92:	if (level.time < 1.0)
m_actor.c:138:	if ((level.time < self->pain_debounce_time) && (!self->enemy))
m_actor.c:237:	if (level.time < self->pain_debounce_time)
m_actor.c:240:	self->pain_debounce_time = level.time + 3;
m_actor.c:376:	if (level.time >= self->monsterinfo.pausetime)
m_actor.c:397:	self->monsterinfo.pausetime = level.time + n * FRAMETIME;
m_actor.c:575:		other->monsterinfo.pausetime = level.time + 100000000;
m_berserk.c:320:	if (level.time < self->pain_debounce_time)
m_berserk.c:323:	self->pain_debounce_time = level.time + 3;
m_boss2.c:475:	if (level.time < self->pain_debounce_time)
m_boss2.c:478:	self->pain_debounce_time = level.time + 3;
m_boss2.c:587:	if (level.time < self->monsterinfo.attack_finished)
m_boss2.c:617:		self->monsterinfo.attack_finished = level.time + 2*random();
m_boss31.c:424:	if (level.time < self->pain_debounce_time)
m_boss31.c:451:	self->pain_debounce_time = level.time + 3;
m_boss31.c:646:	if (level.time < self->monsterinfo.attack_finished)
m_boss31.c:676:		self->monsterinfo.attack_finished = level.time + 2*random();
m_boss32.c:561:	if (level.time < self->pain_debounce_time)
m_boss32.c:569:	self->pain_debounce_time = level.time + 3;
m_boss32.c:637:		self->nextthink = level.time + FRAMETIME;
m_boss32.c:641:		self->nextthink = level.time + FRAMETIME;
m_boss32.c:654:	ent->nextthink = level.time + 2 * FRAMETIME;
m_boss32.c:760:	if (level.time < self->monsterinfo.attack_finished)
m_boss32.c:790:		self->monsterinfo.attack_finished = level.time + 2*random();
m_boss32.c:887:	player = level.sight_client;
m_boss32.c:911:	ent->nextthink = level.time + 0.8;
m_boss3.c:46:	ent->nextthink = level.time + FRAMETIME;
m_boss3.c:74:	self->nextthink = level.time + FRAMETIME;
m_brain.c:325:	if (level.time >= self->monsterinfo.pausetime)
m_brain.c:360:	self->monsterinfo.pausetime = level.time + eta + 0.5;
m_brain.c:549:	if (level.time < self->pain_debounce_time)
m_brain.c:552:	self->pain_debounce_time = level.time + 3;
m_chick.c:273:	if (level.time < self->pain_debounce_time)
m_chick.c:276:	self->pain_debounce_time = level.time + 3;
m_chick.c:398:	self->monsterinfo.pausetime = level.time + 1;
m_chick.c:404:	if (level.time >= self->monsterinfo.pausetime)
m_flipper.c:230:	if (level.time < self->pain_debounce_time)
m_flipper.c:233:	self->pain_debounce_time = level.time + 3;
m_float.c:573:	if (level.time < self->pain_debounce_time)
m_float.c:576:	self->pain_debounce_time = level.time + 3;
m_flyer.c:538:	if (level.time < self->pain_debounce_time)
m_flyer.c:541:	self->pain_debounce_time = level.time + 3;
m_flyer.c:582:	if (!Q_stricmp(level.mapname, "jail5") && (self->s.origin[2] == -104))
m_gladiator.c:246:	if (level.time < self->pain_debounce_time)
m_gladiator.c:253:	self->pain_debounce_time = level.time + 3;
m_gunner.c:288:	if (level.time < self->pain_debounce_time)
m_gunner.c:291:	self->pain_debounce_time = level.time + 3;
m_gunner.c:376:	self->monsterinfo.pausetime = level.time + 1;
m_gunner.c:382:	if (level.time >= self->monsterinfo.pausetime)
m_hover.c:492:	if (level.time < self->pain_debounce_time)
m_hover.c:495:	self->pain_debounce_time = level.time + 3;
m_hover.c:522:	if (!self->groundentity && level.time < self->timestamp)
m_hover.c:524:		self->nextthink = level.time + FRAMETIME;
m_hover.c:536:	self->nextthink = level.time + FRAMETIME;
m_hover.c:537:	self->timestamp = level.time + 15;
m_infantry.c:222:	if (level.time < self->pain_debounce_time)
m_infantry.c:225:	self->pain_debounce_time = level.time + 3;
m_infantry.c:436:	self->monsterinfo.pausetime = level.time + 1;
m_infantry.c:442:	if (level.time >= self->monsterinfo.pausetime)
m_infantry.c:484:	self->monsterinfo.pausetime = level.time + n * FRAMETIME;
m_infantry.c:491:	if (level.time >= self->monsterinfo.pausetime)
m_insane.c:484:	if (level.time < self->pain_debounce_time)
m_insane.c:487:	self->pain_debounce_time = level.time + 3;
m_medic.c:322:	if (level.time < self->pain_debounce_time)
m_medic.c:325:	self->pain_debounce_time = level.time + 3;
m_medic.c:453:	self->monsterinfo.pausetime = level.time + 1;
m_medic.c:459:	if (level.time >= self->monsterinfo.pausetime)
m_medic.c:625:			self->enemy->nextthink = level.time;
m_mutant.c:356:	self->monsterinfo.attack_finished = level.time + 3;
m_mutant.c:370:	if (level.time > self->monsterinfo.attack_finished)
m_mutant.c:503:	if (level.time < self->pain_debounce_time)
m_mutant.c:506:	self->pain_debounce_time = level.time + 3;
m_parasite.c:280:	if (level.time < self->pain_debounce_time)
m_parasite.c:283:	self->pain_debounce_time = level.time + 3;
m_soldier.c:417:	if (level.time < self->pain_debounce_time)
m_soldier.c:424:	self->pain_debounce_time = level.time + 3;
m_soldier.c:515:			self->monsterinfo.pausetime = level.time + (3 + rand() % 8) * FRAMETIME;
m_soldier.c:519:		if (level.time >= self->monsterinfo.pausetime)
m_soldier.c:641:	self->monsterinfo.pausetime = level.time + 1;
m_soldier.c:661:	if ((level.time + 0.4) < self->monsterinfo.pausetime)
m_soldier.c:812:	if (level.time >= self->monsterinfo.pausetime)
m_soldier.c:845:	self->monsterinfo.pausetime = level.time + eta + 0.3;
m_supertank.c:458:	if (level.time < self->pain_debounce_time)
m_supertank.c:471:	self->pain_debounce_time = level.time + 3;
m_supertank.c:653:	self->nextthink = level.time + 0.1;
m_tank.c:296:	if (level.time < self->pain_debounce_time)
m_tank.c:312:	self->pain_debounce_time = level.time + 3;
m_tank.c:694:			self->pain_debounce_time = level.time + 5.0;	// no pain for a while
p_client.c:74:	if(Q_stricmp(level.mapname, "security") == 0)
p_client.c:106:The normal starting point for a level.
p_client.c:112:	if(Q_stricmp(level.mapname, "security") == 0)
p_client.c:116:		self->nextthink = level.time + FRAMETIME;
p_client.c:145:	if((Q_stricmp(level.mapname, "jail2") == 0)   ||
p_client.c:146:	   (Q_stricmp(level.mapname, "jail4") == 0)   ||
p_client.c:147:	   (Q_stricmp(level.mapname, "mine1") == 0)   ||
p_client.c:148:	   (Q_stricmp(level.mapname, "mine2") == 0)   ||
p_client.c:149:	   (Q_stricmp(level.mapname, "mine3") == 0)   ||
p_client.c:150:	   (Q_stricmp(level.mapname, "mine4") == 0)   ||
p_client.c:151:	   (Q_stricmp(level.mapname, "lab") == 0)     ||
p_client.c:152:	   (Q_stricmp(level.mapname, "boss1") == 0)   ||
p_client.c:153:	   (Q_stricmp(level.mapname, "fact3") == 0)   ||
p_client.c:154:	   (Q_stricmp(level.mapname, "biggun") == 0)  ||
p_client.c:155:	   (Q_stricmp(level.mapname, "space") == 0)   ||
p_client.c:156:	   (Q_stricmp(level.mapname, "command") == 0) ||
p_client.c:157:	   (Q_stricmp(level.mapname, "power2") == 0) ||
p_client.c:158:	   (Q_stricmp(level.mapname, "strike") == 0))
p_client.c:162:		self->nextthink = level.time + FRAMETIME;
p_client.c:429:		quad = (self->client->quad_framenum > (level.framenum + 10));
p_client.c:452:		drop->nextthink = level.time + (self->client->quad_framenum - level.framenum) * FRAMETIME;
p_client.c:525:		self->client->respawn_time = level.time + 1.0;
p_client.c:604:but is called after each death and level change in deathmatch
p_client.c:636:	client->resp.enterframe = level.framenum;
p_client.c:923:	level.body_que = 0;
p_client.c:951:	body = &g_edicts[(int)maxclients->value + level.body_que + 1];
p_client.c:952:	level.body_que = (level.body_que + 1) % BODY_QUEUE_SIZE;
p_client.c:997:		self->client->respawn_time = level.time;
p_client.c:1078:	ent->client->respawn_time = level.time;
p_client.c:1173:	ent->air_finished = level.time + 12;
p_client.c:1277:	if (level.intermissiontime)
p_client.c:1302:to be placed into the game.  This will happen every level load.
p_client.c:1339:	if (level.intermissiontime)
p_client.c:1587:	level.current_entity = ent;
p_client.c:1590:	if (level.intermissiontime)
p_client.c:1595:		//if (level.time > level.intermissiontime + 5.0 && 
p_client.c:1598:		    level.exitintermission = true;
p_client.c:1714:	// save light level the player is standing on for
p_client.c:1772:	if (level.intermissiontime)
p_client.c:1779:		(level.time - client->respawn_time) >= 5) {
p_client.c:1793:		if ( level.time > client->respawn_time)
p_hud.c:36:	VectorCopy (level.intermission_origin, ent->s.origin);
p_hud.c:37:	ent->client->ps.pmove.origin[0] = level.intermission_origin[0]*8;
p_hud.c:38:	ent->client->ps.pmove.origin[1] = level.intermission_origin[1]*8;
p_hud.c:39:	ent->client->ps.pmove.origin[2] = level.intermission_origin[2]*8;
p_hud.c:40:	VectorCopy (level.intermission_angle, ent->client->ps.viewangles);
p_hud.c:78:	if (level.intermissiontime)
p_hud.c:93:	level.intermissiontime = level.time;
p_hud.c:94:	level.changemap = targ->map;
p_hud.c:96:	if (strstr(level.changemap, "*"))
p_hud.c:118:			level.exitintermission = 1;		// go immediately to the next level
p_hud.c:123:	level.exitintermission = 0;
p_hud.c:144:	VectorCopy (ent->s.origin, level.intermission_origin);
p_hud.c:145:	VectorCopy (ent->s.angles, level.intermission_angle);
p_hud.c:202:	// print level name and exit rules
p_hud.c:241:			x, y, sorted[i], cl->resp.score, cl->ping, (level.framenum - cl->resp.enterframe)/600);
p_hud.c:320:		"xv 0 yv 24 cstring2 \"%s\" "		// level name
p_hud.c:326:		level.level_name,
p_hud.c:329:		level.killed_monsters, level.total_monsters, 
p_hud.c:330:		level.found_goals, level.total_goals,
p_hud.c:331:		level.found_secrets, level.total_secrets);
p_hud.c:386:	ent->client->ps.stats[STAT_HEALTH_ICON] = level.pic_health;
p_hud.c:422:	if (power_armor_type && (!index || (level.framenum & 8) ) )
p_hud.c:442:	if (level.time > ent->client->pickup_msg_time)
p_hud.c:451:	if (ent->client->quad_framenum > level.framenum)
p_hud.c:454:		ent->client->ps.stats[STAT_TIMER] = (ent->client->quad_framenum - level.framenum)/10;
p_hud.c:456:	else if (ent->client->invincible_framenum > level.framenum)
p_hud.c:459:		ent->client->ps.stats[STAT_TIMER] = (ent->client->invincible_framenum - level.framenum)/10;
p_hud.c:461:	else if (ent->client->enviro_framenum > level.framenum)
p_hud.c:464:		ent->client->ps.stats[STAT_TIMER] = (ent->client->enviro_framenum - level.framenum)/10;
p_hud.c:466:	else if (ent->client->breather_framenum > level.framenum)
p_hud.c:469:		ent->client->ps.stats[STAT_TIMER] = (ent->client->breather_framenum - level.framenum)/10;
p_hud.c:494:		if (ent->client->pers.health <= 0 || level.intermissiontime
p_hud.c:516:	if (ent->client->pers.helpchanged && (level.framenum&8) )
p_hud.c:562:	if (cl->pers.health <= 0 || level.intermissiontime || cl->showscores)
p_trail.c:76:	trail[trail_head]->timestamp = level.time;
p_view.c:88:	if (client->damage_armor && !(player->flags & FL_GODMODE) && (client->invincible_framenum <= level.framenum))
p_view.c:133:	if ((level.time > player->pain_debounce_time) && !(player->flags & FL_GODMODE) && (client->invincible_framenum <= level.framenum))
p_view.c:136:		player->pain_debounce_time = level.time + 0.7;
p_view.c:191:		client->v_dmg_time = level.time + DAMAGE_TIME;
p_view.c:253:		ratio = (ent->client->v_dmg_time - level.time) / DAMAGE_TIME;
p_view.c:265:		ratio = (ent->client->fall_time - level.time) / FALL_TIME;
p_view.c:304:	ratio = (ent->client->fall_time - level.time) / FALL_TIME;
p_view.c:443:	if (ent->client->quad_framenum > level.framenum)
p_view.c:445:		remaining = ent->client->quad_framenum - level.framenum;
p_view.c:451:	else if (ent->client->invincible_framenum > level.framenum)
p_view.c:453:		remaining = ent->client->invincible_framenum - level.framenum;
p_view.c:459:	else if (ent->client->enviro_framenum > level.framenum)
p_view.c:461:		remaining = ent->client->enviro_framenum - level.framenum;
p_view.c:467:	else if (ent->client->breather_framenum > level.framenum)
p_view.c:469:		remaining = ent->client->breather_framenum - level.framenum;
p_view.c:545:	ent->client->fall_time = level.time + FALL_TIME;
p_view.c:556:		ent->pain_debounce_time = level.time;	// no normal pain sound
p_view.c:587:		current_player->air_finished = level.time + 12;	// don't need air
p_view.c:595:	breather = current_client->breather_framenum > level.framenum;
p_view.c:596:	envirosuit = current_client->enviro_framenum > level.framenum;
p_view.c:613:		current_player->damage_debounce_time = level.time - 1;
p_view.c:639:		if (current_player->air_finished < level.time)
p_view.c:644:		else  if (current_player->air_finished < level.time + 11)
p_view.c:658:			current_player->air_finished = level.time + 10;
p_view.c:660:			if (((int)(current_client->breather_framenum - level.framenum) % 25) == 0)
p_view.c:673:		if (current_player->air_finished < level.time)
p_view.c:675:			if (current_player->client->next_drown_time < level.time 
p_view.c:678:				current_player->client->next_drown_time = level.time + 1;
p_view.c:693:				current_player->pain_debounce_time = level.time;
p_view.c:701:		current_player->air_finished = level.time + 12;
p_view.c:713:				&& current_player->pain_debounce_time <= level.time
p_view.c:714:				&& current_client->invincible_framenum < level.framenum)
p_view.c:720:				current_player->pain_debounce_time = level.time + 1;
p_view.c:753:	if (ent->health <= 0 || level.intermissiontime)
p_view.c:756:	if (ent->powerarmor_time > level.time)
p_view.c:770:	if (ent->client->quad_framenum > level.framenum)
p_view.c:772:		remaining = ent->client->quad_framenum - level.framenum;
p_view.c:777:	if (ent->client->invincible_framenum > level.framenum)
p_view.c:779:		remaining = ent->client->invincible_framenum - level.framenum;
p_view.c:826:	if (ent->client->pers.helpchanged && ent->client->pers.helpchanged <= 3 && !(level.framenum&63) )
p_view.c:984:	if (level.intermissiontime)
p_view.c:1081:	if (ent->client->showscores && !(level.framenum & 31) )
p_weapon.c:100:		level.sound_entity = noise;
p_weapon.c:101:		level.sound_entity_framenum = level.framenum;
p_weapon.c:106:		level.sound2_entity = noise;
p_weapon.c:107:		level.sound2_entity_framenum = level.framenum;
p_weapon.c:113:	noise->teleport_time = level.time;
p_weapon.c:180:		ent->client->grenade_time = level.time;
p_weapon.c:294:		is_quad = (ent->client->quad_framenum > level.framenum);
p_weapon.c:478:				if (level.time >= ent->pain_debounce_time)
p_weapon.c:481:					ent->pain_debounce_time = level.time + 1;
p_weapon.c:517:				if (ent->client->quad_framenum > level.framenum)
p_weapon.c:564:	timer = ent->client->grenade_time - level.time;
p_weapon.c:571:	ent->client->grenade_time = level.time + 1.0;
p_weapon.c:623:				if (level.time >= ent->pain_debounce_time)
p_weapon.c:626:					ent->pain_debounce_time = level.time + 1;
p_weapon.c:653:				ent->client->grenade_time = level.time + GRENADE_TIMER + 0.2;
p_weapon.c:658:			if (!ent->client->grenade_blew_up && level.time >= ent->client->grenade_time)
p_weapon.c:670:				if (level.time >= ent->client->grenade_time)
p_weapon.c:688:		if ((ent->client->ps.gunframe == 15) && (level.time < ent->client->grenade_time))
p_weapon.c:885:			if (level.time >= ent->pain_debounce_time)
p_weapon.c:888:				ent->pain_debounce_time = level.time + 1;
p_weapon.c:978:		if (level.time >= ent->pain_debounce_time)
p_weapon.c:981:			ent->pain_debounce_time = level.time + 1;
p_weapon.c:1121:		if (level.time >= ent->pain_debounce_time)
p_weapon.c:1124:			ent->pain_debounce_time = level.time + 1;
p_weapon.c:1411:	ent->client->v_dmg_time = level.time + DAMAGE_TIME;
levelfields usage ===
g_save.c:122:field_t		levelfields[] =
g_save.c:575:	for (field=levelfields ; field->name ; field++)
g_save.c:584:	for (field=levelfields ; field->name ; field++)
g_save.c:623:	for (field=levelfields ; field->name ; field++)
makron_frames_attack3 usage ===
m_boss32.c:429:mframe_t makron_frames_attack3 []=
m_boss32.c:440:mmove_t makron_move_attack3 = {FRAME_attak301, FRAME_attak308, makron_frames_attack3, makron_run};
makron_frames_attack4 usage ===
m_boss32.c:442:mframe_t makron_frames_attack4[]=
m_boss32.c:471:mmove_t makron_move_attack4 = {FRAME_attak401, FRAME_attak426, makron_frames_attack4, makron_run};
makron_frames_attack5 usage ===
m_boss32.c:473:mframe_t makron_frames_attack5[]=
m_boss32.c:492:mmove_t makron_move_attack5 = {FRAME_attak501, FRAME_attak516, makron_frames_attack5, makron_run};
makron_frames_death2 usage ===
m_boss32.c:267:mframe_t makron_frames_death2 [] =
m_boss32.c:365:mmove_t makron_move_death2 = {FRAME_death201, FRAME_death295, makron_frames_death2, makron_dead};
makron_frames_death3 usage ===
m_boss32.c:367:mframe_t makron_frames_death3 [] =
m_boss32.c:390:mmove_t makron_move_death3 = {FRAME_death301, FRAME_death320, makron_frames_death3, NULL};
makron_frames_pain4 usage ===
m_boss32.c:258:mframe_t makron_frames_pain4 [] =
m_boss32.c:265:mmove_t makron_move_pain4 = {FRAME_pain401, FRAME_pain404, makron_frames_pain4, makron_run};
makron_frames_pain5 usage ===
m_boss32.c:249:mframe_t makron_frames_pain5 [] =
m_boss32.c:256:mmove_t makron_move_pain5 = {FRAME_pain501, FRAME_pain504, makron_frames_pain5, makron_run};
makron_frames_pain6 usage ===
m_boss32.c:217:mframe_t makron_frames_pain6 [] =
m_boss32.c:247:mmove_t makron_move_pain6 = {FRAME_pain601, FRAME_pain627, makron_frames_pain6, makron_run};
makron_frames_run usage ===
m_boss32.c:143:mframe_t makron_frames_run [] =
m_boss32.c:156:mmove_t	makron_move_run = {FRAME_walk204, FRAME_walk213, makron_frames_run, NULL};
m_boss32.c:202:mmove_t	makron_move_walk = {FRAME_walk204, FRAME_walk213, makron_frames_run, NULL};
makron_frames_sight usage ===
m_boss32.c:392:mframe_t makron_frames_sight [] =
m_boss32.c:408:mmove_t makron_move_sight= {FRAME_active01, FRAME_active13, makron_frames_sight, makron_run};
makron_frames_stand usage ===
m_boss32.c:73:mframe_t makron_frames_stand []=
m_boss32.c:136:mmove_t	makron_move_stand = {FRAME_stand201, FRAME_stand260, makron_frames_stand, NULL};
makron_frames_walk usage ===
m_boss32.c:189:mframe_t makron_frames_walk [] =
makron_move_attack3 usage ===
m_boss32.c:440:mmove_t makron_move_attack3 = {FRAME_attak301, FRAME_attak308, makron_frames_attack3, makron_run};
m_boss32.c:621:		self->monsterinfo.currentmove = &makron_move_attack3;
makron_move_attack4 usage ===
m_boss32.c:471:mmove_t makron_move_attack4 = {FRAME_attak401, FRAME_attak426, makron_frames_attack4, makron_run};
m_boss32.c:623:		self->monsterinfo.currentmove = &makron_move_attack4;
makron_move_attack5 usage ===
m_boss32.c:492:mmove_t makron_move_attack5 = {FRAME_attak501, FRAME_attak516, makron_frames_attack5, makron_run};
m_boss32.c:625:		self->monsterinfo.currentmove = &makron_move_attack5;
makron_move_death2 usage ===
m_boss32.c:365:mmove_t makron_move_death2 = {FRAME_death201, FRAME_death295, makron_frames_death2, makron_dead};
m_boss32.c:709:	self->monsterinfo.currentmove = &makron_move_death2;
makron_move_death3 usage ===
m_boss32.c:390:mmove_t makron_move_death3 = {FRAME_death301, FRAME_death320, makron_frames_death3, NULL};
makron_move_pain4 usage ===
m_boss32.c:265:mmove_t makron_move_pain4 = {FRAME_pain401, FRAME_pain404, makron_frames_pain4, makron_run};
m_boss32.c:577:		self->monsterinfo.currentmove = &makron_move_pain4;
makron_move_pain5 usage ===
m_boss32.c:256:mmove_t makron_move_pain5 = {FRAME_pain501, FRAME_pain504, makron_frames_pain5, makron_run};
m_boss32.c:582:		self->monsterinfo.currentmove = &makron_move_pain5;
makron_move_pain6 usage ===
m_boss32.c:247:mmove_t makron_move_pain6 = {FRAME_pain601, FRAME_pain627, makron_frames_pain6, makron_run};
m_boss32.c:591:				self->monsterinfo.currentmove = &makron_move_pain6;
m_boss32.c:597:				self->monsterinfo.currentmove = &makron_move_pain6;
makron_move_run usage ===
m_boss32.c:156:mmove_t	makron_move_run = {FRAME_walk204, FRAME_walk213, makron_frames_run, NULL};
m_boss32.c:214:		self->monsterinfo.currentmove = &makron_move_run;
makron_move_sight usage ===
m_boss32.c:408:mmove_t makron_move_sight= {FRAME_active01, FRAME_active13, makron_frames_sight, makron_run};
m_boss32.c:605:	self->monsterinfo.currentmove = &makron_move_sight;
m_boss32.c:866:	self->monsterinfo.currentmove = &makron_move_sight;
makron_move_stand usage ===
m_boss32.c:136:mmove_t	makron_move_stand = {FRAME_stand201, FRAME_stand260, makron_frames_stand, NULL};
m_boss32.c:140:	self->monsterinfo.currentmove = &makron_move_stand;
m_boss32.c:212:		self->monsterinfo.currentmove = &makron_move_stand;
m_boss32.c:865://	self->monsterinfo.currentmove = &makron_move_stand;
makron_move_walk usage ===
m_boss32.c:202:mmove_t	makron_move_walk = {FRAME_walk204, FRAME_walk213, makron_frames_run, NULL};
m_boss32.c:206:		self->monsterinfo.currentmove = &makron_move_walk;
maxclients usage ===
g_ai.c:25:extern cvar_t	*maxclients;
g_ai.c:64:		if (check > game.maxclients)
g_chase.c:122:		if (i > maxclients->value)
g_chase.c:147:			i = maxclients->value;
g_chase.c:164:	for (i = 1; i <= maxclients->value; i++) {
g_cmds.c:703:	for (i = 0 ; i < maxclients->value ; i++)
g_cmds.c:857:	for (j = 1; j <= game.maxclients; j++)
g_cmds.c:882:	for (i = 0, e2 = g_edicts + 1; i < maxclients->value; i++, e2++) {
g_main.c:44:cvar_t	*maxclients;
g_main.c:187:	for (i=0 ; i<maxclients->value ; i++)
g_main.c:330:		for (i=0 ; i<maxclients->value ; i++)
g_main.c:366:	for (i=0 ; i<maxclients->value ; i++)
g_main.c:427:		if (i > 0 && i <= maxclients->value)
g_save.c:174:	maxclients = gi.cvar ("maxclients", "4", CVAR_SERVERINFO | CVAR_LATCH);
g_save.c:220:	game.maxclients = maxclients->value;
g_save.c:221:	game.clients = gi.TagMalloc (game.maxclients * sizeof(game.clients[0]), TAG_GAME);
g_save.c:222:	globals.num_edicts = game.maxclients+1;
g_save.c:488:	for (i=0 ; i<game.maxclients ; i++)
g_save.c:517:	game.clients = gi.TagMalloc (game.maxclients * sizeof(game.clients[0]), TAG_GAME);
g_save.c:518:	for (i=0 ; i<game.maxclients ; i++)
g_save.c:707:	globals.num_edicts = maxclients->value+1;
g_save.c:756:	for (i=0 ; i<maxclients->value ; i++)
g_spawn.c:549:	for (i=0 ; i<game.maxclients ; i++)
g_spawn.c:838:	gi.configstring (CS_MAXCLIENTS, va("%i", (int)(maxclients->value) ) );
g_trigger.c:245:			for (player = 1; player <= game.maxclients; player++)
g_trigger.c:261:			for (player = 1; player <= game.maxclients; player++)
g_utils.c:425:	e = &g_edicts[(int)maxclients->value+1];
g_utils.c:426:	for ( i=maxclients->value+1 ; i<globals.num_edicts ; i++, e++)
g_utils.c:456:	if ((ed - g_edicts) <= (maxclients->value + BODY_QUEUE_SIZE))
m_actor.c:513:		for (n = 1; n <= game.maxclients; n++)
p_client.c:655:	for (i=0 ; i<game.maxclients ; i++)
p_client.c:705:	for (n = 1; n <= maxclients->value; n++)
p_client.c:951:	body = &g_edicts[(int)maxclients->value + level.body_que + 1];
p_client.c:1031:		for (i = 1, numspec = 0; i <= maxclients->value; i++)
p_client.c:1346:		if (game.maxclients > 1)
p_client.c:1464:		for (i = numspec = 0; i < maxclients->value; i++)
p_client.c:1498:	if (game.maxclients > 1)
p_client.c:1751:	for (i = 1; i <= maxclients->value; i++) {
p_hud.c:84:	for (i=0 ; i<maxclients->value ; i++)
p_hud.c:100:			for (i=0 ; i<maxclients->value ; i++)
p_hud.c:148:	for (i=0 ; i<maxclients->value ; i++)
p_hud.c:181:	for (i=0 ; i<game.maxclients ; i++)
p_hud.c:537:	for (i = 1; i <= maxclients->value; i++) {
maxentities usage ===
g_main.c:46:cvar_t	*maxentities;
g_save.c:179:	maxentities = gi.cvar ("maxentities", "1024", CVAR_LATCH);
g_save.c:214:	game.maxentities = maxentities->value;
g_save.c:215:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:217:	globals.max_edicts = game.maxentities;
g_save.c:513:	g_edicts =  gi.TagMalloc (game.maxentities * sizeof(g_edicts[0]), TAG_GAME);
g_save.c:706:	memset (g_edicts, 0, game.maxentities*sizeof(g_edicts[0]));
g_spawn.c:543:	memset (g_edicts, 0, game.maxentities * sizeof (g_edicts[0]));
g_utils.c:437:	if (i == game.maxentities)
maxspectators usage ===
g_main.c:45:cvar_t	*maxspectators;
g_save.c:175:	maxspectators = gi.cvar ("maxspectators", "4", CVAR_SERVERINFO);
p_client.c:1035:		if (numspec >= maxspectators->value) {
p_client.c:1468:		if (numspec >= maxspectators->value) {
meansOfDeath usage ===
g_cmds.c:655:	meansOfDeath = MOD_SUICIDE;
g_combat.c:403:	meansOfDeath = mod;
g_main.c:31:int meansOfDeath;
p_client.c:219:		meansOfDeath |= MOD_FRIENDLY_FIRE;
p_client.c:223:		ff = meansOfDeath & MOD_FRIENDLY_FIRE;
p_client.c:224:		mod = meansOfDeath & ~MOD_FRIENDLY_FIRE;
medic_frames_attackBlaster usage ===
m_medic.c:535:mframe_t medic_frames_attackBlaster [] =
m_medic.c:552:mmove_t medic_move_attackBlaster = {FRAME_attack1, FRAME_attack14, medic_frames_attackBlaster, medic_run};
medic_frames_attackCable usage ===
m_medic.c:662:mframe_t medic_frames_attackCable [] =
m_medic.c:693:mmove_t medic_move_attackCable = {FRAME_attack33, FRAME_attack60, medic_frames_attackCable, medic_run};
medic_frames_attackHyperBlaster usage ===
m_medic.c:505:mframe_t medic_frames_attackHyperBlaster [] =
m_medic.c:524:mmove_t medic_move_attackHyperBlaster = {FRAME_attack15, FRAME_attack30, medic_frames_attackHyperBlaster, medic_run};
medic_frames_death usage ===
m_medic.c:378:mframe_t medic_frames_death [] =
m_medic.c:411:mmove_t medic_move_death = {FRAME_death1, FRAME_death30, medic_frames_death, medic_dead};
medic_frames_duck usage ===
m_medic.c:473:mframe_t medic_frames_duck [] =
m_medic.c:492:mmove_t medic_move_duck = {FRAME_duck1, FRAME_duck16, medic_frames_duck, medic_run};
medic_frames_pain1 usage ===
m_medic.c:284:mframe_t medic_frames_pain1 [] =
m_medic.c:295:mmove_t medic_move_pain1 = {FRAME_paina1, FRAME_paina8, medic_frames_pain1, medic_run};
medic_frames_pain2 usage ===
m_medic.c:297:mframe_t medic_frames_pain2 [] =
m_medic.c:315:mmove_t medic_move_pain2 = {FRAME_painb1, FRAME_painb15, medic_frames_pain2, medic_run};
medic_frames_run usage ===
m_medic.c:247:mframe_t medic_frames_run [] =
m_medic.c:257:mmove_t medic_move_run = {FRAME_run1, FRAME_run6, medic_frames_run, NULL};
medic_frames_stand usage ===
m_medic.c:122:mframe_t medic_frames_stand [] =
m_medic.c:216:mmove_t medic_move_stand = {FRAME_wait1, FRAME_wait90, medic_frames_stand, NULL};
medic_frames_walk usage ===
m_medic.c:224:mframe_t medic_frames_walk [] =
m_medic.c:239:mmove_t medic_move_walk = {FRAME_walk1, FRAME_walk12, medic_frames_walk, NULL};
medic_move_attackBlaster usage ===
m_medic.c:552:mmove_t medic_move_attackBlaster = {FRAME_attack1, FRAME_attack14, medic_frames_attackBlaster, medic_run};
m_medic.c:701:		self->monsterinfo.currentmove = &medic_move_attackBlaster;
medic_move_attackCable usage ===
m_medic.c:693:mmove_t medic_move_attackCable = {FRAME_attack33, FRAME_attack60, medic_frames_attackCable, medic_run};
m_medic.c:699:		self->monsterinfo.currentmove = &medic_move_attackCable;
medic_move_attackHyperBlaster usage ===
m_medic.c:524:mmove_t medic_move_attackHyperBlaster = {FRAME_attack15, FRAME_attack30, medic_frames_attackHyperBlaster, medic_run};
m_medic.c:531:			self->monsterinfo.currentmove = &medic_move_attackHyperBlaster;
medic_move_death usage ===
m_medic.c:411:mmove_t medic_move_death = {FRAME_death1, FRAME_death30, medic_frames_death, medic_dead};
m_medic.c:442:	self->monsterinfo.currentmove = &medic_move_death;
medic_move_duck usage ===
m_medic.c:492:mmove_t medic_move_duck = {FRAME_duck1, FRAME_duck16, medic_frames_duck, medic_run};
m_medic.c:502:	self->monsterinfo.currentmove = &medic_move_duck;
medic_move_pain1 usage ===
m_medic.c:295:mmove_t medic_move_pain1 = {FRAME_paina1, FRAME_paina8, medic_frames_pain1, medic_run};
m_medic.c:332:		self->monsterinfo.currentmove = &medic_move_pain1;
medic_move_pain2 usage ===
m_medic.c:315:mmove_t medic_move_pain2 = {FRAME_painb1, FRAME_painb15, medic_frames_pain2, medic_run};
m_medic.c:337:		self->monsterinfo.currentmove = &medic_move_pain2;
medic_move_run usage ===
m_medic.c:257:mmove_t medic_move_run = {FRAME_run1, FRAME_run6, medic_frames_run, NULL};
m_medic.c:280:		self->monsterinfo.currentmove = &medic_move_run;
medic_move_stand usage ===
m_medic.c:216:mmove_t medic_move_stand = {FRAME_wait1, FRAME_wait90, medic_frames_stand, NULL};
m_medic.c:220:	self->monsterinfo.currentmove = &medic_move_stand;
m_medic.c:278:		self->monsterinfo.currentmove = &medic_move_stand;
m_medic.c:765:	self->monsterinfo.currentmove = &medic_move_stand;
medic_move_walk usage ===
m_medic.c:239:mmove_t medic_move_walk = {FRAME_walk1, FRAME_walk12, medic_frames_walk, NULL};
m_medic.c:243:	self->monsterinfo.currentmove = &medic_move_walk;
messages usage ===
g_misc.c:561:	// no targeted lights in deathmatch, because they cause global messages
g_misc.c:1630:// don't let field width of any clock messages change, or it
m_actor.c:222:char *messages[] =
m_actor.c:255:		gi.cprintf (other, PRINT_CHAT, "%s: %s!\n", name, messages[rand()%3]);
mmove_reloc usage ===
g_save.c:25:mmove_t mmove_reloc;
g_save.c:290:			index = *(byte **)p - (byte *)&mmove_reloc;
g_save.c:393:			*(byte **)p = (byte *)&mmove_reloc + index;
monster_flash_offset usage ===
m_actor.c:275:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_ACTOR_MACHINEGUN_1], forward, right, start);
m_boss2.c:65:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_BOSS2_ROCKET_1], forward, right, start);
m_boss2.c:73:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_BOSS2_ROCKET_2], forward, right, start);
m_boss2.c:81:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_BOSS2_ROCKET_3], forward, right, start);
m_boss2.c:89:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_BOSS2_ROCKET_4], forward, right, start);
m_boss2.c:103:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_BOSS2_MACHINEGUN_R1], forward, right, start);
m_boss2.c:119:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_BOSS2_MACHINEGUN_L1], forward, right, start);
m_boss2.c:141:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_boss31.c:483:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_JORG_BFG_1], forward, right, start);
m_boss31.c:507:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_JORG_MACHINEGUN_R1], forward, right, start);
m_boss31.c:523:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_JORG_MACHINEGUN_L1], forward, right, start);
m_boss32.c:418:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_MAKRON_BFG], forward, right, start);
m_boss32.c:508:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_MAKRON_RAILGUN_1], forward, right, start);
m_boss32.c:529:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_chick.c:459:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_CHICK_ROCKET_1], forward, right, start);
m_flash.c:27:vec3_t monster_flash_offset [] =
m_float.c:73:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_FLOAT_BLASTER_1], forward, right, start);
m_float.c:535://	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, origin);
m_flyer.c:380:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_gladiator.c:175:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_GLADIATOR_RAILGUN_1], forward, right, start);
m_gunner.c:437:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_gunner.c:466:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_hover.c:448:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_HOVER_BLASTER_1], forward, right, start);
m_infantry.c:271:		G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_infantry.c:290:		G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_medic.c:358:	G_ProjectSource (self->s.origin, monster_flash_offset[MZ2_MEDIC_BLASTER_1], forward, right, start);
m_soldier.c:480:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_index], forward, right, start);
m_supertank.c:510:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_supertank.c:536:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_tank.c:347:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_tank.c:377:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
m_tank.c:398:	G_ProjectSource (self->s.origin, monster_flash_offset[flash_number], forward, right, start);
mutant_frames_attack usage ===
m_mutant.c:286:mframe_t mutant_frames_attack [] =
m_mutant.c:296:mmove_t mutant_move_attack = {FRAME_attack09, FRAME_attack15, mutant_frames_attack, mutant_run};
mutant_frames_death1 usage ===
m_mutant.c:545:mframe_t mutant_frames_death1 [] =
m_mutant.c:557:mmove_t mutant_move_death1 = {FRAME_death101, FRAME_death109, mutant_frames_death1, mutant_dead};
mutant_frames_death2 usage ===
m_mutant.c:559:mframe_t mutant_frames_death2 [] =
m_mutant.c:572:mmove_t mutant_move_death2 = {FRAME_death201, FRAME_death210, mutant_frames_death2, mutant_dead};
mutant_frames_idle usage ===
m_mutant.c:159:mframe_t mutant_frames_idle [] =
m_mutant.c:175:mmove_t mutant_move_idle = {FRAME_stand152, FRAME_stand164, mutant_frames_idle, mutant_stand};
mutant_frames_jump usage ===
m_mutant.c:376:mframe_t mutant_frames_jump [] =
m_mutant.c:387:mmove_t mutant_move_jump = {FRAME_attack01, FRAME_attack08, mutant_frames_jump, mutant_run};
mutant_frames_pain1 usage ===
m_mutant.c:459:mframe_t mutant_frames_pain1 [] =
m_mutant.c:467:mmove_t mutant_move_pain1 = {FRAME_pain101, FRAME_pain105, mutant_frames_pain1, mutant_run};
mutant_frames_pain2 usage ===
m_mutant.c:469:mframe_t mutant_frames_pain2 [] =
m_mutant.c:478:mmove_t mutant_move_pain2 = {FRAME_pain201, FRAME_pain206, mutant_frames_pain2, mutant_run};
mutant_frames_pain3 usage ===
m_mutant.c:480:mframe_t mutant_frames_pain3 [] =
m_mutant.c:494:mmove_t mutant_move_pain3 = {FRAME_pain301, FRAME_pain311, mutant_frames_pain3, mutant_run};
mutant_frames_run usage ===
m_mutant.c:231:mframe_t mutant_frames_run [] =
m_mutant.c:240:mmove_t mutant_move_run = {FRAME_run03, FRAME_run08, mutant_frames_run, NULL};
mutant_frames_stand usage ===
m_mutant.c:82:mframe_t mutant_frames_stand [] =
m_mutant.c:141:mmove_t mutant_move_stand = {FRAME_stand101, FRAME_stand151, mutant_frames_stand, NULL};
mutant_frames_start_walk usage ===
m_mutant.c:212:mframe_t mutant_frames_start_walk [] =
m_mutant.c:219:mmove_t mutant_move_start_walk = {FRAME_walk01, FRAME_walk04, mutant_frames_start_walk, mutant_walk_loop};
mutant_frames_walk usage ===
m_mutant.c:190:mframe_t mutant_frames_walk [] =
m_mutant.c:205:mmove_t mutant_move_walk = {FRAME_walk05, FRAME_walk16, mutant_frames_walk, NULL};
mutant_move_attack usage ===
m_mutant.c:296:mmove_t mutant_move_attack = {FRAME_attack09, FRAME_attack15, mutant_frames_attack, mutant_run};
m_mutant.c:300:	self->monsterinfo.currentmove = &mutant_move_attack;
mutant_move_death1 usage ===
m_mutant.c:557:mmove_t mutant_move_death1 = {FRAME_death101, FRAME_death109, mutant_frames_death1, mutant_dead};
m_mutant.c:599:		self->monsterinfo.currentmove = &mutant_move_death1;
mutant_move_death2 usage ===
m_mutant.c:572:mmove_t mutant_move_death2 = {FRAME_death201, FRAME_death210, mutant_frames_death2, mutant_dead};
m_mutant.c:601:		self->monsterinfo.currentmove = &mutant_move_death2;
mutant_move_idle usage ===
m_mutant.c:175:mmove_t mutant_move_idle = {FRAME_stand152, FRAME_stand164, mutant_frames_idle, mutant_stand};
m_mutant.c:179:	self->monsterinfo.currentmove = &mutant_move_idle;
mutant_move_jump usage ===
m_mutant.c:387:mmove_t mutant_move_jump = {FRAME_attack01, FRAME_attack08, mutant_frames_jump, mutant_run};
m_mutant.c:391:	self->monsterinfo.currentmove = &mutant_move_jump;
mutant_move_pain1 usage ===
m_mutant.c:467:mmove_t mutant_move_pain1 = {FRAME_pain101, FRAME_pain105, mutant_frames_pain1, mutant_run};
m_mutant.c:515:		self->monsterinfo.currentmove = &mutant_move_pain1;
mutant_move_pain2 usage ===
m_mutant.c:478:mmove_t mutant_move_pain2 = {FRAME_pain201, FRAME_pain206, mutant_frames_pain2, mutant_run};
m_mutant.c:520:		self->monsterinfo.currentmove = &mutant_move_pain2;
mutant_move_pain3 usage ===
m_mutant.c:494:mmove_t mutant_move_pain3 = {FRAME_pain301, FRAME_pain311, mutant_frames_pain3, mutant_run};
m_mutant.c:525:		self->monsterinfo.currentmove = &mutant_move_pain3;
mutant_move_run usage ===
m_mutant.c:240:mmove_t mutant_move_run = {FRAME_run03, FRAME_run08, mutant_frames_run, NULL};
m_mutant.c:247:		self->monsterinfo.currentmove = &mutant_move_run;
mutant_move_stand usage ===
m_mutant.c:141:mmove_t mutant_move_stand = {FRAME_stand101, FRAME_stand151, mutant_frames_stand, NULL};
m_mutant.c:145:	self->monsterinfo.currentmove = &mutant_move_stand;
m_mutant.c:245:		self->monsterinfo.currentmove = &mutant_move_stand;
m_mutant.c:659:	self->monsterinfo.currentmove = &mutant_move_stand;
mutant_move_start_walk usage ===
m_mutant.c:219:mmove_t mutant_move_start_walk = {FRAME_walk01, FRAME_walk04, mutant_frames_start_walk, mutant_walk_loop};
m_mutant.c:223:	self->monsterinfo.currentmove = &mutant_move_start_walk;
mutant_move_walk usage ===
m_mutant.c:205:mmove_t mutant_move_walk = {FRAME_walk05, FRAME_walk16, mutant_frames_walk, NULL};
m_mutant.c:209:	self->monsterinfo.currentmove = &mutant_move_walk;
needpass usage ===
g_main.c:43:cvar_t	*needpass;
g_main.c:285:	// if password or spectator_password has changed, update needpass
g_main.c:298:		gi.cvar_set("needpass", va("%d", need));
g_main.c:439:	// see if needpass needs updated
g_save.c:187:	needpass = gi.cvar ("needpass", "0", CVAR_SERVERINFO);
numipfilters usage ===
g_svcmds.c:69:int			numipfilters;
g_svcmds.c:145:	for (i=0 ; i<numipfilters ; i++)
g_svcmds.c:167:	for (i=0 ; i<numipfilters ; i++)
g_svcmds.c:170:	if (i == numipfilters)
g_svcmds.c:172:		if (numipfilters == MAX_IPFILTERS)
g_svcmds.c:177:		numipfilters++;
g_svcmds.c:202:	for (i=0 ; i<numipfilters ; i++)
g_svcmds.c:206:			for (j=i+1 ; j<numipfilters ; j++)
g_svcmds.c:208:			numipfilters--;
g_svcmds.c:226:	for (i=0 ; i<numipfilters ; i++)
g_svcmds.c:264:	for (i=0 ; i<numipfilters ; i++)
obstacle usage ===
g_phys.c:393:edict_t	*obstacle;
g_phys.c:527:		// save off the obstacle so we can call the block function
g_phys.c:528:		obstacle = check;
g_phys.c:602:		// otherwise, just stay in place until the obstacle is gone
g_phys.c:604:			part->blocked (part, obstacle);
g_phys.c:607:		if (!obstacle->inuse && part->inuse)
oldsave usage ===
g_main.c:60:cvar_t  *oldsave;
g_save.c:159:	oldsave = gi.cvar("oldsave", "0", CVAR_ARCHIVE);
g_save.c:507:	if (!(oldsave->value) && strcmp (str, __DATE__))
paged_total usage ===
q_shared.c:1155:int	paged_total;
q_shared.c:1162:		paged_total += buffer[i];
parasite_frames_break usage ===
m_parasite.c:390:mframe_t parasite_frames_break [] =
m_parasite.c:425:mmove_t parasite_move_break = {FRAME_break01, FRAME_break32, parasite_frames_break, parasite_start_run};
parasite_frames_death usage ===
m_parasite.c:459:mframe_t parasite_frames_death [] =
m_parasite.c:469:mmove_t parasite_move_death = {FRAME_death101, FRAME_death107, parasite_frames_death, parasite_dead};
parasite_frames_drain usage ===
m_parasite.c:366:mframe_t parasite_frames_drain [] =
m_parasite.c:387:mmove_t parasite_move_drain = {FRAME_drain01, FRAME_drain18, parasite_frames_drain, parasite_start_run};
parasite_frames_end_fidget usage ===
m_parasite.c:106:mframe_t parasite_frames_end_fidget [] =
m_parasite.c:117:mmove_t parasite_move_end_fidget = {FRAME_stand28, FRAME_stand35, parasite_frames_end_fidget, parasite_stand};
parasite_frames_fidget usage ===
m_parasite.c:95:mframe_t parasite_frames_fidget [] =
m_parasite.c:104:mmove_t parasite_move_fidget = {FRAME_stand22, FRAME_stand27, parasite_frames_fidget, parasite_refidget};
parasite_frames_pain1 usage ===
m_parasite.c:259:mframe_t parasite_frames_pain1 [] =
m_parasite.c:273:mmove_t parasite_move_pain1 = {FRAME_pain101, FRAME_pain111, parasite_frames_pain1, parasite_start_run};
parasite_frames_run usage ===
m_parasite.c:171:mframe_t parasite_frames_run [] =
m_parasite.c:181:mmove_t parasite_move_run = {FRAME_run03, FRAME_run09, parasite_frames_run, NULL};
parasite_frames_stand usage ===
m_parasite.c:143:mframe_t parasite_frames_stand [] =
m_parasite.c:163:mmove_t	parasite_move_stand = {FRAME_stand01, FRAME_stand17, parasite_frames_stand, parasite_stand};
parasite_frames_start_fidget usage ===
m_parasite.c:86:mframe_t parasite_frames_start_fidget [] =
m_parasite.c:93:mmove_t parasite_move_start_fidget = {FRAME_stand18, FRAME_stand21, parasite_frames_start_fidget, parasite_do_fidget};
parasite_frames_start_run usage ===
m_parasite.c:183:mframe_t parasite_frames_start_run [] =
m_parasite.c:188:mmove_t parasite_move_start_run = {FRAME_run01, FRAME_run02, parasite_frames_start_run, parasite_run};
parasite_frames_start_walk usage ===
m_parasite.c:230:mframe_t parasite_frames_start_walk [] =
m_parasite.c:235:mmove_t parasite_move_start_walk = {FRAME_run01, FRAME_run02, parasite_frames_start_walk, NULL};
parasite_frames_stop_run usage ===
m_parasite.c:190:mframe_t parasite_frames_stop_run [] =
m_parasite.c:199:mmove_t parasite_move_stop_run = {FRAME_run10, FRAME_run15, parasite_frames_stop_run, NULL};
parasite_frames_stop_walk usage ===
m_parasite.c:237:mframe_t parasite_frames_stop_walk [] =
m_parasite.c:246:mmove_t parasite_move_stop_walk = {FRAME_run10, FRAME_run15, parasite_frames_stop_walk, NULL};
parasite_frames_walk usage ===
m_parasite.c:218:mframe_t parasite_frames_walk [] =
m_parasite.c:228:mmove_t parasite_move_walk = {FRAME_run03, FRAME_run09, parasite_frames_walk, parasite_walk};
parasite_move_break usage ===
m_parasite.c:425:mmove_t parasite_move_break = {FRAME_break01, FRAME_break32, parasite_frames_break, parasite_start_run};
m_parasite.c:436://		self->monsterinfo.currentmove = &parasite_move_break;
parasite_move_death usage ===
m_parasite.c:469:mmove_t parasite_move_death = {FRAME_death101, FRAME_death107, parasite_frames_death, parasite_dead};
m_parasite.c:495:	self->monsterinfo.currentmove = &parasite_move_death;
parasite_move_drain usage ===
m_parasite.c:387:mmove_t parasite_move_drain = {FRAME_drain01, FRAME_drain18, parasite_frames_drain, parasite_start_run};
m_parasite.c:438:		self->monsterinfo.currentmove = &parasite_move_drain;
parasite_move_end_fidget usage ===
m_parasite.c:117:mmove_t parasite_move_end_fidget = {FRAME_stand28, FRAME_stand35, parasite_frames_end_fidget, parasite_stand};
m_parasite.c:121:	self->monsterinfo.currentmove = &parasite_move_end_fidget;
m_parasite.c:134:		self->monsterinfo.currentmove = &parasite_move_end_fidget;
parasite_move_fidget usage ===
m_parasite.c:104:mmove_t parasite_move_fidget = {FRAME_stand22, FRAME_stand27, parasite_frames_fidget, parasite_refidget};
m_parasite.c:126:	self->monsterinfo.currentmove = &parasite_move_fidget;
m_parasite.c:132:		self->monsterinfo.currentmove = &parasite_move_fidget;
parasite_move_pain1 usage ===
m_parasite.c:273:mmove_t parasite_move_pain1 = {FRAME_pain101, FRAME_pain111, parasite_frames_pain1, parasite_start_run};
m_parasite.c:293:	self->monsterinfo.currentmove = &parasite_move_pain1;
parasite_move_run usage ===
m_parasite.c:181:mmove_t parasite_move_run = {FRAME_run03, FRAME_run09, parasite_frames_run, NULL};
m_parasite.c:214:		self->monsterinfo.currentmove = &parasite_move_run;
parasite_move_stand usage ===
m_parasite.c:163:mmove_t	parasite_move_stand = {FRAME_stand01, FRAME_stand17, parasite_frames_stand, parasite_stand};
m_parasite.c:167:	self->monsterinfo.currentmove = &parasite_move_stand;
m_parasite.c:204:		self->monsterinfo.currentmove = &parasite_move_stand;
m_parasite.c:212:		self->monsterinfo.currentmove = &parasite_move_stand;
m_parasite.c:548:	self->monsterinfo.currentmove = &parasite_move_stand;	
parasite_move_start_fidget usage ===
m_parasite.c:93:mmove_t parasite_move_start_fidget = {FRAME_stand18, FRAME_stand21, parasite_frames_start_fidget, parasite_do_fidget};
m_parasite.c:139:	self->monsterinfo.currentmove = &parasite_move_start_fidget;
parasite_move_start_run usage ===
m_parasite.c:188:mmove_t parasite_move_start_run = {FRAME_run01, FRAME_run02, parasite_frames_start_run, parasite_run};
m_parasite.c:206:		self->monsterinfo.currentmove = &parasite_move_start_run;
parasite_move_start_walk usage ===
m_parasite.c:235:mmove_t parasite_move_start_walk = {FRAME_run01, FRAME_run02, parasite_frames_start_walk, NULL};
m_parasite.c:250:	self->monsterinfo.currentmove = &parasite_move_start_walk;
parasite_move_stop_run usage ===
m_parasite.c:199:mmove_t parasite_move_stop_run = {FRAME_run10, FRAME_run15, parasite_frames_stop_run, NULL};
parasite_move_stop_walk usage ===
m_parasite.c:246:mmove_t parasite_move_stop_walk = {FRAME_run10, FRAME_run15, parasite_frames_stop_walk, NULL};
parasite_move_walk usage ===
m_parasite.c:228:mmove_t parasite_move_walk = {FRAME_run03, FRAME_run09, parasite_frames_walk, parasite_walk};
m_parasite.c:255:	self->monsterinfo.currentmove = &parasite_move_walk;
password usage ===
g_main.c:41:cvar_t	*password;
g_main.c:285:	// if password or spectator_password has changed, update needpass
g_main.c:287:	if (password->modified || spectator_password->modified) 
g_main.c:289:		password->modified = spectator_password->modified = false;
g_main.c:293:		if (*password->string && Q_stricmp(password->string, "none"))
g_save.c:185:	password = gi.cvar ("password", "", CVAR_USERINFO);
p_client.c:1022:			gi.cprintf(ent, PRINT_HIGH, "Spectator password incorrect.\n");
p_client.c:1046:		// he must have the right password
p_client.c:1047:		char *value = Info_ValueForKey (ent->client->pers.userinfo, "password");
p_client.c:1048:		if (*password->string && strcmp(password->string, "none") && 
p_client.c:1049:			strcmp(password->string, value)) {
p_client.c:1459:			Info_SetValueForKey(userinfo, "rejmsg", "Spectator password required or incorrect.");
p_client.c:1473:		// check for a password
p_client.c:1474:		value = Info_ValueForKey (userinfo, "password");
p_client.c:1475:		if (*password->string && strcmp(password->string, "none") && 
p_client.c:1476:			strcmp(password->string, value)) {
pm_passent usage ===
p_client.c:1544:edict_t	*pm_passent;
p_client.c:1549:	if (pm_passent->health > 0)
p_client.c:1550:		return gi.trace (start, mins, maxs, end, pm_passent, MASK_PLAYERSOLID);
p_client.c:1552:		return gi.trace (start, mins, maxs, end, pm_passent, MASK_DEADSOLID);
p_client.c:1602:	pm_passent = ent;
pushed usage ===
g_phys.c:367:		// if the pushed entity went away and the pusher is still there
g_phys.c:391:pushed_t	pushed[MAX_EDICTS], *pushed_p;
g_phys.c:503:			// may have pushed them off an edge
g_phys.c:509:			{	// pushed ok
g_phys.c:516:			// this is only relevent for riding entities, not pushed
g_phys.c:531:		// go backwards, so if the same entity was pushed
g_phys.c:533:		for (p=pushed_p-1 ; p>=pushed ; p--)
g_phys.c:548:	for (p=pushed_p-1 ; p>=pushed ; p--)
g_phys.c:575:	pushed_p = pushed;
g_phys.c:589:	if (pushed_p > &pushed[MAX_EDICTS])
g_phys.c:590:		gi.error (ERR_FATAL, "pushed_p > &pushed[MAX_EDICTS], memory corrupted");
g_phys.c:606:		// if the pushed entity went away and the pusher is still there
p_view.c:969:	// is pushed by a bmodel or kicked by an explosion.
p_view.c:972:	// behind the body position when pushed -- "sinking into plats"
pushed_p usage ===
g_phys.c:391:pushed_t	pushed[MAX_EDICTS], *pushed_p;
g_phys.c:436:	pushed_p->ent = pusher;
g_phys.c:437:	VectorCopy (pusher->s.origin, pushed_p->origin);
g_phys.c:438:	VectorCopy (pusher->s.angles, pushed_p->angles);
g_phys.c:440:		pushed_p->deltayaw = pusher->client->ps.pmove.delta_angles[YAW];
g_phys.c:441:	pushed_p++;
g_phys.c:483:			pushed_p->ent = check;
g_phys.c:484:			VectorCopy (check->s.origin, pushed_p->origin);
g_phys.c:485:			VectorCopy (check->s.angles, pushed_p->angles);
g_phys.c:486:			pushed_p++;
g_phys.c:522:				pushed_p--;
g_phys.c:533:		for (p=pushed_p-1 ; p>=pushed ; p--)
g_phys.c:548:	for (p=pushed_p-1 ; p>=pushed ; p--)
g_phys.c:575:	pushed_p = pushed;
g_phys.c:589:	if (pushed_p > &pushed[MAX_EDICTS])
g_phys.c:590:		gi.error (ERR_FATAL, "pushed_p > &pushed[MAX_EDICTS], memory corrupted");
run_pitch usage ===
g_main.c:62:cvar_t	*run_pitch;
g_save.c:192:	run_pitch = gi.cvar ("run_pitch", "0.002", 0);
p_view.c:273:		angles[PITCH] += delta*run_pitch->value;
run_roll usage ===
g_main.c:63:cvar_t	*run_roll;
g_save.c:193:	run_roll = gi.cvar ("run_roll", "0.005", 0);
p_view.c:276:		angles[ROLL] += delta*run_roll->value;
single_statusbar usage ===
g_spawn.c:650:char *single_statusbar = 
g_spawn.c:844:		gi.configstring (CS_STATUSBAR, single_statusbar);
skill usage ===
g_ai.c:632:		if (skill->value == 0 && (rand()&3) )
g_ai.c:672:	if (skill->value == 0)
g_ai.c:674:	else if (skill->value >= 2)
g_combat.c:406:	if (skill->value == 0 && deathmatch->value == 0 && targ->client)
g_combat.c:514:			if (skill->value == 3)
g_items.c:164:	if ((skill->value == 1 && quantity >= 2) || (skill->value >= 2 && quantity >= 1))
g_main.c:38:cvar_t	*skill;
g_monster.c:28:// and we can mess it up based on skill.  Spread should be for normal
g_monster.c:29:// and we can tighten or loosen based on skill.  We could muck with
g_save.c:178:	skill = gi.cvar ("skill", "1", CVAR_LATCH);
g_spawn.c:530:	skill_level = floor (skill->value);
g_spawn.c:535:	if (skill->value != skill_level)
g_spawn.c:536:		gi.cvar_forceset("skill", va("%f", skill_level));
g_spawn.c:575:		// remove things (except the world) from different skill levels or deathmatch
g_spawn.c:590:					((skill->value == 0) && (ent->spawnflags & SPAWNFLAG_NOT_EASY)) ||
g_spawn.c:591:					((skill->value == 1) && (ent->spawnflags & SPAWNFLAG_NOT_MEDIUM)) ||
g_spawn.c:592:					(((skill->value == 2) || (skill->value == 3)) && (ent->spawnflags & SPAWNFLAG_NOT_HARD))
g_turret.c:91:	speed = 550 + 50 * skill->value;
g_turret.c:345:	reaction_time = (3 - skill->value) * 1.0;
g_weapon.c:40:	if (skill->value == 0)
m_berserk.c:326:	if (skill->value == 3)
m_boss31.c:452:	if (skill->value == 3)
m_boss32.c:570:	if (skill->value == 3)
m_brain.c:466:	if (fire_hit (self, aim, (10 + (rand() %5)), -600) && skill->value > 0)
m_brain.c:553:	if (skill->value == 3)
m_chick.c:286:	if (skill->value == 3)
m_flipper.c:235:	if (skill->value == 3)
m_float.c:577:	if (skill->value == 3)
m_flyer.c:542:	if (skill->value == 3)
m_gladiator.c:260:	if (skill->value == 3)
m_gunner.c:298:	if (skill->value == 3)
m_gunner.c:368:	if (skill->value >= 2)
m_hover.c:497:	if (skill->value == 3)
m_infantry.c:227:	if (skill->value == 3)
m_insane.c:500:	if (skill->value == 3)
m_medic.c:327:	if (skill->value == 3)
m_mutant.c:282:	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_mutant.c:508:	if (skill->value == 3)
m_parasite.c:285:	if (skill->value == 3)
m_soldier.c:440:	if (skill->value == 3)
m_soldier.c:541:	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_soldier.c:555:	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_soldier.c:591:	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_soldier.c:605:	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_soldier.c:688://	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_soldier.c:716:	if ( ((skill->value == 3) && (random() < 0.5)) || (range(self, self->enemy) == RANGE_MELEE) )
m_soldier.c:749:	if (skill->value == 3)
m_soldier.c:799:	if ((skill->value > 0) && (range(self, self->enemy) >= RANGE_MID))
m_soldier.c:839:	if (skill->value == 0)
m_soldier.c:848:	if (skill->value == 1)
m_soldier.c:857:	if (skill->value >= 2)
m_supertank.c:467:	if (skill->value >= 2)
m_supertank.c:473:	if (skill->value == 3)
m_tank.c:304:	if ( skill->value >= 2)
m_tank.c:315:	if (skill->value == 3)
m_tank.c:469:	if (skill->value >= 2)
m_tank.c:639:	if ( skill->value >= 2 )
p_hud.c:307:	if (skill->value == 0)
p_hud.c:309:	else if (skill->value == 1)
p_hud.c:311:	else if (skill->value == 2)
p_hud.c:319:		"xv 202 yv 12 string2 \"%s\" "		// skill
sm_meat_index usage ===
g_main.c:29:int	sm_meat_index;
g_misc.c:121:		if (self->s.modelindex == sm_meat_index)
g_spawn.c:933:	sm_meat_index = gi.modelindex ("models/objects/gibs/sm_meat/tris.md2");
snd_fry usage ===
g_main.c:30:int	snd_fry;
g_spawn.c:860:	snd_fry = gi.soundindex ("player/fry.wav");	// standing in lava / slime
p_view.c:839:		ent->s.sound = snd_fry;
soldier_frames_attack1 usage ===
m_soldier.c:559:mframe_t soldier_frames_attack1 [] =
m_soldier.c:574:mmove_t soldier_move_attack1 = {FRAME_attak101, FRAME_attak112, soldier_frames_attack1, soldier_run};
soldier_frames_attack2 usage ===
m_soldier.c:609:mframe_t soldier_frames_attack2 [] =
m_soldier.c:630:mmove_t soldier_move_attack2 = {FRAME_attak201, FRAME_attak218, soldier_frames_attack2, soldier_run};
soldier_frames_attack3 usage ===
m_soldier.c:665:mframe_t soldier_frames_attack3 [] =
m_soldier.c:677:mmove_t soldier_move_attack3 = {FRAME_attak301, FRAME_attak309, soldier_frames_attack3, soldier_run};
soldier_frames_attack4 usage ===
m_soldier.c:692:mframe_t soldier_frames_attack4 [] =
m_soldier.c:701:mmove_t soldier_move_attack4 = {FRAME_attak401, FRAME_attak406, soldier_frames_attack4, soldier_run};
soldier_frames_attack6 usage ===
m_soldier.c:753:mframe_t soldier_frames_attack6 [] =
m_soldier.c:770:mmove_t soldier_move_attack6 = {FRAME_runs01, FRAME_runs14, soldier_frames_attack6, soldier_run};
soldier_frames_death1 usage ===
m_soldier.c:894:mframe_t soldier_frames_death1 [] =
m_soldier.c:936:mmove_t soldier_move_death1 = {FRAME_death101, FRAME_death136, soldier_frames_death1, soldier_dead};
soldier_frames_death2 usage ===
m_soldier.c:938:mframe_t soldier_frames_death2 [] =
m_soldier.c:979:mmove_t soldier_move_death2 = {FRAME_death201, FRAME_death235, soldier_frames_death2, soldier_dead};
soldier_frames_death3 usage ===
m_soldier.c:981:mframe_t soldier_frames_death3 [] =
m_soldier.c:1033:mmove_t soldier_move_death3 = {FRAME_death301, FRAME_death345, soldier_frames_death3, soldier_dead};
soldier_frames_death4 usage ===
m_soldier.c:1035:mframe_t soldier_frames_death4 [] =
m_soldier.c:1096:mmove_t soldier_move_death4 = {FRAME_death401, FRAME_death453, soldier_frames_death4, soldier_dead};
soldier_frames_death5 usage ===
m_soldier.c:1098:mframe_t soldier_frames_death5 [] =
m_soldier.c:1127:mmove_t soldier_move_death5 = {FRAME_death501, FRAME_death524, soldier_frames_death5, soldier_dead};
soldier_frames_death6 usage ===
m_soldier.c:1129:mframe_t soldier_frames_death6 [] =
m_soldier.c:1142:mmove_t soldier_move_death6 = {FRAME_death601, FRAME_death610, soldier_frames_death6, soldier_dead};
soldier_frames_duck usage ===
m_soldier.c:818:mframe_t soldier_frames_duck [] =
m_soldier.c:826:mmove_t soldier_move_duck = {FRAME_duck01, FRAME_duck05, soldier_frames_duck, soldier_run};
soldier_frames_pain1 usage ===
m_soldier.c:341:mframe_t soldier_frames_pain1 [] =
m_soldier.c:349:mmove_t soldier_move_pain1 = {FRAME_pain101, FRAME_pain105, soldier_frames_pain1, soldier_run};
soldier_frames_pain2 usage ===
m_soldier.c:351:mframe_t soldier_frames_pain2 [] =
m_soldier.c:361:mmove_t soldier_move_pain2 = {FRAME_pain201, FRAME_pain207, soldier_frames_pain2, soldier_run};
soldier_frames_pain3 usage ===
m_soldier.c:363:mframe_t soldier_frames_pain3 [] =
m_soldier.c:384:mmove_t soldier_move_pain3 = {FRAME_pain301, FRAME_pain318, soldier_frames_pain3, soldier_run};
soldier_frames_pain4 usage ===
m_soldier.c:386:mframe_t soldier_frames_pain4 [] =
m_soldier.c:406:mmove_t soldier_move_pain4 = {FRAME_pain401, FRAME_pain417, soldier_frames_pain4, soldier_run};
soldier_frames_run usage ===
m_soldier.c:305:mframe_t soldier_frames_run [] =
m_soldier.c:314:mmove_t soldier_move_run = {FRAME_run03, FRAME_run08, soldier_frames_run, NULL};
soldier_frames_stand1 usage ===
m_soldier.c:63:mframe_t soldier_frames_stand1 [] =
m_soldier.c:98:mmove_t soldier_move_stand1 = {FRAME_stand101, FRAME_stand130, soldier_frames_stand1, soldier_stand};
soldier_frames_stand3 usage ===
m_soldier.c:100:mframe_t soldier_frames_stand3 [] =
m_soldier.c:145:mmove_t soldier_move_stand3 = {FRAME_stand301, FRAME_stand339, soldier_frames_stand3, soldier_stand};
soldier_frames_start_run usage ===
m_soldier.c:298:mframe_t soldier_frames_start_run [] =
m_soldier.c:303:mmove_t soldier_move_start_run = {FRAME_run01, FRAME_run02, soldier_frames_start_run, soldier_run};
soldier_frames_walk1 usage ===
m_soldier.c:230:mframe_t soldier_frames_walk1 [] =
m_soldier.c:266:mmove_t soldier_move_walk1 = {FRAME_walk101, FRAME_walk133, soldier_frames_walk1, NULL};
soldier_frames_walk2 usage ===
m_soldier.c:268:mframe_t soldier_frames_walk2 [] =
m_soldier.c:281:mmove_t soldier_move_walk2 = {FRAME_walk209, FRAME_walk218, soldier_frames_walk2, NULL};
soldier_move_attack1 usage ===
m_soldier.c:574:mmove_t soldier_move_attack1 = {FRAME_attak101, FRAME_attak112, soldier_frames_attack1, soldier_run};
m_soldier.c:777:			self->monsterinfo.currentmove = &soldier_move_attack1;
soldier_move_attack2 usage ===
m_soldier.c:630:mmove_t soldier_move_attack2 = {FRAME_attak201, FRAME_attak218, soldier_frames_attack2, soldier_run};
m_soldier.c:779:			self->monsterinfo.currentmove = &soldier_move_attack2;
soldier_move_attack3 usage ===
m_soldier.c:677:mmove_t soldier_move_attack3 = {FRAME_attak301, FRAME_attak309, soldier_frames_attack3, soldier_run};
m_soldier.c:853:			self->monsterinfo.currentmove = &soldier_move_attack3;
m_soldier.c:862:			self->monsterinfo.currentmove = &soldier_move_attack3;
m_soldier.c:866:	self->monsterinfo.currentmove = &soldier_move_attack3;
soldier_move_attack4 usage ===
m_soldier.c:701:mmove_t soldier_move_attack4 = {FRAME_attak401, FRAME_attak406, soldier_frames_attack4, soldier_run};
m_soldier.c:783:		self->monsterinfo.currentmove = &soldier_move_attack4;
soldier_move_attack6 usage ===
m_soldier.c:770:mmove_t soldier_move_attack6 = {FRAME_runs01, FRAME_runs14, soldier_frames_attack6, soldier_run};
m_soldier.c:802:			self->monsterinfo.currentmove = &soldier_move_attack6;
soldier_move_death1 usage ===
m_soldier.c:936:mmove_t soldier_move_death1 = {FRAME_death101, FRAME_death136, soldier_frames_death1, soldier_dead};
m_soldier.c:1184:		self->monsterinfo.currentmove = &soldier_move_death1;
soldier_move_death2 usage ===
m_soldier.c:979:mmove_t soldier_move_death2 = {FRAME_death201, FRAME_death235, soldier_frames_death2, soldier_dead};
m_soldier.c:1186:		self->monsterinfo.currentmove = &soldier_move_death2;
soldier_move_death3 usage ===
m_soldier.c:1033:mmove_t soldier_move_death3 = {FRAME_death301, FRAME_death345, soldier_frames_death3, soldier_dead};
m_soldier.c:1178:		self->monsterinfo.currentmove = &soldier_move_death3;
soldier_move_death4 usage ===
m_soldier.c:1096:mmove_t soldier_move_death4 = {FRAME_death401, FRAME_death453, soldier_frames_death4, soldier_dead};
m_soldier.c:1188:		self->monsterinfo.currentmove = &soldier_move_death4;
soldier_move_death5 usage ===
m_soldier.c:1127:mmove_t soldier_move_death5 = {FRAME_death501, FRAME_death524, soldier_frames_death5, soldier_dead};
m_soldier.c:1190:		self->monsterinfo.currentmove = &soldier_move_death5;
soldier_move_death6 usage ===
m_soldier.c:1142:mmove_t soldier_move_death6 = {FRAME_death601, FRAME_death610, soldier_frames_death6, soldier_dead};
m_soldier.c:1192:		self->monsterinfo.currentmove = &soldier_move_death6;
soldier_move_duck usage ===
m_soldier.c:826:mmove_t soldier_move_duck = {FRAME_duck01, FRAME_duck05, soldier_frames_duck, soldier_run};
m_soldier.c:841:		self->monsterinfo.currentmove = &soldier_move_duck;
m_soldier.c:851:			self->monsterinfo.currentmove = &soldier_move_duck;
m_soldier.c:860:			self->monsterinfo.currentmove = &soldier_move_duck;
soldier_move_pain1 usage ===
m_soldier.c:349:mmove_t soldier_move_pain1 = {FRAME_pain101, FRAME_pain105, soldier_frames_pain1, soldier_run};
m_soldier.c:419:		if ((self->velocity[2] > 100) && ( (self->monsterinfo.currentmove == &soldier_move_pain1) || (self->monsterinfo.currentmove == &soldier_move_pain2) || (self->monsterinfo.currentmove == &soldier_move_pain3)))
m_soldier.c:446:		self->monsterinfo.currentmove = &soldier_move_pain1;
soldier_move_pain2 usage ===
m_soldier.c:361:mmove_t soldier_move_pain2 = {FRAME_pain201, FRAME_pain207, soldier_frames_pain2, soldier_run};
m_soldier.c:419:		if ((self->velocity[2] > 100) && ( (self->monsterinfo.currentmove == &soldier_move_pain1) || (self->monsterinfo.currentmove == &soldier_move_pain2) || (self->monsterinfo.currentmove == &soldier_move_pain3)))
m_soldier.c:448:		self->monsterinfo.currentmove = &soldier_move_pain2;
soldier_move_pain3 usage ===
m_soldier.c:384:mmove_t soldier_move_pain3 = {FRAME_pain301, FRAME_pain318, soldier_frames_pain3, soldier_run};
m_soldier.c:419:		if ((self->velocity[2] > 100) && ( (self->monsterinfo.currentmove == &soldier_move_pain1) || (self->monsterinfo.currentmove == &soldier_move_pain2) || (self->monsterinfo.currentmove == &soldier_move_pain3)))
m_soldier.c:450:		self->monsterinfo.currentmove = &soldier_move_pain3;
soldier_move_pain4 usage ===
m_soldier.c:406:mmove_t soldier_move_pain4 = {FRAME_pain401, FRAME_pain417, soldier_frames_pain4, soldier_run};
m_soldier.c:420:			self->monsterinfo.currentmove = &soldier_move_pain4;
m_soldier.c:436:		self->monsterinfo.currentmove = &soldier_move_pain4;
soldier_move_run usage ===
m_soldier.c:314:mmove_t soldier_move_run = {FRAME_run03, FRAME_run08, soldier_frames_run, NULL};
m_soldier.c:328:		self->monsterinfo.currentmove = &soldier_move_run;
soldier_move_stand1 usage ===
m_soldier.c:98:mmove_t soldier_move_stand1 = {FRAME_stand101, FRAME_stand130, soldier_frames_stand1, soldier_stand};
m_soldier.c:214:		self->monsterinfo.currentmove = &soldier_move_stand1;
m_soldier.c:320:		self->monsterinfo.currentmove = &soldier_move_stand1;
soldier_move_stand3 usage ===
m_soldier.c:145:mmove_t soldier_move_stand3 = {FRAME_stand301, FRAME_stand339, soldier_frames_stand3, soldier_stand};
m_soldier.c:213:	if ((self->monsterinfo.currentmove == &soldier_move_stand3) || (random() < 0.8))
m_soldier.c:216:		self->monsterinfo.currentmove = &soldier_move_stand3;
soldier_move_start_run usage ===
m_soldier.c:303:mmove_t soldier_move_start_run = {FRAME_run01, FRAME_run02, soldier_frames_start_run, soldier_run};
m_soldier.c:326:		self->monsterinfo.currentmove == &soldier_move_start_run)
m_soldier.c:332:		self->monsterinfo.currentmove = &soldier_move_start_run;
soldier_move_walk1 usage ===
m_soldier.c:266:mmove_t soldier_move_walk1 = {FRAME_walk101, FRAME_walk133, soldier_frames_walk1, NULL};
m_soldier.c:286:		self->monsterinfo.currentmove = &soldier_move_walk1;
m_soldier.c:324:	if (self->monsterinfo.currentmove == &soldier_move_walk1 ||
soldier_move_walk2 usage ===
m_soldier.c:281:mmove_t soldier_move_walk2 = {FRAME_walk209, FRAME_walk218, soldier_frames_walk2, NULL};
m_soldier.c:288:		self->monsterinfo.currentmove = &soldier_move_walk2;
m_soldier.c:325:		self->monsterinfo.currentmove == &soldier_move_walk2 ||
spawns usage ===
g_func.c:1044:		return;		// only the team leader spawns a trigger
g_func.c:1452:The train spawns at the first target it is pointing at.
g_spawn.c:148:spawn_t	spawns[] = {
g_spawn.c:303:	for (s=spawns ; s->name ; s++)
spectator_password usage ===
g_main.c:42:cvar_t	*spectator_password;
g_main.c:285:	// if password or spectator_password has changed, update needpass
g_main.c:287:	if (password->modified || spectator_password->modified) 
g_main.c:289:		password->modified = spectator_password->modified = false;
g_main.c:295:		if (*spectator_password->string && Q_stricmp(spectator_password->string, "none"))
g_save.c:186:	spectator_password = gi.cvar ("spectator_password", "", CVAR_USERINFO);
p_client.c:1019:		if (*spectator_password->string && 
p_client.c:1020:			strcmp(spectator_password->string, "none") && 
p_client.c:1021:			strcmp(spectator_password->string, value)) {
p_client.c:1456:		if (*spectator_password->string && 
p_client.c:1457:			strcmp(spectator_password->string, "none") && 
p_client.c:1458:			strcmp(spectator_password->string, value)) {
st usage ===
g_cmds.c:876:	char st[80];
g_cmds.c:886:		Com_sprintf(st, sizeof(st), "%02d:%02d %4d %3d %s%s\n",
g_cmds.c:893:		if (strlen(text) + strlen(st) > sizeof(text) - 50) {
g_cmds.c:898:		strcat(text, st);
g_func.c:473:	tmin[2] = tmax[2] - (ent->pos1[2] - ent->pos2[2] + st.lip);
g_func.c:541:	if (!st.lip)
g_func.c:542:		st.lip = 8;
g_func.c:547:	if (st.height)
g_func.c:548:		ent->pos2[2] -= st.height;
g_func.c:550:		ent->pos2[2] -= (ent->maxs[2] - ent->mins[2]) - st.lip;
g_func.c:785:	if (!st.lip)
g_func.c:786:		st.lip = 4;
g_func.c:792:	dist = abs_movedir[0] * ent->size[0] + abs_movedir[1] * ent->size[1] + abs_movedir[2] * ent->size[2] - st.lip;
g_func.c:1169:	if (!st.lip)
g_func.c:1170:		st.lip = 8;
g_func.c:1179:	ent->moveinfo.distance = abs_movedir[0] * ent->size[0] + abs_movedir[1] * ent->size[1] + abs_movedir[2] * ent->size[2] - st.lip;
g_func.c:1278:	if (!st.distance)
g_func.c:1281:		st.distance = 90;
g_func.c:1285:	VectorMA (ent->s.angles, st.distance, ent->movedir, ent->pos2);
g_func.c:1286:	ent->moveinfo.distance = st.distance;
g_func.c:1408:	self->moveinfo.distance = abs_movedir[0] * self->size[0] + abs_movedir[1] * self->size[1] + abs_movedir[2] * self->size[2] - st.lip;
g_func.c:1670:	if (st.noise)
g_func.c:1671:		self->moveinfo.sound_middle = gi.soundindex  (st.noise);
g_func.c:1811:		self->nextthink = level.time + 1.0 + st.pausetime + self->delay + self->wait + crandom() * self->random;
g_main.c:27:spawn_temp_t	st;
g_monster.c:569:	if (st.item)
g_monster.c:571:		self->item = FindItemByClassname (st.item);
g_monster.c:573:			gi.dprintf("%s at %s has bad item: %s\n", self->classname, vtos(self->s.origin), st.item);
g_spawn.c:370:				b = (byte *)&st;
g_spawn.c:423:	memset (&st, 0, sizeof(st));
g_spawn.c:813:	if (st.nextmap)
g_spawn.c:814:		strcpy (level.nextmap, st.nextmap);
g_spawn.c:826:	if (st.sky && st.sky[0])
g_spawn.c:827:		gi.configstring (CS_SKY, st.sky);
g_spawn.c:831:	gi.configstring (CS_SKYROTATE, va("%f", st.skyrotate) );
g_spawn.c:834:		st.skyaxis[0], st.skyaxis[1], st.skyaxis[2]) );
g_spawn.c:855:	if (!st.gravity)
g_spawn.c:858:		gi.cvar_set("sv_gravity", st.gravity);
g_target.c:85:	if(!st.noise)
g_target.c:90:	if (!strstr (st.noise, ".wav"))
g_target.c:91:		Com_sprintf (buffer, sizeof(buffer), "%s.wav", st.noise);
g_target.c:93:		strncpy (buffer, st.noise, sizeof(buffer));
g_target.c:173:	if (!st.noise)
g_target.c:174:		st.noise = "misc/secret.wav";
g_target.c:175:	ent->noise_index = gi.soundindex (st.noise);
g_target.c:211:	if (!st.noise)
g_target.c:212:		st.noise = "misc/secret.wav";
g_target.c:213:	ent->noise_index = gi.soundindex (st.noise);
g_trigger.c:284:	if (!st.item)
g_trigger.c:289:	self->item = FindItemByClassname (st.item);
g_trigger.c:293:		gi.dprintf("item %s not found for trigger_key at %s\n", st.item, vtos(self->s.origin));
g_trigger.c:539:	if (st.gravity == 0)
g_trigger.c:547:	self->gravity = atoi(st.gravity);
g_trigger.c:590:	if (!st.height)
g_trigger.c:591:		st.height = 200;
g_trigger.c:596:	self->movedir[2] = st.height;
g_turret.c:231:	if (!st.minpitch)
g_turret.c:232:		st.minpitch = -30;
g_turret.c:233:	if (!st.maxpitch)
g_turret.c:234:		st.maxpitch = 30;
g_turret.c:235:	if (!st.maxyaw)
g_turret.c:236:		st.maxyaw = 360;
g_turret.c:238:	self->pos1[PITCH] = -1 * st.minpitch;
g_turret.c:239:	self->pos1[YAW]   = st.minyaw;
g_turret.c:240:	self->pos2[PITCH] = -1 * st.maxpitch;
g_turret.c:241:	self->pos2[YAW]   = st.maxyaw;
g_turret.c:421:	if (st.item)
g_turret.c:423:		self->item = FindItemByClassname (st.item);
g_turret.c:425:			gi.dprintf("%s at %s has bad item: %s\n", self->classname, vtos(self->s.origin), st.item);
m_actor.c:600:		if (!st.height)
m_actor.c:601:			st.height = 200;
m_actor.c:605:		self->movedir[2] = st.height;
q_shared.c:446:		fld st(0)
q_shared.c:451:		fxch st(2)
q_shared.c:453:		fxch st(2)
q_shared.c:454:		fld st(0)
q_shared.c:457:		fxch st(2)
q_shared.c:459:		fxch st(2)
q_shared.c:460:		fld st(0)
q_shared.c:462:		fxch st(5)
q_shared.c:463:		faddp st(3),st(0)
q_shared.c:465:		fxch st(1)
q_shared.c:466:		faddp st(3),st(0)
q_shared.c:467:		fxch st(3)
q_shared.c:468:		faddp st(2),st(0)
q_shared.c:473:		fxch st(2)
q_shared.c:475:		fxch st(2)
q_shared.c:476:		fld st(0)
q_shared.c:479:		fxch st(2)
q_shared.c:481:		fxch st(2)
q_shared.c:482:		fld st(0)
q_shared.c:484:		fxch st(5)
q_shared.c:485:		faddp st(3),st(0)
q_shared.c:487:		fxch st(1)
q_shared.c:488:		faddp st(3),st(0)
q_shared.c:489:		fxch st(3)
q_shared.c:490:		faddp st(2),st(0)
q_shared.c:495:		fxch st(2)
q_shared.c:497:		fxch st(2)
q_shared.c:498:		fld st(0)
q_shared.c:501:		fxch st(2)
q_shared.c:503:		fxch st(2)
q_shared.c:504:		fld st(0)
q_shared.c:506:		fxch st(5)
q_shared.c:507:		faddp st(3),st(0)
q_shared.c:509:		fxch st(1)
q_shared.c:510:		faddp st(3),st(0)
q_shared.c:511:		fxch st(3)
q_shared.c:512:		faddp st(2),st(0)
q_shared.c:517:		fxch st(2)
q_shared.c:519:		fxch st(2)
q_shared.c:520:		fld st(0)
q_shared.c:523:		fxch st(2)
q_shared.c:525:		fxch st(2)
q_shared.c:526:		fld st(0)
q_shared.c:528:		fxch st(5)
q_shared.c:529:		faddp st(3),st(0)
q_shared.c:531:		fxch st(1)
q_shared.c:532:		faddp st(3),st(0)
q_shared.c:533:		fxch st(3)
q_shared.c:534:		faddp st(2),st(0)
q_shared.c:539:		fxch st(2)
q_shared.c:541:		fxch st(2)
q_shared.c:542:		fld st(0)
q_shared.c:545:		fxch st(2)
q_shared.c:547:		fxch st(2)
q_shared.c:548:		fld st(0)
q_shared.c:550:		fxch st(5)
q_shared.c:551:		faddp st(3),st(0)
q_shared.c:553:		fxch st(1)
q_shared.c:554:		faddp st(3),st(0)
q_shared.c:555:		fxch st(3)
q_shared.c:556:		faddp st(2),st(0)
q_shared.c:561:		fxch st(2)
q_shared.c:563:		fxch st(2)
q_shared.c:564:		fld st(0)
q_shared.c:567:		fxch st(2)
q_shared.c:569:		fxch st(2)
q_shared.c:570:		fld st(0)
q_shared.c:572:		fxch st(5)
q_shared.c:573:		faddp st(3),st(0)
q_shared.c:575:		fxch st(1)
q_shared.c:576:		faddp st(3),st(0)
q_shared.c:577:		fxch st(3)
q_shared.c:578:		faddp st(2),st(0)
q_shared.c:583:		fxch st(2)
q_shared.c:585:		fxch st(2)
q_shared.c:586:		fld st(0)
q_shared.c:589:		fxch st(2)
q_shared.c:591:		fxch st(2)
q_shared.c:592:		fld st(0)
q_shared.c:594:		fxch st(5)
q_shared.c:595:		faddp st(3),st(0)
q_shared.c:597:		fxch st(1)
q_shared.c:598:		faddp st(3),st(0)
q_shared.c:599:		fxch st(3)
q_shared.c:600:		faddp st(2),st(0)
q_shared.c:605:		fxch st(2)
q_shared.c:607:		fxch st(2)
q_shared.c:608:		fld st(0)
q_shared.c:611:		fxch st(2)
q_shared.c:613:		fxch st(2)
q_shared.c:614:		fld st(0)
q_shared.c:616:		fxch st(5)
q_shared.c:617:		faddp st(3),st(0)
q_shared.c:619:		fxch st(1)
q_shared.c:620:		faddp st(3),st(0)
q_shared.c:621:		fxch st(3)
q_shared.c:622:		faddp st(2),st(0)
q_shared.c:624:		faddp st(2),st(0)
supertank_frames_attack1 usage ===
m_supertank.c:409:mframe_t supertank_frames_attack1[]=
m_supertank.c:419:mmove_t supertank_move_attack1 = {FRAME_attak1_1, FRAME_attak1_6, supertank_frames_attack1, supertank_reattack1};
supertank_frames_attack2 usage ===
m_supertank.c:377:mframe_t supertank_frames_attack2[]=
m_supertank.c:407:mmove_t supertank_move_attack2 = {FRAME_attak2_1, FRAME_attak2_27, supertank_frames_attack2, supertank_run};
supertank_frames_attack3 usage ===
m_supertank.c:345:mframe_t supertank_frames_attack3[]=
m_supertank.c:375:mmove_t supertank_move_attack3 = {FRAME_attak3_1, FRAME_attak3_27, supertank_frames_attack3, supertank_run};
supertank_frames_attack4 usage ===
m_supertank.c:334:mframe_t supertank_frames_attack4[]=
m_supertank.c:343:mmove_t supertank_move_attack4 = {FRAME_attak4_1, FRAME_attak4_6, supertank_frames_attack4, supertank_run};
supertank_frames_backward usage ===
m_supertank.c:311:mframe_t supertank_frames_backward[] =
m_supertank.c:332:mmove_t	supertank_move_backward = {FRAME_backwd_1, FRAME_backwd_18, supertank_frames_backward, NULL};
supertank_frames_death1 usage ===
m_supertank.c:282:mframe_t supertank_frames_death1 [] =
m_supertank.c:309:mmove_t supertank_move_death = {FRAME_death_1, FRAME_death_24, supertank_frames_death1, supertank_dead};
supertank_frames_end_attack1 usage ===
m_supertank.c:421:mframe_t supertank_frames_end_attack1[]=
m_supertank.c:438:mmove_t supertank_move_end_attack1 = {FRAME_attak1_7, FRAME_attak1_20, supertank_frames_end_attack1, supertank_run};
supertank_frames_forward usage ===
m_supertank.c:167:mframe_t supertank_frames_forward [] =
m_supertank.c:188:mmove_t	supertank_move_forward = {FRAME_forwrd_1, FRAME_forwrd_18, supertank_frames_forward, NULL};
supertank_frames_pain1 usage ===
m_supertank.c:273:mframe_t supertank_frames_pain1 [] =
m_supertank.c:280:mmove_t supertank_move_pain1 = {FRAME_pain1_1, FRAME_pain1_4, supertank_frames_pain1, supertank_run};
supertank_frames_pain2 usage ===
m_supertank.c:264:mframe_t supertank_frames_pain2 [] =
m_supertank.c:271:mmove_t supertank_move_pain2 = {FRAME_pain2_5, FRAME_pain2_8, supertank_frames_pain2, supertank_run};
supertank_frames_pain3 usage ===
m_supertank.c:255:mframe_t supertank_frames_pain3 [] =
m_supertank.c:262:mmove_t supertank_move_pain3 = {FRAME_pain3_9, FRAME_pain3_12, supertank_frames_pain3, supertank_run};
supertank_frames_run usage ===
m_supertank.c:139:mframe_t supertank_frames_run [] =
m_supertank.c:160:mmove_t	supertank_move_run = {FRAME_forwrd_1, FRAME_forwrd_18, supertank_frames_run, NULL};
supertank_frames_stand usage ===
m_supertank.c:68:mframe_t supertank_frames_stand []=
m_supertank.c:131:mmove_t	supertank_move_stand = {FRAME_stand_1, FRAME_stand_60, supertank_frames_stand, NULL};
supertank_frames_turn_left usage ===
m_supertank.c:231:mframe_t supertank_frames_turn_left [] =
m_supertank.c:252:mmove_t supertank_move_turn_left = {FRAME_left_1, FRAME_left_18, supertank_frames_turn_left, supertank_run};
supertank_frames_turn_right usage ===
m_supertank.c:208:mframe_t supertank_frames_turn_right [] =
m_supertank.c:229:mmove_t supertank_move_turn_right = {FRAME_right_1, FRAME_right_18, supertank_frames_turn_right, supertank_run};
supertank_move_attack1 usage ===
m_supertank.c:419:mmove_t supertank_move_attack1 = {FRAME_attak1_1, FRAME_attak1_6, supertank_frames_attack1, supertank_reattack1};
m_supertank.c:445:			self->monsterinfo.currentmove = &supertank_move_attack1;
m_supertank.c:567:		self->monsterinfo.currentmove = &supertank_move_attack1;
m_supertank.c:572:			self->monsterinfo.currentmove = &supertank_move_attack1;
supertank_move_attack2 usage ===
m_supertank.c:407:mmove_t supertank_move_attack2 = {FRAME_attak2_1, FRAME_attak2_27, supertank_frames_attack2, supertank_run};
m_supertank.c:574:			self->monsterinfo.currentmove = &supertank_move_attack2;
supertank_move_attack3 usage ===
m_supertank.c:375:mmove_t supertank_move_attack3 = {FRAME_attak3_1, FRAME_attak3_27, supertank_frames_attack3, supertank_run};
supertank_move_attack4 usage ===
m_supertank.c:343:mmove_t supertank_move_attack4 = {FRAME_attak4_1, FRAME_attak4_6, supertank_frames_attack4, supertank_run};
supertank_move_backward usage ===
m_supertank.c:332:mmove_t	supertank_move_backward = {FRAME_backwd_1, FRAME_backwd_18, supertank_frames_backward, NULL};
supertank_move_death usage ===
m_supertank.c:309:mmove_t supertank_move_death = {FRAME_death_1, FRAME_death_24, supertank_frames_death1, supertank_dead};
m_supertank.c:663:	self->monsterinfo.currentmove = &supertank_move_death;
supertank_move_end_attack1 usage ===
m_supertank.c:438:mmove_t supertank_move_end_attack1 = {FRAME_attak1_7, FRAME_attak1_20, supertank_frames_end_attack1, supertank_run};
m_supertank.c:447:			self->monsterinfo.currentmove = &supertank_move_end_attack1;	
m_supertank.c:449:		self->monsterinfo.currentmove = &supertank_move_end_attack1;
supertank_move_forward usage ===
m_supertank.c:188:mmove_t	supertank_move_forward = {FRAME_forwrd_1, FRAME_forwrd_18, supertank_frames_forward, NULL};
m_supertank.c:192:		self->monsterinfo.currentmove = &supertank_move_forward;
m_supertank.c:197:		self->monsterinfo.currentmove = &supertank_move_forward;
supertank_move_pain1 usage ===
m_supertank.c:280:mmove_t supertank_move_pain1 = {FRAME_pain1_1, FRAME_pain1_4, supertank_frames_pain1, supertank_run};
m_supertank.c:479:		self->monsterinfo.currentmove = &supertank_move_pain1;
supertank_move_pain2 usage ===
m_supertank.c:271:mmove_t supertank_move_pain2 = {FRAME_pain2_5, FRAME_pain2_8, supertank_frames_pain2, supertank_run};
m_supertank.c:484:		self->monsterinfo.currentmove = &supertank_move_pain2;
supertank_move_pain3 usage ===
m_supertank.c:262:mmove_t supertank_move_pain3 = {FRAME_pain3_9, FRAME_pain3_12, supertank_frames_pain3, supertank_run};
m_supertank.c:489:		self->monsterinfo.currentmove = &supertank_move_pain3;
supertank_move_run usage ===
m_supertank.c:160:mmove_t	supertank_move_run = {FRAME_forwrd_1, FRAME_forwrd_18, supertank_frames_run, NULL};
m_supertank.c:205:		self->monsterinfo.currentmove = &supertank_move_run;
supertank_move_stand usage ===
m_supertank.c:131:mmove_t	supertank_move_stand = {FRAME_stand_1, FRAME_stand_60, supertank_frames_stand, NULL};
m_supertank.c:135:	self->monsterinfo.currentmove = &supertank_move_stand;
m_supertank.c:203:		self->monsterinfo.currentmove = &supertank_move_stand;
m_supertank.c:713:	self->monsterinfo.currentmove = &supertank_move_stand;
supertank_move_turn_left usage ===
m_supertank.c:252:mmove_t supertank_move_turn_left = {FRAME_left_1, FRAME_left_18, supertank_frames_turn_left, supertank_run};
supertank_move_turn_right usage ===
m_supertank.c:229:mmove_t supertank_move_turn_right = {FRAME_right_1, FRAME_right_18, supertank_frames_turn_right, supertank_run};
sv_cheats usage ===
g_cmds.c:161:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:312:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:341:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_cmds.c:368:	if ((deathmatch->value || coop->value) && !sv_cheats->value)
g_main.c:68:cvar_t	*sv_cheats;
g_save.c:170:	sv_cheats = gi.cvar ("cheats", "0", CVAR_SERVERINFO|CVAR_LATCH);
sv_gravity usage ===
g_main.c:53:cvar_t	*sv_gravity;
g_phys.c:324:	ent->velocity[2] -= ent->gravity * sv_gravity->value * FRAMETIME;
g_phys.c:848:				if (ent->velocity[2] < sv_gravity->value*-0.1)
g_save.c:164:	sv_gravity = gi.cvar ("sv_gravity", "800", 0);
g_spawn.c:856:		gi.cvar_set("sv_gravity", "800");
g_spawn.c:858:		gi.cvar_set("sv_gravity", st.gravity);
p_client.c:1624:		client->ps.pmove.gravity = sv_gravity->value;
sv_maplist usage ===
g_main.c:74:cvar_t	*sv_maplist;
g_main.c:236:	if (*sv_maplist->string) {
g_main.c:237:		s = strdup(sv_maplist->string);
g_save.c:204:	sv_maplist = gi.cvar ("sv_maplist", "", 0);
sv_maxvelocity usage ===
g_main.c:52:cvar_t	*sv_maxvelocity;
g_phys.c:81:		if (ent->velocity[i] > sv_maxvelocity->value)
g_phys.c:82:			ent->velocity[i] = sv_maxvelocity->value;
g_phys.c:83:		else if (ent->velocity[i] < -sv_maxvelocity->value)
g_phys.c:84:			ent->velocity[i] = -sv_maxvelocity->value;
g_save.c:163:	sv_maxvelocity = gi.cvar ("sv_maxvelocity", "2000", 0);
sv_rollangle usage ===
g_main.c:56:cvar_t	*sv_rollangle;
g_save.c:162:	sv_rollangle = gi.cvar ("sv_rollangle", "2", 0);
p_view.c:52:	value = sv_rollangle->value;
sv_rollspeed usage ===
g_main.c:55:cvar_t	*sv_rollspeed;
g_save.c:161:	sv_rollspeed = gi.cvar ("sv_rollspeed", "200", 0);
p_view.c:54:	if (side < sv_rollspeed->value)
p_view.c:55:		side = side * value / sv_rollspeed->value;
tank_frames_attack_blast usage ===
m_tank.c:424:mframe_t tank_frames_attack_blast [] =
m_tank.c:443:mmove_t tank_move_attack_blast = {FRAME_attak101, FRAME_attak116, tank_frames_attack_blast, tank_reattack_blaster};
tank_frames_attack_chain usage ===
m_tank.c:602:mframe_t tank_frames_attack_chain [] =
m_tank.c:634:mmove_t tank_move_attack_chain = {FRAME_attak401, FRAME_attak429, tank_frames_attack_chain, tank_run};
tank_frames_attack_fire_rocket usage ===
m_tank.c:558:mframe_t tank_frames_attack_fire_rocket [] =
m_tank.c:570:mmove_t tank_move_attack_fire_rocket = {FRAME_attak322, FRAME_attak330, tank_frames_attack_fire_rocket, tank_refire_rocket};
tank_frames_attack_post_blast usage ===
m_tank.c:456:mframe_t tank_frames_attack_post_blast [] =	
m_tank.c:465:mmove_t tank_move_attack_post_blast = {FRAME_attak117, FRAME_attak122, tank_frames_attack_post_blast, tank_run};
tank_frames_attack_post_rocket usage ===
m_tank.c:572:mframe_t tank_frames_attack_post_rocket [] =
m_tank.c:600:mmove_t tank_move_attack_post_rocket = {FRAME_attak331, FRAME_attak353, tank_frames_attack_post_rocket, tank_run};
tank_frames_attack_pre_rocket usage ===
m_tank.c:530:mframe_t tank_frames_attack_pre_rocket [] =
m_tank.c:556:mmove_t tank_move_attack_pre_rocket = {FRAME_attak301, FRAME_attak321, tank_frames_attack_pre_rocket, tank_doattack_rocket};
tank_frames_attack_strike usage ===
m_tank.c:487:mframe_t tank_frames_attack_strike [] =
m_tank.c:528:mmove_t tank_move_attack_strike = {FRAME_attak201, FRAME_attak238, tank_frames_attack_strike, tank_poststrike};
tank_frames_death1 usage ===
m_tank.c:716:mframe_t tank_frames_death1 [] =
m_tank.c:751:mmove_t	tank_move_death = {FRAME_death101, FRAME_death132, tank_frames_death1, tank_dead};
tank_frames_pain1 usage ===
m_tank.c:247:mframe_t tank_frames_pain1 [] =
m_tank.c:254:mmove_t tank_move_pain1 = {FRAME_pain101, FRAME_pain104, tank_frames_pain1, tank_run};
tank_frames_pain2 usage ===
m_tank.c:256:mframe_t tank_frames_pain2 [] =
m_tank.c:264:mmove_t tank_move_pain2 = {FRAME_pain201, FRAME_pain205, tank_frames_pain2, tank_run};
tank_frames_pain3 usage ===
m_tank.c:266:mframe_t tank_frames_pain3 [] =
m_tank.c:285:mmove_t	tank_move_pain3 = {FRAME_pain301, FRAME_pain316, tank_frames_pain3, tank_run};
tank_frames_reattack_blast usage ===
m_tank.c:445:mframe_t tank_frames_reattack_blast [] =
m_tank.c:454:mmove_t tank_move_reattack_blast = {FRAME_attak111, FRAME_attak116, tank_frames_reattack_blast, tank_reattack_blaster};
tank_frames_run usage ===
m_tank.c:188:mframe_t tank_frames_run [] =
m_tank.c:207:mmove_t	tank_move_run = {FRAME_walk05, FRAME_walk20, tank_frames_run, NULL};
tank_frames_stand usage ===
m_tank.c:80:mframe_t tank_frames_stand []=
m_tank.c:113:mmove_t	tank_move_stand = {FRAME_stand01, FRAME_stand30, tank_frames_stand, NULL};
tank_frames_start_run usage ===
m_tank.c:179:mframe_t tank_frames_start_run [] =
m_tank.c:186:mmove_t	tank_move_start_run = {FRAME_walk01, FRAME_walk04, tank_frames_start_run, tank_run};
tank_frames_start_walk usage ===
m_tank.c:127:mframe_t tank_frames_start_walk [] =
m_tank.c:134:mmove_t	tank_move_start_walk = {FRAME_walk01, FRAME_walk04, tank_frames_start_walk, tank_walk};
tank_frames_stop_run usage ===
m_tank.c:209:mframe_t tank_frames_stop_run [] =
m_tank.c:217:mmove_t	tank_move_stop_run = {FRAME_walk21, FRAME_walk25, tank_frames_stop_run, tank_walk};
tank_frames_stop_walk usage ===
m_tank.c:157:mframe_t tank_frames_stop_walk [] =
m_tank.c:165:mmove_t	tank_move_stop_walk = {FRAME_walk21, FRAME_walk25, tank_frames_stop_walk, tank_stand};
tank_frames_walk usage ===
m_tank.c:136:mframe_t tank_frames_walk [] =
m_tank.c:155:mmove_t	tank_move_walk = {FRAME_walk05, FRAME_walk20, tank_frames_walk, NULL};
tank_move_attack_blast usage ===
m_tank.c:443:mmove_t tank_move_attack_blast = {FRAME_attak101, FRAME_attak116, tank_frames_attack_blast, tank_reattack_blaster};
m_tank.c:678:			self->monsterinfo.currentmove = &tank_move_attack_blast;
m_tank.c:685:			self->monsterinfo.currentmove = &tank_move_attack_blast;
m_tank.c:697:			self->monsterinfo.currentmove = &tank_move_attack_blast;
tank_move_attack_chain usage ===
m_tank.c:634:mmove_t tank_move_attack_chain = {FRAME_attak401, FRAME_attak429, tank_frames_attack_chain, tank_run};
m_tank.c:676:			self->monsterinfo.currentmove = &tank_move_attack_chain;
m_tank.c:683:			self->monsterinfo.currentmove = &tank_move_attack_chain;
m_tank.c:690:			self->monsterinfo.currentmove = &tank_move_attack_chain;
tank_move_attack_fire_rocket usage ===
m_tank.c:570:mmove_t tank_move_attack_fire_rocket = {FRAME_attak322, FRAME_attak330, tank_frames_attack_fire_rocket, tank_refire_rocket};
m_tank.c:644:					self->monsterinfo.currentmove = &tank_move_attack_fire_rocket;
m_tank.c:652:	self->monsterinfo.currentmove = &tank_move_attack_fire_rocket;
tank_move_attack_post_blast usage ===
m_tank.c:465:mmove_t tank_move_attack_post_blast = {FRAME_attak117, FRAME_attak122, tank_frames_attack_post_blast, tank_run};
m_tank.c:477:	self->monsterinfo.currentmove = &tank_move_attack_post_blast;
tank_move_attack_post_rocket usage ===
m_tank.c:600:mmove_t tank_move_attack_post_rocket = {FRAME_attak331, FRAME_attak353, tank_frames_attack_post_rocket, tank_run};
m_tank.c:647:	self->monsterinfo.currentmove = &tank_move_attack_post_rocket;
tank_move_attack_pre_rocket usage ===
m_tank.c:556:mmove_t tank_move_attack_pre_rocket = {FRAME_attak301, FRAME_attak321, tank_frames_attack_pre_rocket, tank_doattack_rocket};
m_tank.c:693:			self->monsterinfo.currentmove = &tank_move_attack_pre_rocket;
tank_move_attack_strike usage ===
m_tank.c:528:mmove_t tank_move_attack_strike = {FRAME_attak201, FRAME_attak238, tank_frames_attack_strike, tank_poststrike};
m_tank.c:663:		self->monsterinfo.currentmove = &tank_move_attack_strike;
tank_move_death usage ===
m_tank.c:751:mmove_t	tank_move_death = {FRAME_death101, FRAME_death132, tank_frames_death1, tank_dead};
m_tank.c:779:	self->monsterinfo.currentmove = &tank_move_death;
tank_move_pain1 usage ===
m_tank.c:254:mmove_t tank_move_pain1 = {FRAME_pain101, FRAME_pain104, tank_frames_pain1, tank_run};
m_tank.c:319:		self->monsterinfo.currentmove = &tank_move_pain1;
tank_move_pain2 usage ===
m_tank.c:264:mmove_t tank_move_pain2 = {FRAME_pain201, FRAME_pain205, tank_frames_pain2, tank_run};
m_tank.c:321:		self->monsterinfo.currentmove = &tank_move_pain2;
tank_move_pain3 usage ===
m_tank.c:285:mmove_t	tank_move_pain3 = {FRAME_pain301, FRAME_pain316, tank_frames_pain3, tank_run};
m_tank.c:323:		self->monsterinfo.currentmove = &tank_move_pain3;
tank_move_reattack_blast usage ===
m_tank.c:454:mmove_t tank_move_reattack_blast = {FRAME_attak111, FRAME_attak116, tank_frames_reattack_blast, tank_reattack_blaster};
m_tank.c:474:					self->monsterinfo.currentmove = &tank_move_reattack_blast;
tank_move_run usage ===
m_tank.c:207:mmove_t	tank_move_run = {FRAME_walk05, FRAME_walk20, tank_frames_run, NULL};
m_tank.c:235:		self->monsterinfo.currentmove = &tank_move_run;
tank_move_stand usage ===
m_tank.c:113:mmove_t	tank_move_stand = {FRAME_stand01, FRAME_stand30, tank_frames_stand, NULL};
m_tank.c:117:	self->monsterinfo.currentmove = &tank_move_stand;
m_tank.c:228:		self->monsterinfo.currentmove = &tank_move_stand;
m_tank.c:849:	self->monsterinfo.currentmove = &tank_move_stand;
tank_move_start_run usage ===
m_tank.c:186:mmove_t	tank_move_start_run = {FRAME_walk01, FRAME_walk04, tank_frames_start_run, tank_run};
m_tank.c:233:		self->monsterinfo.currentmove == &tank_move_start_run)
m_tank.c:239:		self->monsterinfo.currentmove = &tank_move_start_run;
tank_move_start_walk usage ===
m_tank.c:134:mmove_t	tank_move_start_walk = {FRAME_walk01, FRAME_walk04, tank_frames_start_walk, tank_walk};
tank_move_stop_run usage ===
m_tank.c:217:mmove_t	tank_move_stop_run = {FRAME_walk21, FRAME_walk25, tank_frames_stop_run, tank_walk};
tank_move_stop_walk usage ===
m_tank.c:165:mmove_t	tank_move_stop_walk = {FRAME_walk21, FRAME_walk25, tank_frames_stop_walk, tank_stand};
tank_move_walk usage ===
m_tank.c:155:mmove_t	tank_move_walk = {FRAME_walk05, FRAME_walk20, tank_frames_walk, NULL};
m_tank.c:169:		self->monsterinfo.currentmove = &tank_move_walk;
m_tank.c:232:	if (self->monsterinfo.currentmove == &tank_move_walk ||
timelimit usage ===
g_main.c:40:cvar_t	*timelimit;
g_main.c:219:The timelimit or fraglimit has been exceeded
g_main.c:318:	if (timelimit->value)
g_main.c:320:		if (level.time >= timelimit->value*60)
g_save.c:184:	timelimit = gi.cvar ("timelimit", "0", CVAR_SERVERINFO);
trail usage ===
g_weapon.c:244:	// if went through water, determine where the end and make a bubble trail
p_client.c:1811:	// add player trail so monsters can follow
p_trail.c:41:edict_t		*trail[TRAIL_LENGTH];
p_trail.c:58:		trail[n] = G_Spawn();
p_trail.c:59:		trail[n]->classname = "player_trail";
p_trail.c:74:	VectorCopy (spot, trail[trail_head]->s.origin);
p_trail.c:76:	trail[trail_head]->timestamp = level.time;
p_trail.c:78:	VectorSubtract (spot, trail[PREV(trail_head)]->s.origin, temp);
p_trail.c:79:	trail[trail_head]->s.angles[1] = vectoyaw (temp);
p_trail.c:105:		if(trail[marker]->timestamp <= self->monsterinfo.trail_time)
p_trail.c:111:	if (visible(self, trail[marker]))
p_trail.c:113:		return trail[marker];
p_trail.c:116:	if (visible(self, trail[PREV(marker)]))
p_trail.c:118:		return trail[PREV(marker)];
p_trail.c:121:	return trail[marker];
p_trail.c:134:		if(trail[marker]->timestamp <= self->monsterinfo.trail_time)
p_trail.c:140:	return trail[marker];
p_trail.c:145:	return trail[PREV(trail_head)];
trail_active usage ===
p_trail.c:43:qboolean	trail_active = false;
p_trail.c:63:	trail_active = true;
p_trail.c:71:	if (!trail_active)
p_trail.c:87:	if (!trail_active)
p_trail.c:100:	if (!trail_active)
p_trail.c:129:	if (!trail_active)
trail_head usage ===
p_trail.c:42:int			trail_head;
p_trail.c:62:	trail_head = 0;
p_trail.c:74:	VectorCopy (spot, trail[trail_head]->s.origin);
p_trail.c:76:	trail[trail_head]->timestamp = level.time;
p_trail.c:78:	VectorSubtract (spot, trail[PREV(trail_head)]->s.origin, temp);
p_trail.c:79:	trail[trail_head]->s.angles[1] = vectoyaw (temp);
p_trail.c:81:	trail_head = NEXT(trail_head);
p_trail.c:103:	for (marker = trail_head, n = TRAIL_LENGTH; n; n--)
p_trail.c:132:	for (marker = trail_head, n = TRAIL_LENGTH; n; n--)
p_trail.c:145:	return trail[PREV(trail_head)];
vec3_origin usage ===
g_ai.c:297:	trace = gi.trace (spot1, vec3_origin, vec3_origin, spot2, self, MASK_OPAQUE);
g_chase.c:65:	trace = gi.trace(ownerv, vec3_origin, vec3_origin, o, targ, MASK_SOLID);
g_chase.c:74:	trace = gi.trace(goal, vec3_origin, vec3_origin, o, targ, MASK_SOLID);
g_chase.c:82:	trace = gi.trace(goal, vec3_origin, vec3_origin, o, targ, MASK_SOLID);
g_cmds.c:656:	player_die (ent, ent, ent, 100000, vec3_origin);
g_combat.c:42:		trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:50:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, targ->s.origin, inflictor, MASK_SOLID);
g_combat.c:57:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:64:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:71:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:78:	trace = gi.trace (inflictor->s.origin, vec3_origin, vec3_origin, dest, inflictor, MASK_SOLID);
g_combat.c:573:				T_Damage (ent, inflictor, attacker, dir, inflictor->s.origin, vec3_origin, (int)points, (int)points, DAMAGE_RADIUS, mod);
g_func.c:162:	if (VectorCompare (move, vec3_origin))
g_func.c:412:		T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, 100000, 1, 0, MOD_CRUSH);
g_func.c:419:	T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_func.c:597:	T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_func.c:603:		T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_func.c:608:	if (!VectorCompare (self->avelocity, vec3_origin))
g_func.c:1083:		T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, 100000, 1, 0, MOD_CRUSH);
g_func.c:1090:	T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_func.c:1466:		T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, 100000, 1, 0, MOD_CRUSH);
g_func.c:1479:	T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_func.c:1889:	if (!VectorCompare(self->s.origin, vec3_origin))
g_func.c:1928:	Move_Calc (self, vec3_origin, door_secret_done);
g_func.c:1946:		T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, 100000, 1, 0, MOD_CRUSH);
g_func.c:1957:	T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_misc.c:674:	T_Damage (other, self, self, vec3_origin, self->s.origin, vec3_origin, self->dmg, 1, 0, MOD_CRUSH);
g_misc.c:811:	func_explosive_explode (self, self, other, self->health, vec3_origin);
g_monster.c:237:					T_Damage (ent, world, world, vec3_origin, ent->s.origin, vec3_origin, dmg, 0, DAMAGE_NO_ARMOR, MOD_WATER);
g_monster.c:255:					T_Damage (ent, world, world, vec3_origin, ent->s.origin, vec3_origin, dmg, 0, DAMAGE_NO_ARMOR, MOD_WATER);
g_monster.c:277:			T_Damage (ent, world, world, vec3_origin, ent->s.origin, vec3_origin, 10*ent->waterlevel, 0, 0, MOD_LAVA);
g_monster.c:285:			T_Damage (ent, world, world, vec3_origin, ent->s.origin, vec3_origin, 4*ent->waterlevel, 0, 0, MOD_SLIME);
g_phys.c:217:			VectorCopy (vec3_origin, ent->velocity);
g_phys.c:260:			VectorCopy (vec3_origin, ent->velocity);
g_phys.c:293:				VectorCopy (vec3_origin, ent->velocity);
g_phys.c:307:			VectorCopy (vec3_origin, ent->velocity);
g_phys.c:432:	VectorSubtract (vec3_origin, amove, org);
g_phys.c:733:				VectorCopy (vec3_origin, ent->velocity);
g_phys.c:734:				VectorCopy (vec3_origin, ent->avelocity);
g_target.c:284:		T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, 10 * other->max_health, 1000, 0, MOD_EXIT);
g_target.c:532:			T_Damage (tr.ent, self, self->activator, self->movedir, tr.endpos, vec3_origin, self->dmg, 1, DAMAGE_ENERGY, MOD_TARGET_LASER);
g_trigger.c:25:	if (!VectorCompare (self->s.angles, vec3_origin))
g_trigger.c:87:	if (!VectorCompare(self->movedir, vec3_origin))
g_trigger.c:145:	if (!VectorCompare(ent->s.angles, vec3_origin))
g_trigger.c:493:	T_Damage (other, self, self, vec3_origin, other->s.origin, vec3_origin, self->dmg, self->dmg, dflags, MOD_TRIGGER_HURT);
g_turret.c:58:		T_Damage (other, self, attacker, vec3_origin, other->s.origin, vec3_origin, self->teammaster->dmg, 10, 0, MOD_CRUSH);
g_utils.c:560:		T_Damage (tr.ent, ent, ent, vec3_origin, ent->s.origin, vec3_origin, 100000, 0, DAMAGE_NO_PROTECTION, MOD_TELEFRAG);
g_weapon.c:111:	T_Damage (tr.ent, self, self, dir, point, vec3_origin, damage, kick/2, DAMAGE_NO_KNOCKBACK, MOD_HIT);
g_weapon.c:336:			gi.WriteDir (vec3_origin);
g_weapon.c:422:		T_Damage (ent->enemy, ent, ent->owner, dir, ent->s.origin, vec3_origin, (int)points, (int)points, DAMAGE_RADIUS, mod);
g_weapon.c:756:			T_Damage (ent, self, self->owner, self->velocity, ent->s.origin, vec3_origin, (int)points, 0, DAMAGE_ENERGY, MOD_BFG_EFFECT);
g_weapon.c:853:				T_Damage (tr.ent, self, self->owner, dir, tr.endpos, vec3_origin, dmg, 1, DAMAGE_ENERGY, MOD_BFG_LASER);
m_boss32.c:894:	VectorMA (vec3_origin, 400, vec, self->velocity);
m_float.c:548:	T_Damage (self->enemy, self, self, dir, self->enemy->s.origin, vec3_origin, 5 + rand() % 6, -10, DAMAGE_ENERGY, MOD_UNKNOWN);
m_move.c:74:	trace = gi.trace (start, vec3_origin, vec3_origin, stop, ent, MASK_MONSTERSOLID);
m_move.c:87:			trace = gi.trace (start, vec3_origin, vec3_origin, stop, ent, MASK_MONSTERSOLID);
m_parasite.c:363:	T_Damage (self->enemy, self, self, dir, self->enemy->s.origin, vec3_origin, damage, 0, DAMAGE_NO_KNOCKBACK, MOD_UNKNOWN);
p_view.c:563:			T_Damage (ent, world, world, dir, ent->s.origin, vec3_origin, damage, 0, 0, MOD_FALLING);
p_view.c:695:				T_Damage (current_player, world, world, vec3_origin, current_player->s.origin, vec3_origin, current_player->dmg, 0, DAMAGE_NO_ARMOR, MOD_WATER);
p_view.c:724:				T_Damage (current_player, world, world, vec3_origin, current_player->s.origin, vec3_origin, 1*waterlevel, 0, 0, MOD_LAVA);
p_view.c:726:				T_Damage (current_player, world, world, vec3_origin, current_player->s.origin, vec3_origin, 3*waterlevel, 0, 0, MOD_LAVA);
p_view.c:733:				T_Damage (current_player, world, world, vec3_origin, current_player->s.origin, vec3_origin, 1*waterlevel, 0, 0, MOD_SLIME);
p_weapon.c:855:	Blaster_Fire (ent, vec3_origin, damage, false, EF_BLASTER);
q_shared.c:24:vec3_t vec3_origin = {0,0,0};
xyspeed usage ===
p_view.c:30:float	xyspeed;
p_view.c:280:		delta = bobfracsin * bob_pitch->value * xyspeed;
p_view.c:284:		delta = bobfracsin * bob_roll->value * xyspeed;
p_view.c:311:	bob = bobfracsin * xyspeed * bob_up->value;
p_view.c:351:	ent->client->ps.gunangles[ROLL] = xyspeed * bobfracsin * 0.005;
p_view.c:352:	ent->client->ps.gunangles[YAW] = xyspeed * bobfracsin * 0.01;
p_view.c:359:	ent->client->ps.gunangles[PITCH] = xyspeed * bobfracsin * 0.005;
p_view.c:803:	if ( ent->groundentity && xyspeed > 225)
p_view.c:869:	if (xyspeed)
p_view.c:1014:	xyspeed = sqrt(ent->velocity[0]*ent->velocity[0] + ent->velocity[1]*ent->velocity[1]);
p_view.c:1016:	if (xyspeed < 5)
p_view.c:1023:		if (xyspeed > 210)
p_view.c:1025:		else if (xyspeed > 100)
